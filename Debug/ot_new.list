
ot_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006168  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080064d0  080064d0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064d0  080064d0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080064d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000068  08006540  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006540  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112b1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002825  00000000  00000000  00031384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00033bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7b  00000000  00000000  00034b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001145c  00000000  00000000  000357f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014443  00000000  00000000  00046c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000675ca  00000000  00000000  0005b092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc4  00000000  00000000  000c265c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000c6420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006210 	.word	0x08006210

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006210 	.word	0x08006210

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <init_gesture>:
int _gestureDirInY = 0;
int _gestureSensitivity ;
// _detectedGesture = GESTURE_NONE;

uint8_t init_gesture()
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	uint8_t temp;
	// verify device active
	temp = read8(APDS9960_ID);
 800023a:	1dfc      	adds	r4, r7, #7
 800023c:	2092      	movs	r0, #146	; 0x92
 800023e:	f000 fa63 	bl	8000708 <read8>
 8000242:	0003      	movs	r3, r0
 8000244:	7023      	strb	r3, [r4, #0]
	if (temp != APDS9960_ID_1)
 8000246:	1dfb      	adds	r3, r7, #7
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2bab      	cmp	r3, #171	; 0xab
 800024c:	d001      	beq.n	8000252 <init_gesture+0x1e>
	{
		return false;
 800024e:	2300      	movs	r3, #0
 8000250:	e0a7      	b.n	80003a2 <init_gesture+0x16e>
	}
	// Disable everything
	if (!(write8(APDS9960_ENABLE, 0x00)))
 8000252:	2100      	movs	r1, #0
 8000254:	2080      	movs	r0, #128	; 0x80
 8000256:	f000 fa31 	bl	80006bc <write8>
 800025a:	1e03      	subs	r3, r0, #0
 800025c:	d101      	bne.n	8000262 <init_gesture+0x2e>
	{
		return false;
 800025e:	2300      	movs	r3, #0
 8000260:	e09f      	b.n	80003a2 <init_gesture+0x16e>
	}

	proximityEnabled = 0;
 8000262:	4b52      	ldr	r3, [pc, #328]	; (80003ac <init_gesture+0x178>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
	gesture_enable = 0;
 8000268:	4b51      	ldr	r3, [pc, #324]	; (80003b0 <init_gesture+0x17c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	// Upon power up, the wait time register is set to 0xFF.
	if (!(write8(APDS9960_WTIME, 0xFF)))
 800026e:	21ff      	movs	r1, #255	; 0xff
 8000270:	2083      	movs	r0, #131	; 0x83
 8000272:	f000 fa23 	bl	80006bc <write8>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d101      	bne.n	800027e <init_gesture+0x4a>
	{
		return false;
 800027a:	2300      	movs	r3, #0
 800027c:	e091      	b.n	80003a2 <init_gesture+0x16e>
  time the LDR pin is sinking current during a gesture pulse
  2- 16μs
  Gesture Pulses - 8
  */
	// 16us, 16 pulses // default is: 0x40 = 8us, 1 pulse
	if (!(write8(APDS9960_GPULSE, 0x8F)))
 800027e:	218f      	movs	r1, #143	; 0x8f
 8000280:	20a6      	movs	r0, #166	; 0xa6
 8000282:	f000 fa1b 	bl	80006bc <write8>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d101      	bne.n	800028e <init_gesture+0x5a>
	{
		return false;
 800028a:	2300      	movs	r3, #0
 800028c:	e089      	b.n	80003a2 <init_gesture+0x16e>
	}

	/* The proximity pulse count register bits set the number of pulses to be output on the LDR pin.	*/

	// 16us, 16 pulses // default is: 0x40 = 8us, 1 pulse
	if (!(write8(APDS9960_PPULSE, 0x8F)))
 800028e:	218f      	movs	r1, #143	; 0x8f
 8000290:	208e      	movs	r0, #142	; 0x8e
 8000292:	f000 fa13 	bl	80006bc <write8>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d101      	bne.n	800029e <init_gesture+0x6a>
	{
		return false;
 800029a:	2300      	movs	r3, #0
 800029c:	e081      	b.n	80003a2 <init_gesture+0x16e>
	}

	// setGestureIntEnable

	temp = read8(APDS9960_GCONF4); // READ CONF4
 800029e:	1dfc      	adds	r4, r7, #7
 80002a0:	20ab      	movs	r0, #171	; 0xab
 80002a2:	f000 fa31 	bl	8000708 <read8>
 80002a6:	0003      	movs	r3, r0
 80002a8:	7023      	strb	r3, [r4, #0]
	temp |= 0x02;
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	1dfa      	adds	r2, r7, #7
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	2102      	movs	r1, #2
 80002b2:	430a      	orrs	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_GCONF4, temp); // // wite CONF4
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0019      	movs	r1, r3
 80002bc:	20ab      	movs	r0, #171	; 0xab
 80002be:	f000 f9fd 	bl	80006bc <write8>

	// setGestureMode
	temp = read8(APDS9960_GCONF4); // READ CONF4
 80002c2:	1dfc      	adds	r4, r7, #7
 80002c4:	20ab      	movs	r0, #171	; 0xab
 80002c6:	f000 fa1f 	bl	8000708 <read8>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	1dfa      	adds	r2, r7, #7
 80002d2:	7812      	ldrb	r2, [r2, #0]
 80002d4:	2101      	movs	r1, #1
 80002d6:	430a      	orrs	r2, r1
 80002d8:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_GCONF4, temp); // // wite CONF4
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	0019      	movs	r1, r3
 80002e0:	20ab      	movs	r0, #171	; 0xab
 80002e2:	f000 f9eb 	bl	80006bc <write8>
	gesture_enable = 1;
 80002e6:	4b32      	ldr	r3, [pc, #200]	; (80003b0 <init_gesture+0x17c>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]

	// enablePower
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 80002ec:	1dfc      	adds	r4, r7, #7
 80002ee:	2080      	movs	r0, #128	; 0x80
 80002f0:	f000 fa0a 	bl	8000708 <read8>
 80002f4:	0003      	movs	r3, r0
 80002f6:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	1dfa      	adds	r2, r7, #7
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	2101      	movs	r1, #1
 8000300:	430a      	orrs	r2, r1
 8000302:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	0019      	movs	r1, r3
 800030a:	2080      	movs	r0, #128	; 0x80
 800030c:	f000 f9d6 	bl	80006bc <write8>

	// enableWait
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 8000310:	1dfc      	adds	r4, r7, #7
 8000312:	2080      	movs	r0, #128	; 0x80
 8000314:	f000 f9f8 	bl	8000708 <read8>
 8000318:	0003      	movs	r3, r0
 800031a:	7023      	strb	r3, [r4, #0]
	temp |= 0x68;
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	1dfa      	adds	r2, r7, #7
 8000320:	7812      	ldrb	r2, [r2, #0]
 8000322:	2168      	movs	r1, #104	; 0x68
 8000324:	430a      	orrs	r2, r1
 8000326:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	0019      	movs	r1, r3
 800032e:	2080      	movs	r0, #128	; 0x80
 8000330:	f000 f9c4 	bl	80006bc <write8>
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 8000334:	1dfc      	adds	r4, r7, #7
 8000336:	2080      	movs	r0, #128	; 0x80
 8000338:	f000 f9e6 	bl	8000708 <read8>
 800033c:	0003      	movs	r3, r0
 800033e:	7023      	strb	r3, [r4, #0]
	// ADC Integration Time Register (0x81)
	// set ADC integration time to 10 ms
	temp = 256 - (10 / 2.78);
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	22fc      	movs	r2, #252	; 0xfc
 8000344:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ATIME, temp); // // wite APDS9960_ATIME
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	0019      	movs	r1, r3
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f000 f9b5 	bl	80006bc <write8>

	// set ADC gain 4x (0x00 => 1x, 0x01 => 4x, 0x02 => 16x, 0x03 => 64x)
	write8(APDS9960_ATIME, 0x00); // // wite APDS9960_ATIME
 8000352:	2100      	movs	r1, #0
 8000354:	2081      	movs	r0, #129	; 0x81
 8000356:	f000 f9b1 	bl	80006bc <write8>

	if (sensitivity > 100)
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <init_gesture+0x180>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b64      	cmp	r3, #100	; 0x64
 8000360:	d902      	bls.n	8000368 <init_gesture+0x134>
	{
		sensitivity = 100;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <init_gesture+0x180>)
 8000364:	2264      	movs	r2, #100	; 0x64
 8000366:	701a      	strb	r2, [r3, #0]
	}
	_gestureSensitivity = 100 - sensitivity;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <init_gesture+0x180>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	001a      	movs	r2, r3
 800036e:	2364      	movs	r3, #100	; 0x64
 8000370:	1a9a      	subs	r2, r3, r2
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <init_gesture+0x184>)
 8000374:	601a      	str	r2, [r3, #0]

	HAL_Delay(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f002 fd26 	bl	8002dc8 <HAL_Delay>

	// enablePower
	temp = read8(APDS9960_ENABLE); // READ APDS9960_ENABLE
 800037c:	1dfc      	adds	r4, r7, #7
 800037e:	2080      	movs	r0, #128	; 0x80
 8000380:	f000 f9c2 	bl	8000708 <read8>
 8000384:	0003      	movs	r3, r0
 8000386:	7023      	strb	r3, [r4, #0]
	temp |= 0x01;
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	1dfa      	adds	r2, r7, #7
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	2101      	movs	r1, #1
 8000390:	430a      	orrs	r2, r1
 8000392:	701a      	strb	r2, [r3, #0]
	write8(APDS9960_ENABLE, temp); // // wite APDS9960_ENABLE
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0019      	movs	r1, r3
 800039a:	2080      	movs	r0, #128	; 0x80
 800039c:	f000 f98e 	bl	80006bc <write8>

	return true;
 80003a0:	2301      	movs	r3, #1
}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b003      	add	sp, #12
 80003a8:	bd90      	pop	{r4, r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	20000085 	.word	0x20000085
 80003b0:	20000084 	.word	0x20000084
 80003b4:	20000002 	.word	0x20000002
 80003b8:	20000098 	.word	0x20000098

080003bc <gestureFIFOAvailable>:

uint8_t gestureFIFOAvailable()
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
	uint8_t _bytes;
	_bytes = read8(APDS9960_GSTATUS); // operational condition of the gesture state machine.
 80003c2:	1dfc      	adds	r4, r7, #7
 80003c4:	20af      	movs	r0, #175	; 0xaf
 80003c6:	f000 f99f 	bl	8000708 <read8>
 80003ca:	0003      	movs	r3, r0
 80003cc:	7023      	strb	r3, [r4, #0]
	if ((_bytes & 0x01) == 0x00)
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2201      	movs	r2, #1
 80003d4:	4013      	ands	r3, r2
 80003d6:	d101      	bne.n	80003dc <gestureFIFOAvailable+0x20>
	{
		return false;
 80003d8:	2300      	movs	r3, #0
 80003da:	e00d      	b.n	80003f8 <gestureFIFOAvailable+0x3c>
	}

	_bytes = read8(APDS9960_GFLVL); // number of datasets that are currently available in the FIFO for read.
 80003dc:	1dfc      	adds	r4, r7, #7
 80003de:	20ae      	movs	r0, #174	; 0xae
 80003e0:	f000 f992 	bl	8000708 <read8>
 80003e4:	0003      	movs	r3, r0
 80003e6:	7023      	strb	r3, [r4, #0]
	if (_bytes == 0x00)
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <gestureFIFOAvailable+0x38>
	{
		return false;
 80003f0:	2300      	movs	r3, #0
 80003f2:	e001      	b.n	80003f8 <gestureFIFOAvailable+0x3c>
	}

	return _bytes;
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
}
 80003f8:	0018      	movs	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b003      	add	sp, #12
 80003fe:	bd90      	pop	{r4, r7, pc}

08000400 <readGesture>:

uint8_t readGesture()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	uint8_t gesture = _detectedGesture;
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <readGesture+0x20>)
 800040a:	7812      	ldrb	r2, [r2, #0]
 800040c:	701a      	strb	r2, [r3, #0]

	_detectedGesture = GESTURE_NONE;
 800040e:	4b04      	ldr	r3, [pc, #16]	; (8000420 <readGesture+0x20>)
 8000410:	22ff      	movs	r2, #255	; 0xff
 8000412:	701a      	strb	r2, [r3, #0]

	return gesture;
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
}
 8000418:	0018      	movs	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000086 	.word	0x20000086

08000424 <handleGesture>:

int32_t handleGesture()
{
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b0ab      	sub	sp, #172	; 0xac
 8000428:	af04      	add	r7, sp, #16
	const uint8_t gestureThreshold = 80;
 800042a:	2393      	movs	r3, #147	; 0x93
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	2250      	movs	r2, #80	; 0x50
 8000430:	701a      	strb	r2, [r3, #0]

	while (1)
	{

		uint8_t available = gestureFIFOAvailable();
 8000432:	2592      	movs	r5, #146	; 0x92
 8000434:	197c      	adds	r4, r7, r5
 8000436:	f7ff ffc1 	bl	80003bc <gestureFIFOAvailable>
 800043a:	0003      	movs	r3, r0
 800043c:	7023      	strb	r3, [r4, #0]
		if (available <= 0)
 800043e:	197b      	adds	r3, r7, r5
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d101      	bne.n	800044a <handleGesture+0x26>
			return 0;
 8000446:	2300      	movs	r3, #0
 8000448:	e0da      	b.n	8000600 <handleGesture+0x1dc>
		uint8_t fifo_data[128];

		//		uint8_t ret;
		if ((HAL_I2C_Mem_Read(&hi2c1, APDS9960_I2C_ADDR, APDS9960_GFIFO_U, 0x01, &fifo_data[0], (available * 4), 10)) != HAL_OK)
 800044a:	4b6f      	ldr	r3, [pc, #444]	; (8000608 <handleGesture+0x1e4>)
 800044c:	8819      	ldrh	r1, [r3, #0]
 800044e:	2392      	movs	r3, #146	; 0x92
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b29b      	uxth	r3, r3
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	b29b      	uxth	r3, r3
 800045a:	486c      	ldr	r0, [pc, #432]	; (800060c <handleGesture+0x1e8>)
 800045c:	220a      	movs	r2, #10
 800045e:	9202      	str	r2, [sp, #8]
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2301      	movs	r3, #1
 8000468:	22fc      	movs	r2, #252	; 0xfc
 800046a:	f003 f939 	bl	80036e0 <HAL_I2C_Mem_Read>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <handleGesture+0x52>
		{
			return false;
 8000472:	2300      	movs	r3, #0
 8000474:	e0c4      	b.n	8000600 <handleGesture+0x1dc>
		}

		//	    if (bytes_read == 0)
		//	      return 0;
		for (int i = 0; i + 3 < (available * 4); i += 4)
 8000476:	2300      	movs	r3, #0
 8000478:	2294      	movs	r2, #148	; 0x94
 800047a:	18ba      	adds	r2, r7, r2
 800047c:	6013      	str	r3, [r2, #0]
 800047e:	e0b3      	b.n	80005e8 <handleGesture+0x1c4>
		{
			uint8_t u, d, l, r;
			u = fifo_data[i];
 8000480:	2491      	movs	r4, #145	; 0x91
 8000482:	193b      	adds	r3, r7, r4
 8000484:	1d39      	adds	r1, r7, #4
 8000486:	2094      	movs	r0, #148	; 0x94
 8000488:	183a      	adds	r2, r7, r0
 800048a:	6812      	ldr	r2, [r2, #0]
 800048c:	188a      	adds	r2, r1, r2
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	701a      	strb	r2, [r3, #0]
			d = fifo_data[i + 1];
 8000492:	183b      	adds	r3, r7, r0
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	2590      	movs	r5, #144	; 0x90
 800049a:	197b      	adds	r3, r7, r5
 800049c:	1d39      	adds	r1, r7, #4
 800049e:	5c8a      	ldrb	r2, [r1, r2]
 80004a0:	701a      	strb	r2, [r3, #0]
			l = fifo_data[i + 2];
 80004a2:	183b      	adds	r3, r7, r0
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1c9a      	adds	r2, r3, #2
 80004a8:	268f      	movs	r6, #143	; 0x8f
 80004aa:	19bb      	adds	r3, r7, r6
 80004ac:	1d39      	adds	r1, r7, #4
 80004ae:	5c8a      	ldrb	r2, [r1, r2]
 80004b0:	701a      	strb	r2, [r3, #0]
			r = fifo_data[i + 3];
 80004b2:	183b      	adds	r3, r7, r0
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	1cda      	adds	r2, r3, #3
 80004b8:	208e      	movs	r0, #142	; 0x8e
 80004ba:	183b      	adds	r3, r7, r0
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	5c8a      	ldrb	r2, [r1, r2]
 80004c0:	701a      	strb	r2, [r3, #0]
			//	          debugPrint(&huart2, "l");
			//	          debugPrintln(&huart2, l);
			//	          debugPrint(&huart2, "r");
			//	          debugPrintln(&huart2, r);

			if (u < gestureThreshold && d < gestureThreshold && l < gestureThreshold && r < gestureThreshold)
 80004c2:	193a      	adds	r2, r7, r4
 80004c4:	2193      	movs	r1, #147	; 0x93
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d262      	bcs.n	8000596 <handleGesture+0x172>
 80004d0:	197a      	adds	r2, r7, r5
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d25c      	bcs.n	8000596 <handleGesture+0x172>
 80004dc:	19ba      	adds	r2, r7, r6
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d256      	bcs.n	8000596 <handleGesture+0x172>
 80004e8:	183a      	adds	r2, r7, r0
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d250      	bcs.n	8000596 <handleGesture+0x172>
			{
				_gestureIn = true;
 80004f4:	4b46      	ldr	r3, [pc, #280]	; (8000610 <handleGesture+0x1ec>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
				if (_gestureDirInX != 0 || _gestureDirInY != 0)
 80004fa:	4b46      	ldr	r3, [pc, #280]	; (8000614 <handleGesture+0x1f0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d103      	bne.n	800050a <handleGesture+0xe6>
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <handleGesture+0x1f4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d067      	beq.n	80005da <handleGesture+0x1b6>
				{
					int totalX = _gestureDirInX - _gestureDirectionX;
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <handleGesture+0x1f0>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b43      	ldr	r3, [pc, #268]	; (800061c <handleGesture+0x1f8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	2188      	movs	r1, #136	; 0x88
 8000516:	187a      	adds	r2, r7, r1
 8000518:	6013      	str	r3, [r2, #0]
					int totalY = _gestureDirInY - _gestureDirectionY;
 800051a:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <handleGesture+0x1f4>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b40      	ldr	r3, [pc, #256]	; (8000620 <handleGesture+0x1fc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	2284      	movs	r2, #132	; 0x84
 8000526:	18ba      	adds	r2, r7, r2
 8000528:	6013      	str	r3, [r2, #0]
					//		          debugPrint(&huart2, "out");
					//		          debugPrint(&huart2, totalX);
					//		          debugPrint(&huart2, ", ");
					//		          debugPrintln(&huart2, totalY);

					if (totalX < -_gestureSensitivity)
 800052a:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <handleGesture+0x200>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	425b      	negs	r3, r3
 8000530:	187a      	adds	r2, r7, r1
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	da02      	bge.n	800053e <handleGesture+0x11a>
					{
						_detectedGesture = GESTURE_LEFT;
 8000538:	4b3b      	ldr	r3, [pc, #236]	; (8000628 <handleGesture+0x204>)
 800053a:	2202      	movs	r2, #2
 800053c:	701a      	strb	r2, [r3, #0]
					}
					if (totalX > _gestureSensitivity)
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <handleGesture+0x200>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	18ba      	adds	r2, r7, r2
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd02      	ble.n	8000552 <handleGesture+0x12e>
					{
						_detectedGesture = GESTURE_RIGHT;
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <handleGesture+0x204>)
 800054e:	2203      	movs	r2, #3
 8000550:	701a      	strb	r2, [r3, #0]
					}
					if (totalY < -_gestureSensitivity)
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <handleGesture+0x200>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	425b      	negs	r3, r3
 8000558:	2284      	movs	r2, #132	; 0x84
 800055a:	18ba      	adds	r2, r7, r2
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	da02      	bge.n	8000568 <handleGesture+0x144>
					{
						_detectedGesture = GESTURE_DOWN;
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <handleGesture+0x204>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
					}
					if (totalY > _gestureSensitivity)
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <handleGesture+0x200>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2284      	movs	r2, #132	; 0x84
 800056e:	18ba      	adds	r2, r7, r2
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	429a      	cmp	r2, r3
 8000574:	dd02      	ble.n	800057c <handleGesture+0x158>
					{
						_detectedGesture = GESTURE_UP;
 8000576:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <handleGesture+0x204>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
					}
					_gestureDirectionX = 0;
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <handleGesture+0x1f8>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
					_gestureDirectionY = 0;
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <handleGesture+0x1fc>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
					_gestureDirInX = 0;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <handleGesture+0x1f0>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
					_gestureDirInY = 0;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <handleGesture+0x1f4>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
				}
				continue;
 8000594:	e021      	b.n	80005da <handleGesture+0x1b6>
			}

			_gestureDirectionX = r - l;
 8000596:	238e      	movs	r3, #142	; 0x8e
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	238f      	movs	r3, #143	; 0x8f
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	1ad2      	subs	r2, r2, r3
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <handleGesture+0x1f8>)
 80005a6:	601a      	str	r2, [r3, #0]
			_gestureDirectionY = u - d;
 80005a8:	2391      	movs	r3, #145	; 0x91
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <handleGesture+0x1fc>)
 80005b8:	601a      	str	r2, [r3, #0]
			if (_gestureIn)
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <handleGesture+0x1ec>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <handleGesture+0x1b8>
			{
				_gestureIn = false;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <handleGesture+0x1ec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
				_gestureDirInX = _gestureDirectionX;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <handleGesture+0x1f8>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <handleGesture+0x1f0>)
 80005ce:	601a      	str	r2, [r3, #0]
				_gestureDirInY = _gestureDirectionY;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <handleGesture+0x1fc>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <handleGesture+0x1f4>)
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e000      	b.n	80005dc <handleGesture+0x1b8>
				continue;
 80005da:	46c0      	nop			; (mov r8, r8)
		for (int i = 0; i + 3 < (available * 4); i += 4)
 80005dc:	2294      	movs	r2, #148	; 0x94
 80005de:	18bb      	adds	r3, r7, r2
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	18ba      	adds	r2, r7, r2
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	2394      	movs	r3, #148	; 0x94
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1cda      	adds	r2, r3, #3
 80005f0:	2392      	movs	r3, #146	; 0x92
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	429a      	cmp	r2, r3
 80005fa:	da00      	bge.n	80005fe <handleGesture+0x1da>
 80005fc:	e740      	b.n	8000480 <handleGesture+0x5c>
	{
 80005fe:	e718      	b.n	8000432 <handleGesture+0xe>
			}
		}
	}
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b027      	add	sp, #156	; 0x9c
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	200000b4 	.word	0x200000b4
 8000610:	20000087 	.word	0x20000087
 8000614:	20000090 	.word	0x20000090
 8000618:	20000094 	.word	0x20000094
 800061c:	20000088 	.word	0x20000088
 8000620:	2000008c 	.word	0x2000008c
 8000624:	20000098 	.word	0x20000098
 8000628:	20000086 	.word	0x20000086

0800062c <gestureAvailable>:

uint8_t gestureAvailable()
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	uint8_t r;
	// enable gesture

	// setGestureMode
	r = read8(APDS9960_ENABLE); // READ CONF4
 8000632:	1dfc      	adds	r4, r7, #7
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	f000 f867 	bl	8000708 <read8>
 800063a:	0003      	movs	r3, r0
 800063c:	7023      	strb	r3, [r4, #0]
	if ((r & 0b01000000) != 0)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	4013      	ands	r3, r2
 8000646:	d003      	beq.n	8000650 <gestureAvailable+0x24>
	{
		gesture_enable = true;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <gestureAvailable+0x8c>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	e019      	b.n	8000684 <gestureAvailable+0x58>
		// return true;
	}
	else
	{
		r |= 0b01000001;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	1dfa      	adds	r2, r7, #7
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	2141      	movs	r1, #65	; 0x41
 8000658:	430a      	orrs	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
		write8(APDS9960_ENABLE, r);
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	0019      	movs	r1, r3
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	f000 f82a 	bl	80006bc <write8>
		r = read8(APDS9960_ENABLE); // READ CONF4
 8000668:	1dfc      	adds	r4, r7, #7
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	f000 f84c 	bl	8000708 <read8>
 8000670:	0003      	movs	r3, r0
 8000672:	7023      	strb	r3, [r4, #0]
		if ((r & 0b01000000) != 0)
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2240      	movs	r2, #64	; 0x40
 800067a:	4013      	ands	r3, r2
 800067c:	d002      	beq.n	8000684 <gestureAvailable+0x58>
		{
			gesture_enable = true;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <gestureAvailable+0x8c>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
			// return true;
		}
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) != 0)
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	021a      	lsls	r2, r3, #8
 8000688:	2390      	movs	r3, #144	; 0x90
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f002 fe0c 	bl	80032ac <HAL_GPIO_ReadPin>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <gestureAvailable+0x70>
	{
		return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	e008      	b.n	80006ae <gestureAvailable+0x82>
	}

	if (!gestureFIFOAvailable())
 800069c:	f7ff fe8e 	bl	80003bc <gestureFIFOAvailable>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d101      	bne.n	80006a8 <gestureAvailable+0x7c>
	{
		return false;
 80006a4:	2300      	movs	r3, #0
 80006a6:	e002      	b.n	80006ae <gestureAvailable+0x82>
	}

	handleGesture();
 80006a8:	f7ff febc 	bl	8000424 <handleGesture>
	//			write8(APDS9960_GCONF4,r); // // wite CONF4
	//			gesture_enable = 1;
	//	  }
	// HAL_Delay(10);

	return (_detectedGesture == GESTURE_NONE) ? 0 : 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	0018      	movs	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b003      	add	sp, #12
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	20000084 	.word	0x20000084

080006bc <write8>:

uint8_t write8(uint8_t reg, uint8_t value)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	1dbb      	adds	r3, r7, #6
 80006ca:	1c0a      	adds	r2, r1, #0
 80006cc:	701a      	strb	r2, [r3, #0]

	if ((HAL_I2C_Mem_Write(&hi2c1, APDS9960_I2C_ADDR, reg, 0x01, &value, 0x01, 10)) != HAL_OK)
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <write8+0x44>)
 80006d0:	8819      	ldrh	r1, [r3, #0]
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <write8+0x48>)
 80006da:	230a      	movs	r3, #10
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	2301      	movs	r3, #1
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	f002 fecc 	bl	8003484 <HAL_I2C_Mem_Write>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <write8+0x38>
	{
		return false;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e000      	b.n	80006f6 <write8+0x3a>
	}

	return true;
 80006f4:	2301      	movs	r3, #1
}
 80006f6:	0018      	movs	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	20000000 	.word	0x20000000
 8000704:	200000b4 	.word	0x200000b4

08000708 <read8>:

uint8_t read8(uint8_t reg)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af04      	add	r7, sp, #16
 800070e:	0002      	movs	r2, r0
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	701a      	strb	r2, [r3, #0]

	uint8_t ret;
	if ((HAL_I2C_Mem_Read(&hi2c1, APDS9960_I2C_ADDR, reg, 0x01, &ret, 0x01, 10)) != HAL_OK)
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <read8+0x44>)
 8000716:	8819      	ldrh	r1, [r3, #0]
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b29a      	uxth	r2, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <read8+0x48>)
 8000720:	230a      	movs	r3, #10
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	f002 ffd6 	bl	80036e0 <HAL_I2C_Mem_Read>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <read8+0x34>
	{
		return false;
 8000738:	2300      	movs	r3, #0
 800073a:	e002      	b.n	8000742 <read8+0x3a>
	}

	return ret;
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	781b      	ldrb	r3, [r3, #0]
}
 8000742:	0018      	movs	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000000 	.word	0x20000000
 8000750:	200000b4 	.word	0x200000b4

08000754 <lcd_init>:

#include <lcd.h>

/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

	HAL_Delay(30);
 8000758:	201e      	movs	r0, #30
 800075a:	f002 fb35 	bl	8002dc8 <HAL_Delay>

	PIN_LOW(D4_PORT, D4_PIN);
 800075e:	2390      	movs	r3, #144	; 0x90
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	2200      	movs	r2, #0
 8000764:	2101      	movs	r1, #1
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fdbd 	bl	80032e6 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT, D5_PIN);
 800076c:	2390      	movs	r3, #144	; 0x90
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f002 fdb6 	bl	80032e6 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT, D6_PIN);
 800077a:	2390      	movs	r3, #144	; 0x90
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fdaf 	bl	80032e6 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT, D7_PIN);
 8000788:	2390      	movs	r3, #144	; 0x90
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2200      	movs	r2, #0
 800078e:	2108      	movs	r1, #8
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fda8 	bl	80032e6 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT, RS_PIN);
 8000796:	2390      	movs	r3, #144	; 0x90
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fda1 	bl	80032e6 <HAL_GPIO_WritePin>

	PIN_HIGH(EN_PORT, EN_PIN);
 80007a4:	2390      	movs	r3, #144	; 0x90
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 fd9a 	bl	80032e6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 80007b2:	2390      	movs	r3, #144	; 0x90
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	2200      	movs	r2, #0
 80007b8:	2110      	movs	r1, #16
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 fd93 	bl	80032e6 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 80007c0:	2032      	movs	r0, #50	; 0x32
 80007c2:	f002 fb01 	bl	8002dc8 <HAL_Delay>
	//	HAL_Delay(1);
	//	lcd_write (0,0x01);  // clear display
	//	HAL_Delay(1);
	//	lcd_write (0,0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	//	HAL_Delay(1);
	lcd_write(0, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007c6:	2128      	movs	r1, #40	; 0x28
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 f822 	bl	8000812 <lcd_write>
	HAL_Delay(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f002 fafa 	bl	8002dc8 <HAL_Delay>
	lcd_write(0, 0x0c);
 80007d4:	210c      	movs	r1, #12
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f81b 	bl	8000812 <lcd_write>
	HAL_Delay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f002 faf3 	bl	8002dc8 <HAL_Delay>
	lcd_write(0, 0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80007e2:	2106      	movs	r1, #6
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 f814 	bl	8000812 <lcd_write>
	HAL_Delay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f002 faec 	bl	8002dc8 <HAL_Delay>
	lcd_write(0, 0x01); // clear display
 80007f0:	2101      	movs	r1, #1
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f80d 	bl	8000812 <lcd_write>
	HAL_Delay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f002 fae5 	bl	8002dc8 <HAL_Delay>
	lcd_write(0, 0x80); // clear display
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f806 	bl	8000812 <lcd_write>
	HAL_Delay(1);
 8000806:	2001      	movs	r0, #1
 8000808:	f002 fade 	bl	8002dc8 <HAL_Delay>
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type, uint8_t data)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	0002      	movs	r2, r0
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	1dbb      	adds	r3, r7, #6
 8000820:	1c0a      	adds	r2, r1, #0
 8000822:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8000824:	2002      	movs	r0, #2
 8000826:	f002 facf 	bl	8002dc8 <HAL_Delay>
	if (type)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d007      	beq.n	8000842 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT, RS_PIN);
 8000832:	2390      	movs	r3, #144	; 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2201      	movs	r2, #1
 8000838:	2120      	movs	r1, #32
 800083a:	0018      	movs	r0, r3
 800083c:	f002 fd53 	bl	80032e6 <HAL_GPIO_WritePin>
 8000840:	e006      	b.n	8000850 <lcd_write+0x3e>
	}
	else
	{
		PIN_LOW(RS_PORT, RS_PIN);
 8000842:	2390      	movs	r3, #144	; 0x90
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fd4b 	bl	80032e6 <HAL_GPIO_WritePin>
	}

	// Send High Nibble
	if (data & 0x80)
 8000850:	1dbb      	adds	r3, r7, #6
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25b      	sxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	da07      	bge.n	800086a <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT, D7_PIN);
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2201      	movs	r2, #1
 8000860:	2108      	movs	r1, #8
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fd3f 	bl	80032e6 <HAL_GPIO_WritePin>
 8000868:	e006      	b.n	8000878 <lcd_write+0x66>
	}
	else
	{
		PIN_LOW(D7_PORT, D7_PIN);
 800086a:	2390      	movs	r3, #144	; 0x90
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fd37 	bl	80032e6 <HAL_GPIO_WritePin>
	}

	if (data & 0x40)
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	4013      	ands	r3, r2
 8000880:	d007      	beq.n	8000892 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT, D6_PIN);
 8000882:	2390      	movs	r3, #144	; 0x90
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2201      	movs	r2, #1
 8000888:	2104      	movs	r1, #4
 800088a:	0018      	movs	r0, r3
 800088c:	f002 fd2b 	bl	80032e6 <HAL_GPIO_WritePin>
 8000890:	e006      	b.n	80008a0 <lcd_write+0x8e>
	}
	else
	{
		PIN_LOW(D6_PORT, D6_PIN);
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	2200      	movs	r2, #0
 8000898:	2104      	movs	r1, #4
 800089a:	0018      	movs	r0, r3
 800089c:	f002 fd23 	bl	80032e6 <HAL_GPIO_WritePin>
	}

	if (data & 0x20)
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2220      	movs	r2, #32
 80008a6:	4013      	ands	r3, r2
 80008a8:	d007      	beq.n	80008ba <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT, D5_PIN);
 80008aa:	2390      	movs	r3, #144	; 0x90
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2201      	movs	r2, #1
 80008b0:	2102      	movs	r1, #2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 fd17 	bl	80032e6 <HAL_GPIO_WritePin>
 80008b8:	e006      	b.n	80008c8 <lcd_write+0xb6>
	}
	else
	{
		PIN_LOW(D5_PORT, D5_PIN);
 80008ba:	2390      	movs	r3, #144	; 0x90
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f002 fd0f 	bl	80032e6 <HAL_GPIO_WritePin>
	}

	if (data & 0x10)
 80008c8:	1dbb      	adds	r3, r7, #6
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2210      	movs	r2, #16
 80008ce:	4013      	ands	r3, r2
 80008d0:	d007      	beq.n	80008e2 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT, D4_PIN);
 80008d2:	2390      	movs	r3, #144	; 0x90
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2201      	movs	r2, #1
 80008d8:	2101      	movs	r1, #1
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fd03 	bl	80032e6 <HAL_GPIO_WritePin>
 80008e0:	e006      	b.n	80008f0 <lcd_write+0xde>
	}
	else
	{
		PIN_LOW(D4_PORT, D4_PIN);
 80008e2:	2390      	movs	r3, #144	; 0x90
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2200      	movs	r2, #0
 80008e8:	2101      	movs	r1, #1
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 fcfb 	bl	80032e6 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT, EN_PIN);
 80008f0:	2390      	movs	r3, #144	; 0x90
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 fcf4 	bl	80032e6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 80008fe:	2390      	movs	r3, #144	; 0x90
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2200      	movs	r2, #0
 8000904:	2110      	movs	r1, #16
 8000906:	0018      	movs	r0, r3
 8000908:	f002 fced 	bl	80032e6 <HAL_GPIO_WritePin>

	// Send Low Nibble
	if (data & 0x08)
 800090c:	1dbb      	adds	r3, r7, #6
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2208      	movs	r2, #8
 8000912:	4013      	ands	r3, r2
 8000914:	d007      	beq.n	8000926 <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT, D7_PIN);
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	2201      	movs	r2, #1
 800091c:	2108      	movs	r1, #8
 800091e:	0018      	movs	r0, r3
 8000920:	f002 fce1 	bl	80032e6 <HAL_GPIO_WritePin>
 8000924:	e006      	b.n	8000934 <lcd_write+0x122>
	}
	else
	{
		PIN_LOW(D7_PORT, D7_PIN);
 8000926:	2390      	movs	r3, #144	; 0x90
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	2200      	movs	r2, #0
 800092c:	2108      	movs	r1, #8
 800092e:	0018      	movs	r0, r3
 8000930:	f002 fcd9 	bl	80032e6 <HAL_GPIO_WritePin>
	}

	if (data & 0x04)
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2204      	movs	r2, #4
 800093a:	4013      	ands	r3, r2
 800093c:	d007      	beq.n	800094e <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT, D6_PIN);
 800093e:	2390      	movs	r3, #144	; 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2201      	movs	r2, #1
 8000944:	2104      	movs	r1, #4
 8000946:	0018      	movs	r0, r3
 8000948:	f002 fccd 	bl	80032e6 <HAL_GPIO_WritePin>
 800094c:	e006      	b.n	800095c <lcd_write+0x14a>
	}
	else
	{
		PIN_LOW(D6_PORT, D6_PIN);
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	0018      	movs	r0, r3
 8000958:	f002 fcc5 	bl	80032e6 <HAL_GPIO_WritePin>
	}

	if (data & 0x02)
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2202      	movs	r2, #2
 8000962:	4013      	ands	r3, r2
 8000964:	d007      	beq.n	8000976 <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT, D5_PIN);
 8000966:	2390      	movs	r3, #144	; 0x90
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2201      	movs	r2, #1
 800096c:	2102      	movs	r1, #2
 800096e:	0018      	movs	r0, r3
 8000970:	f002 fcb9 	bl	80032e6 <HAL_GPIO_WritePin>
 8000974:	e006      	b.n	8000984 <lcd_write+0x172>
	}
	else
	{
		PIN_LOW(D5_PORT, D5_PIN);
 8000976:	2390      	movs	r3, #144	; 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	0018      	movs	r0, r3
 8000980:	f002 fcb1 	bl	80032e6 <HAL_GPIO_WritePin>
	}

	if (data & 0x01)
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2201      	movs	r2, #1
 800098a:	4013      	ands	r3, r2
 800098c:	d007      	beq.n	800099e <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT, D4_PIN);
 800098e:	2390      	movs	r3, #144	; 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	2201      	movs	r2, #1
 8000994:	2101      	movs	r1, #1
 8000996:	0018      	movs	r0, r3
 8000998:	f002 fca5 	bl	80032e6 <HAL_GPIO_WritePin>
 800099c:	e006      	b.n	80009ac <lcd_write+0x19a>
	}
	else
	{
		PIN_LOW(D4_PORT, D4_PIN);
 800099e:	2390      	movs	r3, #144	; 0x90
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	2200      	movs	r2, #0
 80009a4:	2101      	movs	r1, #1
 80009a6:	0018      	movs	r0, r3
 80009a8:	f002 fc9d 	bl	80032e6 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT, EN_PIN);
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2201      	movs	r2, #1
 80009b2:	2110      	movs	r1, #16
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 fc96 	bl	80032e6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT, EN_PIN);
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2200      	movs	r2, #0
 80009c0:	2110      	movs	r1, #16
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 fc8f 	bl	80032e6 <HAL_GPIO_WritePin>
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	603a      	str	r2, [r7, #0]
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	1c02      	adds	r2, r0, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	1c0a      	adds	r2, r1, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		break;
	}
#endif

#ifdef LCD20xN // For LCD20x4
	switch (x)
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d023      	beq.n	8000a34 <lcd_puts+0x64>
 80009ec:	dc37      	bgt.n	8000a5e <lcd_puts+0x8e>
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d017      	beq.n	8000a22 <lcd_puts+0x52>
 80009f2:	dc34      	bgt.n	8000a5e <lcd_puts+0x8e>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d002      	beq.n	80009fe <lcd_puts+0x2e>
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d009      	beq.n	8000a10 <lcd_puts+0x40>
 80009fc:	e023      	b.n	8000a46 <lcd_puts+0x76>
	{

	case 0: // Row 0
		lcd_write(0, 0x80 + 0x00 + y);
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3b80      	subs	r3, #128	; 0x80
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	0019      	movs	r1, r3
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff ff02 	bl	8000812 <lcd_write>
		break;
 8000a0e:	e01a      	b.n	8000a46 <lcd_puts+0x76>
	case 1: // Row 1
		lcd_write(0, 0x80 + 0x40 + y);
 8000a10:	1dbb      	adds	r3, r7, #6
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3b40      	subs	r3, #64	; 0x40
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	0019      	movs	r1, r3
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fef9 	bl	8000812 <lcd_write>
		break;
 8000a20:	e011      	b.n	8000a46 <lcd_puts+0x76>
	case 2: // Row 2
		lcd_write(0, 0x80 + 0x14 + y);
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	3b6c      	subs	r3, #108	; 0x6c
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fef0 	bl	8000812 <lcd_write>
		break;
 8000a32:	e008      	b.n	8000a46 <lcd_puts+0x76>
	case 3: // Row 3
		lcd_write(0, 0x80 + 0x54 + y);
 8000a34:	1dbb      	adds	r3, r7, #6
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3b2c      	subs	r3, #44	; 0x2c
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fee7 	bl	8000812 <lcd_write>
		break;
 8000a44:	46c0      	nop			; (mov r8, r8)
	}
#endif

	while (*string)
 8000a46:	e00a      	b.n	8000a5e <lcd_puts+0x8e>
	{
		lcd_write(1, *string);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	0019      	movs	r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fedd 	bl	8000812 <lcd_write>
		string++;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	603b      	str	r3, [r7, #0]
	while (*string)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1ef      	bne.n	8000a48 <lcd_puts+0x78>
	}
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <clr_data>:

void clr_data(uint8_t pos)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]

	switch (pos)
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b0a      	cmp	r3, #10
 8000a86:	d900      	bls.n	8000a8a <clr_data+0x16>
 8000a88:	e0c8      	b.n	8000c1c <clr_data+0x1a8>
 8000a8a:	009a      	lsls	r2, r3, #2
 8000a8c:	4b65      	ldr	r3, [pc, #404]	; (8000c24 <clr_data+0x1b0>)
 8000a8e:	18d3      	adds	r3, r2, r3
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	469f      	mov	pc, r3
	{
	case _intensity:
		lcd_puts(1, 7, (int8_t *)"  ");
 8000a94:	4b64      	ldr	r3, [pc, #400]	; (8000c28 <clr_data+0x1b4>)
 8000a96:	001a      	movs	r2, r3
 8000a98:	2107      	movs	r1, #7
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff ff98 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 8, (int8_t *)"  ");
 8000aa0:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <clr_data+0x1b4>)
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff92 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 9, (int8_t *)"  ");
 8000aac:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <clr_data+0x1b4>)
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2109      	movs	r1, #9
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff ff8c 	bl	80009d0 <lcd_puts>
		break;
 8000ab8:	e0b0      	b.n	8000c1c <clr_data+0x1a8>
	case _color:
		lcd_puts(2, 7, (int8_t *)"  ");
 8000aba:	4b5b      	ldr	r3, [pc, #364]	; (8000c28 <clr_data+0x1b4>)
 8000abc:	001a      	movs	r2, r3
 8000abe:	2107      	movs	r1, #7
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f7ff ff85 	bl	80009d0 <lcd_puts>
		break;
 8000ac6:	e0a9      	b.n	8000c1c <clr_data+0x1a8>
	case _sensor:
		lcd_puts(3, 7, (int8_t *)"  ");
 8000ac8:	4b57      	ldr	r3, [pc, #348]	; (8000c28 <clr_data+0x1b4>)
 8000aca:	001a      	movs	r2, r3
 8000acc:	2107      	movs	r1, #7
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f7ff ff7e 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 8, (int8_t *)"  ");
 8000ad4:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <clr_data+0x1b4>)
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2108      	movs	r1, #8
 8000ada:	2003      	movs	r0, #3
 8000adc:	f7ff ff78 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 9, (int8_t *)"  ");
 8000ae0:	4b51      	ldr	r3, [pc, #324]	; (8000c28 <clr_data+0x1b4>)
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	2109      	movs	r1, #9
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f7ff ff72 	bl	80009d0 <lcd_puts>
		break;
 8000aec:	e096      	b.n	8000c1c <clr_data+0x1a8>

	case _lamp:
		lcd_puts(1, 17, (int8_t *)"  ");
 8000aee:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <clr_data+0x1b4>)
 8000af0:	001a      	movs	r2, r3
 8000af2:	2111      	movs	r1, #17
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff6b 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 18, (int8_t *)"  ");
 8000afa:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <clr_data+0x1b4>)
 8000afc:	001a      	movs	r2, r3
 8000afe:	2112      	movs	r1, #18
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ff65 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 19, (int8_t *)"  ");
 8000b06:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <clr_data+0x1b4>)
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2113      	movs	r1, #19
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff ff5f 	bl	80009d0 <lcd_puts>
		break;
 8000b12:	e083      	b.n	8000c1c <clr_data+0x1a8>
	case _endo:
		lcd_puts(2, 17, (int8_t *)"  ");
 8000b14:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <clr_data+0x1b4>)
 8000b16:	001a      	movs	r2, r3
 8000b18:	2111      	movs	r1, #17
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff ff58 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 18, (int8_t *)"  ");
 8000b20:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <clr_data+0x1b4>)
 8000b22:	001a      	movs	r2, r3
 8000b24:	2112      	movs	r1, #18
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff ff52 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 19, (int8_t *)"  ");
 8000b2c:	4b3e      	ldr	r3, [pc, #248]	; (8000c28 <clr_data+0x1b4>)
 8000b2e:	001a      	movs	r2, r3
 8000b30:	2113      	movs	r1, #19
 8000b32:	2002      	movs	r0, #2
 8000b34:	f7ff ff4c 	bl	80009d0 <lcd_puts>
		break;
 8000b38:	e070      	b.n	8000c1c <clr_data+0x1a8>
	case _depth:
		lcd_puts(3, 17, (int8_t *)" ");
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <clr_data+0x1b8>)
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2111      	movs	r1, #17
 8000b40:	2003      	movs	r0, #3
 8000b42:	f7ff ff45 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 18, (int8_t *)" ");
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <clr_data+0x1b8>)
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2112      	movs	r1, #18
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f7ff ff3f 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 19, (int8_t *)" ");
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <clr_data+0x1b8>)
 8000b54:	001a      	movs	r2, r3
 8000b56:	2113      	movs	r1, #19
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff ff39 	bl	80009d0 <lcd_puts>
		break;
 8000b5e:	e05d      	b.n	8000c1c <clr_data+0x1a8>

	case _focus:
		lcd_puts(0, 10, (int8_t *)" ");
 8000b60:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <clr_data+0x1b8>)
 8000b62:	001a      	movs	r2, r3
 8000b64:	210a      	movs	r1, #10
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ff32 	bl	80009d0 <lcd_puts>
		lcd_puts(0, 11, (int8_t *)" ");
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <clr_data+0x1b8>)
 8000b6e:	001a      	movs	r2, r3
 8000b70:	210b      	movs	r1, #11
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ff2c 	bl	80009d0 <lcd_puts>
		lcd_puts(0, 12, (int8_t *)" ");
 8000b78:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <clr_data+0x1b8>)
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	210c      	movs	r1, #12
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff ff26 	bl	80009d0 <lcd_puts>
		lcd_puts(0, 13, (int8_t *)" ");
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <clr_data+0x1b8>)
 8000b86:	001a      	movs	r2, r3
 8000b88:	210d      	movs	r1, #13
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff ff20 	bl	80009d0 <lcd_puts>
		lcd_puts(0, 14, (int8_t *)" ");
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <clr_data+0x1b8>)
 8000b92:	001a      	movs	r2, r3
 8000b94:	210e      	movs	r1, #14
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ff1a 	bl	80009d0 <lcd_puts>
		lcd_puts(0, 15, (int8_t *)" ");
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <clr_data+0x1b8>)
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff14 	bl	80009d0 <lcd_puts>
		break;
 8000ba8:	e038      	b.n	8000c1c <clr_data+0x1a8>


	case _small:
		lcd_puts(1, 10, (int8_t *)" ");
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <clr_data+0x1b8>)
 8000bac:	001a      	movs	r2, r3
 8000bae:	210a      	movs	r1, #10
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff ff0d 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 10, (int8_t *)" ");
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <clr_data+0x1b8>)
 8000bb8:	001a      	movs	r2, r3
 8000bba:	210a      	movs	r1, #10
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff ff07 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 10, (int8_t *)" ");
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <clr_data+0x1b8>)
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	210a      	movs	r1, #10
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff ff01 	bl	80009d0 <lcd_puts>
		break;
 8000bce:	e025      	b.n	8000c1c <clr_data+0x1a8>



	case _medium:
		lcd_puts(2, 10, (int8_t *)" ");
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <clr_data+0x1b8>)
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	210a      	movs	r1, #10
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff fefa 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 10, (int8_t *)" ");
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <clr_data+0x1b8>)
 8000bde:	001a      	movs	r2, r3
 8000be0:	210a      	movs	r1, #10
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fef4 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 10, (int8_t *)" ");
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <clr_data+0x1b8>)
 8000bea:	001a      	movs	r2, r3
 8000bec:	210a      	movs	r1, #10
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f7ff feee 	bl	80009d0 <lcd_puts>
		break;
 8000bf4:	e012      	b.n	8000c1c <clr_data+0x1a8>


	case _wide:
		lcd_puts(3, 10, (int8_t *)" ");
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <clr_data+0x1b8>)
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f7ff fee7 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 10, (int8_t *)" ");
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <clr_data+0x1b8>)
 8000c04:	001a      	movs	r2, r3
 8000c06:	210a      	movs	r1, #10
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f7ff fee1 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 10, (int8_t *)" ");
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <clr_data+0x1b8>)
 8000c10:	001a      	movs	r2, r3
 8000c12:	210a      	movs	r1, #10
 8000c14:	2003      	movs	r0, #3
 8000c16:	f7ff fedb 	bl	80009d0 <lcd_puts>
		break;
 8000c1a:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08006398 	.word	0x08006398
 8000c28:	08006228 	.word	0x08006228
 8000c2c:	0800622c 	.word	0x0800622c

08000c30 <clr_select>:
void clr_select()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	lcd_puts(1, 0, (int8_t *)" ");
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <clr_select+0x54>)
 8000c36:	001a      	movs	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fec8 	bl	80009d0 <lcd_puts>
	lcd_puts(2, 0, (int8_t *)" ");
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <clr_select+0x54>)
 8000c42:	001a      	movs	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff fec2 	bl	80009d0 <lcd_puts>
	lcd_puts(3, 0, (int8_t *)" ");
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <clr_select+0x54>)
 8000c4e:	001a      	movs	r2, r3
 8000c50:	2100      	movs	r1, #0
 8000c52:	2003      	movs	r0, #3
 8000c54:	f7ff febc 	bl	80009d0 <lcd_puts>
	lcd_puts(1, 10, (int8_t *)" ");
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <clr_select+0x54>)
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	210a      	movs	r1, #10
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff feb6 	bl	80009d0 <lcd_puts>
	lcd_puts(2, 10, (int8_t *)" ");
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <clr_select+0x54>)
 8000c66:	001a      	movs	r2, r3
 8000c68:	210a      	movs	r1, #10
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f7ff feb0 	bl	80009d0 <lcd_puts>
	lcd_puts(3, 10, (int8_t *)" ");
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <clr_select+0x54>)
 8000c72:	001a      	movs	r2, r3
 8000c74:	210a      	movs	r1, #10
 8000c76:	2003      	movs	r0, #3
 8000c78:	f7ff feaa 	bl	80009d0 <lcd_puts>
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	0800622c 	.word	0x0800622c

08000c88 <lcd_clear>:
void lcd_clear(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	lcd_write(0, 0x01);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fdbf 	bl	8000812 <lcd_write>
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <clock_page>:
	current = current % 60;
	run_time->seconds = current;
}

void clock_page(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ca0:	f7ff fff2 	bl	8000c88 <lcd_clear>
	lcd_puts(0, 1, (int8_t *)"OTL Total Run Time");
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <clock_page+0x40>)
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2101      	movs	r1, #1
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fe90 	bl	80009d0 <lcd_puts>
	lcd_puts(1, 3, (int8_t *)"Hours");
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <clock_page+0x44>)
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fe8a 	bl	80009d0 <lcd_puts>
	lcd_puts(2, 3, (int8_t *)"Minutes");
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <clock_page+0x48>)
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff fe84 	bl	80009d0 <lcd_puts>
	lcd_puts(3, 3, (int8_t *)"Seconds");
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <clock_page+0x4c>)
 8000cca:	001a      	movs	r2, r3
 8000ccc:	2103      	movs	r1, #3
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f7ff fe7e 	bl	80009d0 <lcd_puts>
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	0800628c 	.word	0x0800628c
 8000ce0:	080062a0 	.word	0x080062a0
 8000ce4:	080062a8 	.word	0x080062a8
 8000ce8:	080062b0 	.word	0x080062b0

08000cec <Total_Time_Print>:

void Total_Time_Print(uint32_t total)
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	char buffer[3];
	uint32_t current = total;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	617b      	str	r3, [r7, #20]
	uint8_t h = current / (60 * 60);
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	22e1      	movs	r2, #225	; 0xe1
 8000cfc:	0111      	lsls	r1, r2, #4
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fa0c 	bl	800011c <__udivsi3>
 8000d04:	0003      	movs	r3, r0
 8000d06:	001a      	movs	r2, r3
 8000d08:	2413      	movs	r4, #19
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	701a      	strb	r2, [r3, #0]
	current = current % 3600;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	22e1      	movs	r2, #225	; 0xe1
 8000d12:	0111      	lsls	r1, r2, #4
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff fa87 	bl	8000228 <__aeabi_uidivmod>
 8000d1a:	000b      	movs	r3, r1
 8000d1c:	617b      	str	r3, [r7, #20]
	uint8_t m = current / 60;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	213c      	movs	r1, #60	; 0x3c
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff f9fa 	bl	800011c <__udivsi3>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	2512      	movs	r5, #18
 8000d2e:	197b      	adds	r3, r7, r5
 8000d30:	701a      	strb	r2, [r3, #0]
	current = current % 60;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	213c      	movs	r1, #60	; 0x3c
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fa76 	bl	8000228 <__aeabi_uidivmod>
 8000d3c:	000b      	movs	r3, r1
 8000d3e:	617b      	str	r3, [r7, #20]
	uint8_t s = current;
 8000d40:	2611      	movs	r6, #17
 8000d42:	19bb      	adds	r3, r7, r6
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	701a      	strb	r2, [r3, #0]
	//		current = current %60;
	//		run_time->seconds = current;

	// clock_page();

	sprintf(buffer, "%02d", h); // run_time->hour
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	4914      	ldr	r1, [pc, #80]	; (8000da0 <Total_Time_Print+0xb4>)
 8000d4e:	240c      	movs	r4, #12
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	f004 fdb6 	bl	80058c4 <siprintf>
	lcd_puts(1, 0, (int8_t *)buffer);
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fe36 	bl	80009d0 <lcd_puts>
	sprintf(buffer, "%02d", m);
 8000d64:	197b      	adds	r3, r7, r5
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	490d      	ldr	r1, [pc, #52]	; (8000da0 <Total_Time_Print+0xb4>)
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f004 fda9 	bl	80058c4 <siprintf>
	lcd_puts(2, 0, (int8_t *)buffer);
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f7ff fe29 	bl	80009d0 <lcd_puts>
	sprintf(buffer, "%02d", s);
 8000d7e:	19bb      	adds	r3, r7, r6
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	4907      	ldr	r1, [pc, #28]	; (8000da0 <Total_Time_Print+0xb4>)
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	f004 fd9c 	bl	80058c4 <siprintf>
	lcd_puts(3, 0, (int8_t *)buffer);
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff fe1c 	bl	80009d0 <lcd_puts>
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b007      	add	sp, #28
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	08006250 	.word	0x08006250

08000da4 <home_page>:

void home_page()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	lcd_clear();
 8000da8:	f7ff ff6e 	bl	8000c88 <lcd_clear>
	lcd_puts(0, 3, (int8_t *)"COGNATE INDIA");
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <home_page+0x34>)
 8000dae:	001a      	movs	r2, r3
 8000db0:	2103      	movs	r1, #3
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fe0c 	bl	80009d0 <lcd_puts>
	// lcd_puts(1, 3,(int8_t*) "Hours");
	lcd_puts(2, 3, (int8_t *)"VISION SERIES");
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <home_page+0x38>)
 8000dba:	001a      	movs	r2, r3
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fe06 	bl	80009d0 <lcd_puts>
	lcd_puts(3, 5, (int8_t *)"LED LIGHT");
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <home_page+0x3c>)
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f7ff fe00 	bl	80009d0 <lcd_puts>
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	080062b8 	.word	0x080062b8
 8000ddc:	080062c8 	.word	0x080062c8
 8000de0:	080062d8 	.word	0x080062d8

08000de4 <HAL_TIM_PeriodElapsedCallback>:
// 		tt_cnt++;
// 	}
// }

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	if (htim == &htim6)
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d104      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		tt_cnt++;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]

	/* NOTE : This function should not be modified, when the callback is needed,
			  the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	 */

	if (htim == &htim14)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d10f      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin) == GPIO_PIN_RESET)
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	0010      	movs	r0, r2
 8000e10:	f002 fa4c 	bl	80032ac <HAL_GPIO_ReadPin>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d106      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x42>
		{

			but_state = true;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim14);
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e20:	0018      	movs	r0, r3
 8000e22:	f003 feeb 	bl	8004bfc <HAL_TIM_Base_Stop_IT>
		}
	}
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000108 	.word	0x20000108
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	20000150 	.word	0x20000150
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	20000220 	.word	0x20000220

08000e44 <update_key_press>:
	sprintf(buffer, "%02d", _data);
	lcd_puts(3, 2, buffer); // x = 2, y = 3
}

uint8_t update_key_press()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	if (key_pressed.prv)
 8000e48:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <update_key_press+0x128>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	07db      	lsls	r3, r3, #31
 8000e4e:	0fdb      	lsrs	r3, r3, #31
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <update_key_press+0x2a>
	{
		current_pos.key_number = _prv;
 8000e56:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <update_key_press+0x12c>)
 8000e58:	785a      	ldrb	r2, [r3, #1]
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	438a      	bics	r2, r1
 8000e5e:	705a      	strb	r2, [r3, #1]
		key_pressed.prv = 0;
 8000e60:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <update_key_press+0x128>)
 8000e62:	7813      	ldrb	r3, [r2, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	438b      	bics	r3, r1
 8000e68:	7013      	strb	r3, [r2, #0]
		return _prv;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e07b      	b.n	8000f66 <update_key_press+0x122>
	}
	else if (key_pressed.nxt)
 8000e6e:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <update_key_press+0x128>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	079b      	lsls	r3, r3, #30
 8000e74:	0fdb      	lsrs	r3, r3, #31
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00e      	beq.n	8000e9a <update_key_press+0x56>
	{
		key_pressed.nxt = 0;
 8000e7c:	4a3b      	ldr	r2, [pc, #236]	; (8000f6c <update_key_press+0x128>)
 8000e7e:	7813      	ldrb	r3, [r2, #0]
 8000e80:	2102      	movs	r1, #2
 8000e82:	438b      	bics	r3, r1
 8000e84:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _nxt;
 8000e86:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <update_key_press+0x12c>)
 8000e88:	785a      	ldrb	r2, [r3, #1]
 8000e8a:	2107      	movs	r1, #7
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	1c11      	adds	r1, r2, #0
 8000e90:	2201      	movs	r2, #1
 8000e92:	430a      	orrs	r2, r1
 8000e94:	705a      	strb	r2, [r3, #1]

		return _nxt;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e065      	b.n	8000f66 <update_key_press+0x122>
	}
	else if (key_pressed.depth)
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <update_key_press+0x128>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	075b      	lsls	r3, r3, #29
 8000ea0:	0fdb      	lsrs	r3, r3, #31
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d02b      	beq.n	8000f00 <update_key_press+0xbc>
		// 		else
		// 			lcd_puts(3, 17, (int8_t *)"OFF");

		// 		return _depth;

		key_pressed.depth = 0;
 8000ea8:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <update_key_press+0x128>)
 8000eaa:	7813      	ldrb	r3, [r2, #0]
 8000eac:	2104      	movs	r1, #4
 8000eae:	438b      	bics	r3, r1
 8000eb0:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _depth;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <update_key_press+0x12c>)
 8000eb4:	785a      	ldrb	r2, [r3, #1]
 8000eb6:	2107      	movs	r1, #7
 8000eb8:	438a      	bics	r2, r1
 8000eba:	1c11      	adds	r1, r2, #0
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	705a      	strb	r2, [r3, #1]
		// data_reg.endo = !data_reg.endo;
		clr_data(endo);
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f7ff fdd6 	bl	8000a74 <clr_data>
		clr_select();
 8000ec8:	f7ff feb2 	bl	8000c30 <clr_select>
		//		lcd_puts(3, 10, (int8_t *)">");
		if (pg2_fc == 0)
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <update_key_press+0x130>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d113      	bne.n	8000efc <update_key_press+0xb8>
		{
			if (data_reg.endo)
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <update_key_press+0x134>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	4013      	ands	r3, r2
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <update_key_press+0xac>
				lcd_puts(2, 17, (int8_t *)"ON");
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <update_key_press+0x138>)
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2111      	movs	r1, #17
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f7ff fd71 	bl	80009d0 <lcd_puts>
 8000eee:	e005      	b.n	8000efc <update_key_press+0xb8>
			else
				lcd_puts(2, 17, (int8_t *)"OFF");
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <update_key_press+0x13c>)
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	2111      	movs	r1, #17
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff fd6a 	bl	80009d0 <lcd_puts>
		}

		return _depth;
 8000efc:	2302      	movs	r3, #2
 8000efe:	e032      	b.n	8000f66 <update_key_press+0x122>
	}
	else if (key_pressed.pos)
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <update_key_press+0x128>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	071b      	lsls	r3, r3, #28
 8000f06:	0fdb      	lsrs	r3, r3, #31
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d011      	beq.n	8000f32 <update_key_press+0xee>
	{
		key_pressed.pos = 0;
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <update_key_press+0x128>)
 8000f10:	7813      	ldrb	r3, [r2, #0]
 8000f12:	2108      	movs	r1, #8
 8000f14:	438b      	bics	r3, r1
 8000f16:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _pos;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <update_key_press+0x12c>)
 8000f1a:	785a      	ldrb	r2, [r3, #1]
 8000f1c:	2107      	movs	r1, #7
 8000f1e:	438a      	bics	r2, r1
 8000f20:	1c11      	adds	r1, r2, #0
 8000f22:	2204      	movs	r2, #4
 8000f24:	430a      	orrs	r2, r1
 8000f26:	705a      	strb	r2, [r3, #1]
		last_ps = _pos;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <update_key_press+0x140>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	701a      	strb	r2, [r3, #0]
		return _pos;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e019      	b.n	8000f66 <update_key_press+0x122>
	}
	else if (key_pressed.neg)
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <update_key_press+0x128>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	06db      	lsls	r3, r3, #27
 8000f38:	0fdb      	lsrs	r3, r3, #31
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d011      	beq.n	8000f64 <update_key_press+0x120>
	{
		key_pressed.neg = 0;
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <update_key_press+0x128>)
 8000f42:	7813      	ldrb	r3, [r2, #0]
 8000f44:	2110      	movs	r1, #16
 8000f46:	438b      	bics	r3, r1
 8000f48:	7013      	strb	r3, [r2, #0]
		current_pos.key_number = _neg;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <update_key_press+0x12c>)
 8000f4c:	785a      	ldrb	r2, [r3, #1]
 8000f4e:	2107      	movs	r1, #7
 8000f50:	438a      	bics	r2, r1
 8000f52:	1c11      	adds	r1, r2, #0
 8000f54:	2203      	movs	r2, #3
 8000f56:	430a      	orrs	r2, r1
 8000f58:	705a      	strb	r2, [r3, #1]
		last_ps = _neg;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <update_key_press+0x140>)
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	701a      	strb	r2, [r3, #0]
		return _neg;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e000      	b.n	8000f66 <update_key_press+0x122>
	}

	return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000ac 	.word	0x200000ac
 8000f70:	20000004 	.word	0x20000004
 8000f74:	2000009f 	.word	0x2000009f
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	080062ec 	.word	0x080062ec
 8000f80:	080062f0 	.word	0x080062f0
 8000f84:	200000a8 	.word	0x200000a8

08000f88 <set_data_positive>:
//	current_pos.position_cursor =  sensor;
//	data_reg.sensor = !data_reg.sensor;
//
// }
void set_data_positive()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	if (pg2_fc == 0)
 8000f8c:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <set_data_positive+0x160>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d16a      	bne.n	800106a <set_data_positive+0xe2>
	{
		switch (current_pos.position_cursor)
 8000f94:	4b55      	ldr	r3, [pc, #340]	; (80010ec <set_data_positive+0x164>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	d900      	bls.n	8000fa0 <set_data_positive+0x18>
 8000f9e:	e0a0      	b.n	80010e2 <set_data_positive+0x15a>
 8000fa0:	009a      	lsls	r2, r3, #2
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <set_data_positive+0x168>)
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	469f      	mov	pc, r3
		{
		case intensity:
			if (!data_reg.depth)
 8000faa:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <set_data_positive+0x16c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	227f      	movs	r2, #127	; 0x7f
 8000fb0:	4393      	bics	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d125      	bne.n	8001004 <set_data_positive+0x7c>
			{
				data_reg.intensity++;
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <set_data_positive+0x16c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	071b      	lsls	r3, r3, #28
 8000fbe:	0f1b      	lsrs	r3, r3, #28
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	1c1a      	adds	r2, r3, #0
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	4013      	ands	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <set_data_positive+0x16c>)
 8000fce:	210f      	movs	r1, #15
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	0010      	movs	r0, r2
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	438a      	bics	r2, r1
 8000fda:	1c11      	adds	r1, r2, #0
 8000fdc:	1c02      	adds	r2, r0, #0
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
				if (data_reg.intensity >= 10)
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <set_data_positive+0x16c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	071b      	lsls	r3, r3, #28
 8000fe8:	0f1b      	lsrs	r3, r3, #28
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d800      	bhi.n	8000ff2 <set_data_positive+0x6a>
 8000ff0:	e074      	b.n	80010dc <set_data_positive+0x154>
				{
					data_reg.intensity = 10;
 8000ff2:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <set_data_positive+0x16c>)
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	1c11      	adds	r1, r2, #0
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	430a      	orrs	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
			{
				//				data_reg.intensity = 10;
				depth_press = 1;
			}

			break;
 8001002:	e06b      	b.n	80010dc <set_data_positive+0x154>
				depth_press = 1;
 8001004:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <set_data_positive+0x170>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
			break;
 800100a:	e067      	b.n	80010dc <set_data_positive+0x154>
		case color:
			// if (!data_reg.depth)
			// {
			data_reg.color++;
 800100c:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <set_data_positive+0x16c>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	b25a      	sxtb	r2, r3
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <set_data_positive+0x16c>)
 800101c:	705a      	strb	r2, [r3, #1]
			if (data_reg.color > 1)
 800101e:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <set_data_positive+0x16c>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	dd5b      	ble.n	80010e0 <set_data_positive+0x158>
			{
				data_reg.color = 1;
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <set_data_positive+0x16c>)
 800102a:	2201      	movs	r2, #1
 800102c:	705a      	strb	r2, [r3, #1]
			}
			// }

			break;
 800102e:	e057      	b.n	80010e0 <set_data_positive+0x158>
		case sensor:
			data_reg.sensor = on;
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <set_data_positive+0x16c>)
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	2110      	movs	r1, #16
 8001036:	430a      	orrs	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
			break;
 800103a:	e052      	b.n	80010e2 <set_data_positive+0x15a>
		case lamp:
			data_reg.lamp = on;
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <set_data_positive+0x16c>)
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	2120      	movs	r1, #32
 8001042:	430a      	orrs	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
			break;
 8001046:	e04c      	b.n	80010e2 <set_data_positive+0x15a>
		case endo:
			data_reg.endo = on;
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <set_data_positive+0x16c>)
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	430a      	orrs	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
			break;
 8001052:	e046      	b.n	80010e2 <set_data_positive+0x15a>
		case depth:
			data_reg.depth = on;
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <set_data_positive+0x16c>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	4249      	negs	r1, r1
 800105c:	430a      	orrs	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
			//			last_inten = data_reg.intensity;
			break;
 8001060:	e03f      	b.n	80010e2 <set_data_positive+0x15a>
		case 7:
			pg2_fc = on;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <set_data_positive+0x160>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
			break;
 8001068:	e03b      	b.n	80010e2 <set_data_positive+0x15a>
		}
	}

	else
	{
		switch (current_pos.position_cursor)
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <set_data_positive+0x164>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	2b07      	cmp	r3, #7
 8001072:	d008      	beq.n	8001086 <set_data_positive+0xfe>
 8001074:	dc35      	bgt.n	80010e2 <set_data_positive+0x15a>
 8001076:	2b03      	cmp	r3, #3
 8001078:	d026      	beq.n	80010c8 <set_data_positive+0x140>
 800107a:	dc32      	bgt.n	80010e2 <set_data_positive+0x15a>
 800107c:	2b01      	cmp	r3, #1
 800107e:	d00f      	beq.n	80010a0 <set_data_positive+0x118>
 8001080:	2b02      	cmp	r3, #2
 8001082:	d017      	beq.n	80010b4 <set_data_positive+0x12c>
			pg3_md = off;
			pg3_wd = on;
			break;
		}
	}
}
 8001084:	e02d      	b.n	80010e2 <set_data_positive+0x15a>
			pg2_fc = on;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <set_data_positive+0x160>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
			pg3_sm = off;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <set_data_positive+0x174>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			pg3_md = off;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <set_data_positive+0x178>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			pg3_wd = off;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <set_data_positive+0x17c>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
			break;
 800109e:	e020      	b.n	80010e2 <set_data_positive+0x15a>
			pg3_sm = on;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <set_data_positive+0x174>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
			pg3_md = off;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <set_data_positive+0x178>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
			pg3_wd = off;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <set_data_positive+0x17c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
			break;
 80010b2:	e016      	b.n	80010e2 <set_data_positive+0x15a>
			pg3_sm = off;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <set_data_positive+0x174>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
			pg3_md = on;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <set_data_positive+0x178>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
			pg3_wd = off;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <set_data_positive+0x17c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
			break;
 80010c6:	e00c      	b.n	80010e2 <set_data_positive+0x15a>
			pg3_sm = off;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <set_data_positive+0x174>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
			pg3_md = off;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <set_data_positive+0x178>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
			pg3_wd = on;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <set_data_positive+0x17c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
			break;
 80010da:	e002      	b.n	80010e2 <set_data_positive+0x15a>
			break;
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	e000      	b.n	80010e2 <set_data_positive+0x15a>
			break;
 80010e0:	46c0      	nop			; (mov r8, r8)
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000009f 	.word	0x2000009f
 80010ec:	20000004 	.word	0x20000004
 80010f0:	080063c4 	.word	0x080063c4
 80010f4:	20000008 	.word	0x20000008
 80010f8:	2000009c 	.word	0x2000009c
 80010fc:	200000a0 	.word	0x200000a0
 8001100:	200000a1 	.word	0x200000a1
 8001104:	200000a2 	.word	0x200000a2

08001108 <set_data_negative>:

void set_data_negative()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	if (pg2_fc == 0)
 800110c:	4b51      	ldr	r3, [pc, #324]	; (8001254 <set_data_negative+0x14c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d000      	beq.n	8001116 <set_data_negative+0xe>
 8001114:	e079      	b.n	800120a <set_data_negative+0x102>
	{

		switch (current_pos.position_cursor)
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <set_data_negative+0x150>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b25b      	sxtb	r3, r3
 800111c:	2b07      	cmp	r3, #7
 800111e:	d900      	bls.n	8001122 <set_data_negative+0x1a>
 8001120:	e094      	b.n	800124c <set_data_negative+0x144>
 8001122:	009a      	lsls	r2, r3, #2
 8001124:	4b4d      	ldr	r3, [pc, #308]	; (800125c <set_data_negative+0x154>)
 8001126:	18d3      	adds	r3, r2, r3
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	469f      	mov	pc, r3
		{
		case intensity:
			if (!data_reg.depth)
 800112c:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <set_data_negative+0x158>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	227f      	movs	r2, #127	; 0x7f
 8001132:	4393      	bics	r3, r2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d125      	bne.n	8001186 <set_data_negative+0x7e>
			{
				data_reg.intensity--;
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <set_data_negative+0x158>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	071b      	lsls	r3, r3, #28
 8001140:	0f1b      	lsrs	r3, r3, #28
 8001142:	b2db      	uxtb	r3, r3
 8001144:	330f      	adds	r3, #15
 8001146:	1c1a      	adds	r2, r3, #0
 8001148:	230f      	movs	r3, #15
 800114a:	4013      	ands	r3, r2
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <set_data_negative+0x158>)
 8001150:	210f      	movs	r1, #15
 8001152:	400a      	ands	r2, r1
 8001154:	0010      	movs	r0, r2
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	210f      	movs	r1, #15
 800115a:	438a      	bics	r2, r1
 800115c:	1c11      	adds	r1, r2, #0
 800115e:	1c02      	adds	r2, r0, #0
 8001160:	430a      	orrs	r2, r1
 8001162:	701a      	strb	r2, [r3, #0]
				if (data_reg.intensity <= 1)
 8001164:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <set_data_negative+0x158>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	071b      	lsls	r3, r3, #28
 800116a:	0f1b      	lsrs	r3, r3, #28
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b01      	cmp	r3, #1
 8001170:	d900      	bls.n	8001174 <set_data_negative+0x6c>
 8001172:	e068      	b.n	8001246 <set_data_negative+0x13e>
				{
					data_reg.intensity = 1;
 8001174:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <set_data_negative+0x158>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	210f      	movs	r1, #15
 800117a:	438a      	bics	r2, r1
 800117c:	1c11      	adds	r1, r2, #0
 800117e:	2201      	movs	r2, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				depth_press = 1;
			}
			break;
 8001184:	e05f      	b.n	8001246 <set_data_negative+0x13e>
				depth_press = 1;
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <set_data_negative+0x15c>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
			break;
 800118c:	e05b      	b.n	8001246 <set_data_negative+0x13e>
		case color:
			// if (!data_reg.depth)
			// {
			data_reg.color--;
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <set_data_negative+0x158>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	b25b      	sxtb	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3b01      	subs	r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	b25a      	sxtb	r2, r3
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <set_data_negative+0x158>)
 800119e:	705a      	strb	r2, [r3, #1]
			if (data_reg.color < -1)
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <set_data_negative+0x158>)
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	da4f      	bge.n	800124a <set_data_negative+0x142>
			{
				data_reg.color = -1;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <set_data_negative+0x158>)
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	705a      	strb	r2, [r3, #1]
			}
			// }
			break;
 80011b0:	e04b      	b.n	800124a <set_data_negative+0x142>
		case sensor:
			data_reg.sensor = off;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <set_data_negative+0x158>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	2110      	movs	r1, #16
 80011b8:	438a      	bics	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
			break;
 80011bc:	e046      	b.n	800124c <set_data_negative+0x144>
		case lamp:
			data_reg.lamp = off;
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <set_data_negative+0x158>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	2120      	movs	r1, #32
 80011c4:	438a      	bics	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
			break;
 80011c8:	e040      	b.n	800124c <set_data_negative+0x144>
		case endo:
			data_reg.endo = off;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <set_data_negative+0x158>)
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	438a      	bics	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
			data_reg.intensity = data_reg.intensity;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <set_data_negative+0x158>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	071b      	lsls	r3, r3, #28
 80011da:	0f1b      	lsrs	r3, r3, #28
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <set_data_negative+0x158>)
 80011e0:	210f      	movs	r1, #15
 80011e2:	400a      	ands	r2, r1
 80011e4:	0010      	movs	r0, r2
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	210f      	movs	r1, #15
 80011ea:	438a      	bics	r2, r1
 80011ec:	1c11      	adds	r1, r2, #0
 80011ee:	1c02      	adds	r2, r0, #0
 80011f0:	430a      	orrs	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
			break;
 80011f4:	e02a      	b.n	800124c <set_data_negative+0x144>
		case depth:
			data_reg.depth = off;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <set_data_negative+0x158>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	217f      	movs	r1, #127	; 0x7f
 80011fc:	400a      	ands	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]
			break;
 8001200:	e024      	b.n	800124c <set_data_negative+0x144>
		case 7:
			pg2_fc = off;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <set_data_negative+0x14c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
			break;
 8001208:	e020      	b.n	800124c <set_data_negative+0x144>
		}
	}

	else
	{
		switch (current_pos.position_cursor)
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <set_data_negative+0x150>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b25b      	sxtb	r3, r3
 8001210:	2b07      	cmp	r3, #7
 8001212:	d008      	beq.n	8001226 <set_data_negative+0x11e>
 8001214:	dc1a      	bgt.n	800124c <set_data_negative+0x144>
 8001216:	2b03      	cmp	r3, #3
 8001218:	d011      	beq.n	800123e <set_data_negative+0x136>
 800121a:	dc17      	bgt.n	800124c <set_data_negative+0x144>
 800121c:	2b01      	cmp	r3, #1
 800121e:	d006      	beq.n	800122e <set_data_negative+0x126>
 8001220:	2b02      	cmp	r3, #2
 8001222:	d008      	beq.n	8001236 <set_data_negative+0x12e>
		case 3:
			pg3_wd = off;
			break;
		}
	}
}
 8001224:	e012      	b.n	800124c <set_data_negative+0x144>
			pg2_fc = off;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <set_data_negative+0x14c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
			break;
 800122c:	e00e      	b.n	800124c <set_data_negative+0x144>
			pg3_sm = off;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <set_data_negative+0x160>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
			break;
 8001234:	e00a      	b.n	800124c <set_data_negative+0x144>
			pg3_md = off;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <set_data_negative+0x164>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
			break;
 800123c:	e006      	b.n	800124c <set_data_negative+0x144>
			pg3_wd = off;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <set_data_negative+0x168>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
			break;
 8001244:	e002      	b.n	800124c <set_data_negative+0x144>
			break;
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	e000      	b.n	800124c <set_data_negative+0x144>
			break;
 800124a:	46c0      	nop			; (mov r8, r8)
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	2000009f 	.word	0x2000009f
 8001258:	20000004 	.word	0x20000004
 800125c:	080063e4 	.word	0x080063e4
 8001260:	20000008 	.word	0x20000008
 8001264:	2000009c 	.word	0x2000009c
 8001268:	200000a0 	.word	0x200000a0
 800126c:	200000a1 	.word	0x200000a1
 8001270:	200000a2 	.word	0x200000a2

08001274 <update_new_data>:

void update_new_data()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	switch (current_pos.key_number)
 8001278:	4b43      	ldr	r3, [pc, #268]	; (8001388 <update_new_data+0x114>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	075b      	lsls	r3, r3, #29
 800127e:	0f5b      	lsrs	r3, r3, #29
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b04      	cmp	r3, #4
 8001284:	d900      	bls.n	8001288 <update_new_data+0x14>
 8001286:	e07c      	b.n	8001382 <update_new_data+0x10e>
 8001288:	009a      	lsls	r2, r3, #2
 800128a:	4b40      	ldr	r3, [pc, #256]	; (800138c <update_new_data+0x118>)
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	469f      	mov	pc, r3
	{
	case _prv:
		current_pos.position_cursor--;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <update_new_data+0x114>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3b01      	subs	r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <update_new_data+0x114>)
 80012a2:	701a      	strb	r2, [r3, #0]
		if (!data_reg.sensor)
 80012a4:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <update_new_data+0x11c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2210      	movs	r2, #16
 80012aa:	4013      	ands	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <update_new_data+0x4e>
		{

			if (current_pos.position_cursor == 3)
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <update_new_data+0x114>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d102      	bne.n	80012c2 <update_new_data+0x4e>
			{
				current_pos.position_cursor = 2;
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <update_new_data+0x114>)
 80012be:	2202      	movs	r2, #2
 80012c0:	701a      	strb	r2, [r3, #0]
		// 	{
		// 		current_pos.position_cursor = 7;
		// 	}
		// }

		if (current_pos.position_cursor <= 0)
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <update_new_data+0x114>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dc57      	bgt.n	800137c <update_new_data+0x108>
		{
			//			lcd_clear();
			current_pos.position_cursor = 7;
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <update_new_data+0x114>)
 80012ce:	2207      	movs	r2, #7
 80012d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012d2:	e053      	b.n	800137c <update_new_data+0x108>
	case _nxt:
		current_pos.position_cursor++;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <update_new_data+0x114>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3301      	adds	r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	b25a      	sxtb	r2, r3
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <update_new_data+0x114>)
 80012e4:	701a      	strb	r2, [r3, #0]

		if (!data_reg.sensor)
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <update_new_data+0x11c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2210      	movs	r2, #16
 80012ec:	4013      	ands	r3, r2
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <update_new_data+0x98>
		{

			if (current_pos.position_cursor == 3 && (pg2_fc == 0))
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <update_new_data+0x114>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d106      	bne.n	800130c <update_new_data+0x98>
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <update_new_data+0x120>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <update_new_data+0x98>
			{
				current_pos.position_cursor = 4;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <update_new_data+0x114>)
 8001308:	2204      	movs	r2, #4
 800130a:	701a      	strb	r2, [r3, #0]
		//			{
		//				current_pos.position_cursor = 7;
		//			}
		//		}

		if (current_pos.position_cursor > 7)
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <update_new_data+0x114>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	2b07      	cmp	r3, #7
 8001314:	dd34      	ble.n	8001380 <update_new_data+0x10c>
		{

			current_pos.position_cursor = 1;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <update_new_data+0x114>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800131c:	e030      	b.n	8001380 <update_new_data+0x10c>
		// 			data_reg.intensity = 10;
		// 			depth_press = 1;
		// //			data_reg.depth = on;
		// 		}

		data_reg.endo = !data_reg.endo;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <update_new_data+0x11c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	4013      	ands	r3, r2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	425a      	negs	r2, r3
 800132a:	4153      	adcs	r3, r2
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <update_new_data+0x11c>)
 8001330:	2101      	movs	r1, #1
 8001332:	400a      	ands	r2, r1
 8001334:	0190      	lsls	r0, r2, #6
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	438a      	bics	r2, r1
 800133c:	1c11      	adds	r1, r2, #0
 800133e:	1c02      	adds	r2, r0, #0
 8001340:	430a      	orrs	r2, r1
 8001342:	701a      	strb	r2, [r3, #0]
		current_pos.position_cursor = endo;
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <update_new_data+0x114>)
 8001346:	2205      	movs	r2, #5
 8001348:	701a      	strb	r2, [r3, #0]
		if (data_reg.endo)
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <update_new_data+0x11c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	4013      	ands	r3, r2
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <update_new_data+0xf0>
		{

			// last_inten = data_reg.intensity;
			data_reg.endo = 1;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <update_new_data+0x11c>)
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	430a      	orrs	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
			// current_pos.position_cursor = endo;
			data_reg.endo = 0;
			// depth_press = 1;
			//			data_reg.depth = off;
		}
		break;
 8001362:	e00e      	b.n	8001382 <update_new_data+0x10e>
			data_reg.endo = 0;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <update_new_data+0x11c>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	438a      	bics	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
		break;
 800136e:	e008      	b.n	8001382 <update_new_data+0x10e>
	case _pos:
		set_data_positive();
 8001370:	f7ff fe0a 	bl	8000f88 <set_data_positive>
		break;
 8001374:	e005      	b.n	8001382 <update_new_data+0x10e>
	case _neg:
		set_data_negative();
 8001376:	f7ff fec7 	bl	8001108 <set_data_negative>
		break;
 800137a:	e002      	b.n	8001382 <update_new_data+0x10e>
		break;
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	e000      	b.n	8001382 <update_new_data+0x10e>
		break;
 8001380:	46c0      	nop			; (mov r8, r8)
	}
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000004 	.word	0x20000004
 800138c:	08006404 	.word	0x08006404
 8001390:	20000008 	.word	0x20000008
 8001394:	2000009f 	.word	0x2000009f

08001398 <page_2_print>:

void page_2_print()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	lcd_puts(0, 0, (int8_t *)">");
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <page_2_print+0x24>)
 800139e:	001a      	movs	r2, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fb14 	bl	80009d0 <lcd_puts>
	lcd_puts(0, 1, (int8_t *)"FOCUS  :");
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <page_2_print+0x28>)
 80013aa:	001a      	movs	r2, r3
 80013ac:	2101      	movs	r1, #1
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fb0e 	bl	80009d0 <lcd_puts>
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	080062f4 	.word	0x080062f4
 80013c0:	080062f8 	.word	0x080062f8

080013c4 <page_3_print>:

void page_3_print()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	char buf[3];
	lcd_puts(0, 0, (int8_t *)">");
 80013ca:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <page_3_print+0x134>)
 80013cc:	001a      	movs	r2, r3
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fafd 	bl	80009d0 <lcd_puts>
	lcd_puts(0, 1, (int8_t *)"FOCUS  :");
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <page_3_print+0x138>)
 80013d8:	001a      	movs	r2, r3
 80013da:	2101      	movs	r1, #1
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff faf7 	bl	80009d0 <lcd_puts>
	lcd_puts(1, 1, (int8_t *)"SMALL  : ");
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <page_3_print+0x13c>)
 80013e4:	001a      	movs	r2, r3
 80013e6:	2101      	movs	r1, #1
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff faf1 	bl	80009d0 <lcd_puts>
	lcd_puts(2, 1, (int8_t *)"Medium : ");
 80013ee:	4b45      	ldr	r3, [pc, #276]	; (8001504 <page_3_print+0x140>)
 80013f0:	001a      	movs	r2, r3
 80013f2:	2101      	movs	r1, #1
 80013f4:	2002      	movs	r0, #2
 80013f6:	f7ff faeb 	bl	80009d0 <lcd_puts>
	lcd_puts(3, 1, (int8_t *)"Wide   : ");
 80013fa:	4b43      	ldr	r3, [pc, #268]	; (8001508 <page_3_print+0x144>)
 80013fc:	001a      	movs	r2, r3
 80013fe:	2101      	movs	r1, #1
 8001400:	2003      	movs	r0, #3
 8001402:	f7ff fae5 	bl	80009d0 <lcd_puts>

	if (pg3_sm)
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <page_3_print+0x148>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01c      	beq.n	8001448 <page_3_print+0x84>
	{
		clr_data(8);
 800140e:	2008      	movs	r0, #8
 8001410:	f7ff fb30 	bl	8000a74 <clr_data>
		send_cmd(pg3_sm, 8);
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <page_3_print+0x148>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	2108      	movs	r1, #8
 800141c:	0018      	movs	r0, r3
 800141e:	f000 fb89 	bl	8001b34 <send_cmd>
		lcd_puts(1, 10, (int8_t *)"ON");
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <page_3_print+0x14c>)
 8001424:	001a      	movs	r2, r3
 8001426:	210a      	movs	r1, #10
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fad1 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 10, (int8_t *)"OFF");
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <page_3_print+0x150>)
 8001430:	001a      	movs	r2, r3
 8001432:	210a      	movs	r1, #10
 8001434:	2003      	movs	r0, #3
 8001436:	f7ff facb 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 10, (int8_t *)"OFF");
 800143a:	4b36      	ldr	r3, [pc, #216]	; (8001514 <page_3_print+0x150>)
 800143c:	001a      	movs	r2, r3
 800143e:	210a      	movs	r1, #10
 8001440:	2002      	movs	r0, #2
 8001442:	f7ff fac5 	bl	80009d0 <lcd_puts>
	{
		lcd_puts(3, 10, (int8_t *)"OFF");
		lcd_puts(1, 10, (int8_t *)"OFF");
		lcd_puts(2, 10, (int8_t *)"OFF");
	}
}
 8001446:	e053      	b.n	80014f0 <page_3_print+0x12c>
	else if (pg3_md)
 8001448:	4b33      	ldr	r3, [pc, #204]	; (8001518 <page_3_print+0x154>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01c      	beq.n	800148a <page_3_print+0xc6>
		clr_data(9);
 8001450:	2009      	movs	r0, #9
 8001452:	f7ff fb0f 	bl	8000a74 <clr_data>
		send_cmd(pg3_md, 9);
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <page_3_print+0x154>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	2109      	movs	r1, #9
 800145e:	0018      	movs	r0, r3
 8001460:	f000 fb68 	bl	8001b34 <send_cmd>
		lcd_puts(2, 10, (int8_t *)"ON");
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <page_3_print+0x14c>)
 8001466:	001a      	movs	r2, r3
 8001468:	210a      	movs	r1, #10
 800146a:	2002      	movs	r0, #2
 800146c:	f7ff fab0 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 10, (int8_t *)"OFF");
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <page_3_print+0x150>)
 8001472:	001a      	movs	r2, r3
 8001474:	210a      	movs	r1, #10
 8001476:	2003      	movs	r0, #3
 8001478:	f7ff faaa 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 10, (int8_t *)"OFF");
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <page_3_print+0x150>)
 800147e:	001a      	movs	r2, r3
 8001480:	210a      	movs	r1, #10
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff faa4 	bl	80009d0 <lcd_puts>
}
 8001488:	e032      	b.n	80014f0 <page_3_print+0x12c>
	else if (pg3_wd)
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <page_3_print+0x158>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <page_3_print+0x108>
		clr_data(10);
 8001492:	200a      	movs	r0, #10
 8001494:	f7ff faee 	bl	8000a74 <clr_data>
		send_cmd(pg3_wd, 10);
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <page_3_print+0x158>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b25b      	sxtb	r3, r3
 800149e:	210a      	movs	r1, #10
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fb47 	bl	8001b34 <send_cmd>
		lcd_puts(3, 10, (int8_t *)"ON");
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <page_3_print+0x14c>)
 80014a8:	001a      	movs	r2, r3
 80014aa:	210a      	movs	r1, #10
 80014ac:	2003      	movs	r0, #3
 80014ae:	f7ff fa8f 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 10, (int8_t *)"OFF");
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <page_3_print+0x150>)
 80014b4:	001a      	movs	r2, r3
 80014b6:	210a      	movs	r1, #10
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fa89 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 10, (int8_t *)"OFF");
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <page_3_print+0x150>)
 80014c0:	001a      	movs	r2, r3
 80014c2:	210a      	movs	r1, #10
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7ff fa83 	bl	80009d0 <lcd_puts>
}
 80014ca:	e011      	b.n	80014f0 <page_3_print+0x12c>
		lcd_puts(3, 10, (int8_t *)"OFF");
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <page_3_print+0x150>)
 80014ce:	001a      	movs	r2, r3
 80014d0:	210a      	movs	r1, #10
 80014d2:	2003      	movs	r0, #3
 80014d4:	f7ff fa7c 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 10, (int8_t *)"OFF");
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <page_3_print+0x150>)
 80014da:	001a      	movs	r2, r3
 80014dc:	210a      	movs	r1, #10
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fa76 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 10, (int8_t *)"OFF");
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <page_3_print+0x150>)
 80014e6:	001a      	movs	r2, r3
 80014e8:	210a      	movs	r1, #10
 80014ea:	2002      	movs	r0, #2
 80014ec:	f7ff fa70 	bl	80009d0 <lcd_puts>
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	080062f4 	.word	0x080062f4
 80014fc:	080062f8 	.word	0x080062f8
 8001500:	08006304 	.word	0x08006304
 8001504:	08006310 	.word	0x08006310
 8001508:	0800631c 	.word	0x0800631c
 800150c:	200000a0 	.word	0x200000a0
 8001510:	080062ec 	.word	0x080062ec
 8001514:	080062f0 	.word	0x080062f0
 8001518:	200000a1 	.word	0x200000a1
 800151c:	200000a2 	.word	0x200000a2

08001520 <update_screen_data_2>:

void update_screen_data_2()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	focus_upd = 1;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <update_screen_data_2+0x28>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
	lcd_puts(0, 0, (int8_t *)">");
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <update_screen_data_2+0x2c>)
 800152c:	001a      	movs	r2, r3
 800152e:	2100      	movs	r1, #0
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fa4d 	bl	80009d0 <lcd_puts>
	lcd_puts(0, 10, (int8_t *)"Disable");
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <update_screen_data_2+0x30>)
 8001538:	001a      	movs	r2, r3
 800153a:	210a      	movs	r1, #10
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fa47 	bl	80009d0 <lcd_puts>
	// send_cmd(!pg3_sm, 8);

	// lcd_puts(3, 10, (int8_t *)"OFF");
	// send_cmd(!pg3_wd, 10);
	// send_cmd(1, 11);
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000009d 	.word	0x2000009d
 800154c:	080062f4 	.word	0x080062f4
 8001550:	08006328 	.word	0x08006328

08001554 <update_screen_data_3>:

void update_screen_data_3()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

	// if (current_pos.key_number == _pos || current_pos.key_number == _neg)

	switch (current_pos.position_cursor)
 8001558:	4bb2      	ldr	r3, [pc, #712]	; (8001824 <update_screen_data_3+0x2d0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	2b07      	cmp	r3, #7
 8001560:	d00d      	beq.n	800157e <update_screen_data_3+0x2a>
 8001562:	dd00      	ble.n	8001566 <update_screen_data_3+0x12>
 8001564:	e15a      	b.n	800181c <update_screen_data_3+0x2c8>
 8001566:	2b03      	cmp	r3, #3
 8001568:	d100      	bne.n	800156c <update_screen_data_3+0x18>
 800156a:	e10f      	b.n	800178c <update_screen_data_3+0x238>
 800156c:	dd00      	ble.n	8001570 <update_screen_data_3+0x1c>
 800156e:	e155      	b.n	800181c <update_screen_data_3+0x2c8>
 8001570:	2b01      	cmp	r3, #1
 8001572:	d100      	bne.n	8001576 <update_screen_data_3+0x22>
 8001574:	e08e      	b.n	8001694 <update_screen_data_3+0x140>
 8001576:	2b02      	cmp	r3, #2
 8001578:	d100      	bne.n	800157c <update_screen_data_3+0x28>
 800157a:	e0cb      	b.n	8001714 <update_screen_data_3+0x1c0>
		// 	send_cmd(pg3_wd, 10);
		// }
		break;
	}
	// }
}
 800157c:	e14e      	b.n	800181c <update_screen_data_3+0x2c8>
		lcd_puts(0, 0, (int8_t *)">");
 800157e:	4baa      	ldr	r3, [pc, #680]	; (8001828 <update_screen_data_3+0x2d4>)
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fa23 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)" ");
 800158a:	4ba8      	ldr	r3, [pc, #672]	; (800182c <update_screen_data_3+0x2d8>)
 800158c:	001a      	movs	r2, r3
 800158e:	2100      	movs	r1, #0
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff fa1d 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)" ");
 8001596:	4ba5      	ldr	r3, [pc, #660]	; (800182c <update_screen_data_3+0x2d8>)
 8001598:	001a      	movs	r2, r3
 800159a:	2100      	movs	r1, #0
 800159c:	2002      	movs	r0, #2
 800159e:	f7ff fa17 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)" ");
 80015a2:	4ba2      	ldr	r3, [pc, #648]	; (800182c <update_screen_data_3+0x2d8>)
 80015a4:	001a      	movs	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	2003      	movs	r0, #3
 80015aa:	f7ff fa11 	bl	80009d0 <lcd_puts>
		if (pg2_fc)
 80015ae:	4ba0      	ldr	r3, [pc, #640]	; (8001830 <update_screen_data_3+0x2dc>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d033      	beq.n	800161e <update_screen_data_3+0xca>
			lcd_puts(0, 15, (int8_t *)"  ");
 80015b6:	4b9f      	ldr	r3, [pc, #636]	; (8001834 <update_screen_data_3+0x2e0>)
 80015b8:	001a      	movs	r2, r3
 80015ba:	210f      	movs	r1, #15
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fa07 	bl	80009d0 <lcd_puts>
			lcd_puts(0, 10, (int8_t *)"Enable");
 80015c2:	4b9d      	ldr	r3, [pc, #628]	; (8001838 <update_screen_data_3+0x2e4>)
 80015c4:	001a      	movs	r2, r3
 80015c6:	210a      	movs	r1, #10
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff fa01 	bl	80009d0 <lcd_puts>
			if (focus_upd)
 80015ce:	4b9b      	ldr	r3, [pc, #620]	; (800183c <update_screen_data_3+0x2e8>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01a      	beq.n	800160c <update_screen_data_3+0xb8>
				lcd_puts(3, 10, (int8_t *)"OFF");
 80015d6:	4b9a      	ldr	r3, [pc, #616]	; (8001840 <update_screen_data_3+0x2ec>)
 80015d8:	001a      	movs	r2, r3
 80015da:	210a      	movs	r1, #10
 80015dc:	2003      	movs	r0, #3
 80015de:	f7ff f9f7 	bl	80009d0 <lcd_puts>
				lcd_puts(1, 10, (int8_t *)"OFF");
 80015e2:	4b97      	ldr	r3, [pc, #604]	; (8001840 <update_screen_data_3+0x2ec>)
 80015e4:	001a      	movs	r2, r3
 80015e6:	210a      	movs	r1, #10
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff f9f1 	bl	80009d0 <lcd_puts>
				lcd_puts(2, 10, (int8_t *)"OFF");
 80015ee:	4b94      	ldr	r3, [pc, #592]	; (8001840 <update_screen_data_3+0x2ec>)
 80015f0:	001a      	movs	r2, r3
 80015f2:	210a      	movs	r1, #10
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff f9eb 	bl	80009d0 <lcd_puts>
				pg3_sm = 0;
 80015fa:	4b92      	ldr	r3, [pc, #584]	; (8001844 <update_screen_data_3+0x2f0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
				pg3_md = 0;
 8001600:	4b91      	ldr	r3, [pc, #580]	; (8001848 <update_screen_data_3+0x2f4>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
				pg3_wd = 0;
 8001606:	4b91      	ldr	r3, [pc, #580]	; (800184c <update_screen_data_3+0x2f8>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
			last_focus = data_reg.intensity;
 800160c:	4b90      	ldr	r3, [pc, #576]	; (8001850 <update_screen_data_3+0x2fc>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	071b      	lsls	r3, r3, #28
 8001612:	0f1b      	lsrs	r3, r3, #28
 8001614:	b2db      	uxtb	r3, r3
 8001616:	b25a      	sxtb	r2, r3
 8001618:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <update_screen_data_3+0x300>)
 800161a:	701a      	strb	r2, [r3, #0]
		break;
 800161c:	e0fe      	b.n	800181c <update_screen_data_3+0x2c8>
			if (focus_upd == 1)
 800161e:	4b87      	ldr	r3, [pc, #540]	; (800183c <update_screen_data_3+0x2e8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d111      	bne.n	800164a <update_screen_data_3+0xf6>
				lcd_puts(2, 10, (int8_t *)"OFF");
 8001626:	4b86      	ldr	r3, [pc, #536]	; (8001840 <update_screen_data_3+0x2ec>)
 8001628:	001a      	movs	r2, r3
 800162a:	210a      	movs	r1, #10
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff f9cf 	bl	80009d0 <lcd_puts>
				lcd_puts(1, 10, (int8_t *)"OFF");
 8001632:	4b83      	ldr	r3, [pc, #524]	; (8001840 <update_screen_data_3+0x2ec>)
 8001634:	001a      	movs	r2, r3
 8001636:	210a      	movs	r1, #10
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff f9c9 	bl	80009d0 <lcd_puts>
				lcd_puts(3, 10, (int8_t *)"OFF");
 800163e:	4b80      	ldr	r3, [pc, #512]	; (8001840 <update_screen_data_3+0x2ec>)
 8001640:	001a      	movs	r2, r3
 8001642:	210a      	movs	r1, #10
 8001644:	2003      	movs	r0, #3
 8001646:	f7ff f9c3 	bl	80009d0 <lcd_puts>
			lcd_puts(0, 10, (int8_t *)"Disable");
 800164a:	4b83      	ldr	r3, [pc, #524]	; (8001858 <update_screen_data_3+0x304>)
 800164c:	001a      	movs	r2, r3
 800164e:	210a      	movs	r1, #10
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff f9bd 	bl	80009d0 <lcd_puts>
			send_cmd(!pg3_md, 9);
 8001656:	4b7c      	ldr	r3, [pc, #496]	; (8001848 <update_screen_data_3+0x2f4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	425a      	negs	r2, r3
 800165c:	4153      	adcs	r3, r2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	b25b      	sxtb	r3, r3
 8001662:	2109      	movs	r1, #9
 8001664:	0018      	movs	r0, r3
 8001666:	f000 fa65 	bl	8001b34 <send_cmd>
			send_cmd(!pg3_sm, 8);
 800166a:	4b76      	ldr	r3, [pc, #472]	; (8001844 <update_screen_data_3+0x2f0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	425a      	negs	r2, r3
 8001670:	4153      	adcs	r3, r2
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b25b      	sxtb	r3, r3
 8001676:	2108      	movs	r1, #8
 8001678:	0018      	movs	r0, r3
 800167a:	f000 fa5b 	bl	8001b34 <send_cmd>
			send_cmd(!pg3_wd, 10);
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <update_screen_data_3+0x2f8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	425a      	negs	r2, r3
 8001684:	4153      	adcs	r3, r2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	b25b      	sxtb	r3, r3
 800168a:	210a      	movs	r1, #10
 800168c:	0018      	movs	r0, r3
 800168e:	f000 fa51 	bl	8001b34 <send_cmd>
		break;
 8001692:	e0c3      	b.n	800181c <update_screen_data_3+0x2c8>
		lcd_puts(0, 0, (int8_t *)" ");
 8001694:	4b65      	ldr	r3, [pc, #404]	; (800182c <update_screen_data_3+0x2d8>)
 8001696:	001a      	movs	r2, r3
 8001698:	2100      	movs	r1, #0
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff f998 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)">");
 80016a0:	4b61      	ldr	r3, [pc, #388]	; (8001828 <update_screen_data_3+0x2d4>)
 80016a2:	001a      	movs	r2, r3
 80016a4:	2100      	movs	r1, #0
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff f992 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)" ");
 80016ac:	4b5f      	ldr	r3, [pc, #380]	; (800182c <update_screen_data_3+0x2d8>)
 80016ae:	001a      	movs	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	2002      	movs	r0, #2
 80016b4:	f7ff f98c 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)" ");
 80016b8:	4b5c      	ldr	r3, [pc, #368]	; (800182c <update_screen_data_3+0x2d8>)
 80016ba:	001a      	movs	r2, r3
 80016bc:	2100      	movs	r1, #0
 80016be:	2003      	movs	r0, #3
 80016c0:	f7ff f986 	bl	80009d0 <lcd_puts>
		if (pg3_sm)
 80016c4:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <update_screen_data_3+0x2f0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d100      	bne.n	80016ce <update_screen_data_3+0x17a>
 80016cc:	e0a1      	b.n	8001812 <update_screen_data_3+0x2be>
			focus_upd = 0;
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <update_screen_data_3+0x2e8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
			lcd_puts(1, 10, (int8_t *)"   ");
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <update_screen_data_3+0x308>)
 80016d6:	001a      	movs	r2, r3
 80016d8:	210a      	movs	r1, #10
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff f978 	bl	80009d0 <lcd_puts>
			lcd_puts(1, 10, (int8_t *)"ON");
 80016e0:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <update_screen_data_3+0x30c>)
 80016e2:	001a      	movs	r2, r3
 80016e4:	210a      	movs	r1, #10
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff f972 	bl	80009d0 <lcd_puts>
			lcd_puts(2, 10, (int8_t *)"OFF");
 80016ec:	4b54      	ldr	r3, [pc, #336]	; (8001840 <update_screen_data_3+0x2ec>)
 80016ee:	001a      	movs	r2, r3
 80016f0:	210a      	movs	r1, #10
 80016f2:	2002      	movs	r0, #2
 80016f4:	f7ff f96c 	bl	80009d0 <lcd_puts>
			lcd_puts(3, 10, (int8_t *)"OFF");
 80016f8:	4b51      	ldr	r3, [pc, #324]	; (8001840 <update_screen_data_3+0x2ec>)
 80016fa:	001a      	movs	r2, r3
 80016fc:	210a      	movs	r1, #10
 80016fe:	2003      	movs	r0, #3
 8001700:	f7ff f966 	bl	80009d0 <lcd_puts>
			send_cmd(pg3_sm, 8);
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <update_screen_data_3+0x2f0>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b25b      	sxtb	r3, r3
 800170a:	2108      	movs	r1, #8
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fa11 	bl	8001b34 <send_cmd>
		break;
 8001712:	e07e      	b.n	8001812 <update_screen_data_3+0x2be>
		lcd_puts(0, 0, (int8_t *)" ");
 8001714:	4b45      	ldr	r3, [pc, #276]	; (800182c <update_screen_data_3+0x2d8>)
 8001716:	001a      	movs	r2, r3
 8001718:	2100      	movs	r1, #0
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff f958 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)" ");
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <update_screen_data_3+0x2d8>)
 8001722:	001a      	movs	r2, r3
 8001724:	2100      	movs	r1, #0
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff f952 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)">");
 800172c:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <update_screen_data_3+0x2d4>)
 800172e:	001a      	movs	r2, r3
 8001730:	2100      	movs	r1, #0
 8001732:	2002      	movs	r0, #2
 8001734:	f7ff f94c 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)" ");
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <update_screen_data_3+0x2d8>)
 800173a:	001a      	movs	r2, r3
 800173c:	2100      	movs	r1, #0
 800173e:	2003      	movs	r0, #3
 8001740:	f7ff f946 	bl	80009d0 <lcd_puts>
		if (pg3_md)
 8001744:	4b40      	ldr	r3, [pc, #256]	; (8001848 <update_screen_data_3+0x2f4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d064      	beq.n	8001816 <update_screen_data_3+0x2c2>
			lcd_puts(2, 10, (int8_t *)"   ");
 800174c:	4b43      	ldr	r3, [pc, #268]	; (800185c <update_screen_data_3+0x308>)
 800174e:	001a      	movs	r2, r3
 8001750:	210a      	movs	r1, #10
 8001752:	2002      	movs	r0, #2
 8001754:	f7ff f93c 	bl	80009d0 <lcd_puts>
			lcd_puts(1, 10, (int8_t *)"OFF");
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <update_screen_data_3+0x2ec>)
 800175a:	001a      	movs	r2, r3
 800175c:	210a      	movs	r1, #10
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff f936 	bl	80009d0 <lcd_puts>
			lcd_puts(2, 10, (int8_t *)"ON");
 8001764:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <update_screen_data_3+0x30c>)
 8001766:	001a      	movs	r2, r3
 8001768:	210a      	movs	r1, #10
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff f930 	bl	80009d0 <lcd_puts>
			lcd_puts(3, 10, (int8_t *)"OFF");
 8001770:	4b33      	ldr	r3, [pc, #204]	; (8001840 <update_screen_data_3+0x2ec>)
 8001772:	001a      	movs	r2, r3
 8001774:	210a      	movs	r1, #10
 8001776:	2003      	movs	r0, #3
 8001778:	f7ff f92a 	bl	80009d0 <lcd_puts>
			send_cmd(pg3_md, 9);
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <update_screen_data_3+0x2f4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b25b      	sxtb	r3, r3
 8001782:	2109      	movs	r1, #9
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f9d5 	bl	8001b34 <send_cmd>
		break;
 800178a:	e044      	b.n	8001816 <update_screen_data_3+0x2c2>
		lcd_puts(0, 0, (int8_t *)" ");
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <update_screen_data_3+0x2d8>)
 800178e:	001a      	movs	r2, r3
 8001790:	2100      	movs	r1, #0
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff f91c 	bl	80009d0 <lcd_puts>
		lcd_puts(1, 0, (int8_t *)" ");
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <update_screen_data_3+0x2d8>)
 800179a:	001a      	movs	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff f916 	bl	80009d0 <lcd_puts>
		lcd_puts(2, 0, (int8_t *)" ");
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <update_screen_data_3+0x2d8>)
 80017a6:	001a      	movs	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff f910 	bl	80009d0 <lcd_puts>
		lcd_puts(3, 0, (int8_t *)">");
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <update_screen_data_3+0x2d4>)
 80017b2:	001a      	movs	r2, r3
 80017b4:	2100      	movs	r1, #0
 80017b6:	2003      	movs	r0, #3
 80017b8:	f7ff f90a 	bl	80009d0 <lcd_puts>
		if (pg3_wd)
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <update_screen_data_3+0x2f8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d02a      	beq.n	800181a <update_screen_data_3+0x2c6>
			lcd_puts(3, 10, (int8_t *)"   ");
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <update_screen_data_3+0x308>)
 80017c6:	001a      	movs	r2, r3
 80017c8:	210a      	movs	r1, #10
 80017ca:	2003      	movs	r0, #3
 80017cc:	f7ff f900 	bl	80009d0 <lcd_puts>
			lcd_puts(1, 10, (int8_t *)"OFF");
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <update_screen_data_3+0x2ec>)
 80017d2:	001a      	movs	r2, r3
 80017d4:	210a      	movs	r1, #10
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff f8fa 	bl	80009d0 <lcd_puts>
			lcd_puts(2, 10, (int8_t *)"OFF");
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <update_screen_data_3+0x2ec>)
 80017de:	001a      	movs	r2, r3
 80017e0:	210a      	movs	r1, #10
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7ff f8f4 	bl	80009d0 <lcd_puts>
			lcd_puts(3, 10, (int8_t *)"ON");
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <update_screen_data_3+0x30c>)
 80017ea:	001a      	movs	r2, r3
 80017ec:	210a      	movs	r1, #10
 80017ee:	2003      	movs	r0, #3
 80017f0:	f7ff f8ee 	bl	80009d0 <lcd_puts>
			if (current_pos.key_number == _pos)
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <update_screen_data_3+0x2d0>)
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	2207      	movs	r2, #7
 80017fa:	4013      	ands	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d10b      	bne.n	800181a <update_screen_data_3+0x2c6>
				send_cmd(pg3_wd, 10);
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <update_screen_data_3+0x2f8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b25b      	sxtb	r3, r3
 8001808:	210a      	movs	r1, #10
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f992 	bl	8001b34 <send_cmd>
		break;
 8001810:	e003      	b.n	800181a <update_screen_data_3+0x2c6>
		break;
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	e002      	b.n	800181c <update_screen_data_3+0x2c8>
		break;
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	e000      	b.n	800181c <update_screen_data_3+0x2c8>
		break;
 800181a:	46c0      	nop			; (mov r8, r8)
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	20000004 	.word	0x20000004
 8001828:	080062f4 	.word	0x080062f4
 800182c:	08006330 	.word	0x08006330
 8001830:	2000009f 	.word	0x2000009f
 8001834:	08006334 	.word	0x08006334
 8001838:	08006338 	.word	0x08006338
 800183c:	2000009d 	.word	0x2000009d
 8001840:	080062f0 	.word	0x080062f0
 8001844:	200000a0 	.word	0x200000a0
 8001848:	200000a1 	.word	0x200000a1
 800184c:	200000a2 	.word	0x200000a2
 8001850:	20000008 	.word	0x20000008
 8001854:	200000b1 	.word	0x200000b1
 8001858:	08006328 	.word	0x08006328
 800185c:	08006340 	.word	0x08006340
 8001860:	080062ec 	.word	0x080062ec

08001864 <update_screen_data>:

void update_screen_data()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	char buffer[3];

	switch (current_pos.position_cursor)
 800186a:	4ba7      	ldr	r3, [pc, #668]	; (8001b08 <update_screen_data+0x2a4>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	2b06      	cmp	r3, #6
 8001872:	d900      	bls.n	8001876 <update_screen_data+0x12>
 8001874:	e143      	b.n	8001afe <update_screen_data+0x29a>
 8001876:	009a      	lsls	r2, r3, #2
 8001878:	4ba4      	ldr	r3, [pc, #656]	; (8001b0c <update_screen_data+0x2a8>)
 800187a:	18d3      	adds	r3, r2, r3
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	469f      	mov	pc, r3
	{
	case intensity:
		if (data_reg.depth == 1)
 8001880:	4ba3      	ldr	r3, [pc, #652]	; (8001b10 <update_screen_data+0x2ac>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	227f      	movs	r2, #127	; 0x7f
 8001886:	4393      	bics	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <update_screen_data+0x32>
		{
			//			sprintf(buffer, "%02d", data_reg.intensity);
			//			last_inten = data_reg.intensity;
			//			send_cmd(7,intensity);
			// lcd_puts(1, 7, (int8_t *)"MAX");
			depth_press = 0;
 800188e:	4ba1      	ldr	r3, [pc, #644]	; (8001b14 <update_screen_data+0x2b0>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e013      	b.n	80018be <update_screen_data+0x5a>
		}
		else
		{
			clr_data(intensity);
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff f8ec 	bl	8000a74 <clr_data>
			sprintf(buffer, "%02d", data_reg.intensity);
 800189c:	4b9c      	ldr	r3, [pc, #624]	; (8001b10 <update_screen_data+0x2ac>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	071b      	lsls	r3, r3, #28
 80018a2:	0f1b      	lsrs	r3, r3, #28
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	001a      	movs	r2, r3
 80018a8:	499b      	ldr	r1, [pc, #620]	; (8001b18 <update_screen_data+0x2b4>)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	0018      	movs	r0, r3
 80018ae:	f004 f809 	bl	80058c4 <siprintf>
			lcd_puts(1, 7, (int8_t *)buffer);
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	001a      	movs	r2, r3
 80018b6:	2107      	movs	r1, #7
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff f889 	bl	80009d0 <lcd_puts>
		}

		clr_select();
 80018be:	f7ff f9b7 	bl	8000c30 <clr_select>
		lcd_puts(1, 0, (int8_t *)">");
 80018c2:	4b96      	ldr	r3, [pc, #600]	; (8001b1c <update_screen_data+0x2b8>)
 80018c4:	001a      	movs	r2, r3
 80018c6:	2100      	movs	r1, #0
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7ff f881 	bl	80009d0 <lcd_puts>
		send_cmd(data_reg.intensity, intensity);
 80018ce:	4b90      	ldr	r3, [pc, #576]	; (8001b10 <update_screen_data+0x2ac>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	071b      	lsls	r3, r3, #28
 80018d4:	0f1b      	lsrs	r3, r3, #28
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	2101      	movs	r1, #1
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 f929 	bl	8001b34 <send_cmd>
		break;
 80018e2:	e10c      	b.n	8001afe <update_screen_data+0x29a>

	case color:
		if (data_reg.color == 1)
 80018e4:	4b8a      	ldr	r3, [pc, #552]	; (8001b10 <update_screen_data+0x2ac>)
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d10a      	bne.n	8001904 <update_screen_data+0xa0>
		{
			lcd_puts(2, 7, (int8_t *)"CW");
 80018ee:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <update_screen_data+0x2bc>)
 80018f0:	001a      	movs	r2, r3
 80018f2:	2107      	movs	r1, #7
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7ff f86b 	bl	80009d0 <lcd_puts>
			send_cmd(5, color);
 80018fa:	2102      	movs	r1, #2
 80018fc:	2005      	movs	r0, #5
 80018fe:	f000 f919 	bl	8001b34 <send_cmd>
 8001902:	e01b      	b.n	800193c <update_screen_data+0xd8>
		}
		else if (data_reg.color == -1)
 8001904:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <update_screen_data+0x2ac>)
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	b25b      	sxtb	r3, r3
 800190a:	3301      	adds	r3, #1
 800190c:	d10c      	bne.n	8001928 <update_screen_data+0xc4>
		{
			lcd_puts(2, 7, (int8_t *)"WW");
 800190e:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <update_screen_data+0x2c0>)
 8001910:	001a      	movs	r2, r3
 8001912:	2107      	movs	r1, #7
 8001914:	2002      	movs	r0, #2
 8001916:	f7ff f85b 	bl	80009d0 <lcd_puts>
			send_cmd(-5, color);
 800191a:	2305      	movs	r3, #5
 800191c:	425b      	negs	r3, r3
 800191e:	2102      	movs	r1, #2
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f907 	bl	8001b34 <send_cmd>
 8001926:	e009      	b.n	800193c <update_screen_data+0xd8>
		}

		else
		{
			lcd_puts(2, 7, (int8_t *)"NW");
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <update_screen_data+0x2c4>)
 800192a:	001a      	movs	r2, r3
 800192c:	2107      	movs	r1, #7
 800192e:	2002      	movs	r0, #2
 8001930:	f7ff f84e 	bl	80009d0 <lcd_puts>
			send_cmd(0, color);
 8001934:	2102      	movs	r1, #2
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f8fc 	bl	8001b34 <send_cmd>
		}

		// sprintf(buffer, "%02d", data_reg.color);
		// lcd_puts(2, 7, (int8_t *)buffer);
		clr_select();
 800193c:	f7ff f978 	bl	8000c30 <clr_select>
		lcd_puts(2, 0, (int8_t *)">");
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <update_screen_data+0x2b8>)
 8001942:	001a      	movs	r2, r3
 8001944:	2100      	movs	r1, #0
 8001946:	2002      	movs	r0, #2
 8001948:	f7ff f842 	bl	80009d0 <lcd_puts>
		// send_cmd(data_reg.color, color);
		break;
 800194c:	e0d7      	b.n	8001afe <update_screen_data+0x29a>

	case sensor:
		clr_data(sensor);
 800194e:	2003      	movs	r0, #3
 8001950:	f7ff f890 	bl	8000a74 <clr_data>
		clr_select();
 8001954:	f7ff f96c 	bl	8000c30 <clr_select>
		lcd_puts(3, 0, (int8_t *)">");
 8001958:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <update_screen_data+0x2b8>)
 800195a:	001a      	movs	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	2003      	movs	r0, #3
 8001960:	f7ff f836 	bl	80009d0 <lcd_puts>
		send_cmd(data_reg.sensor, sensor);
 8001964:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <update_screen_data+0x2ac>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	06db      	lsls	r3, r3, #27
 800196a:	0fdb      	lsrs	r3, r3, #31
 800196c:	b2db      	uxtb	r3, r3
 800196e:	b25b      	sxtb	r3, r3
 8001970:	2103      	movs	r1, #3
 8001972:	0018      	movs	r0, r3
 8001974:	f000 f8de 	bl	8001b34 <send_cmd>
		if (data_reg.sensor)
 8001978:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <update_screen_data+0x2ac>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2210      	movs	r2, #16
 800197e:	4013      	ands	r3, r2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <update_screen_data+0x130>
			lcd_puts(3, 7, (int8_t *)"ON");
 8001986:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <update_screen_data+0x2c8>)
 8001988:	001a      	movs	r2, r3
 800198a:	2107      	movs	r1, #7
 800198c:	2003      	movs	r0, #3
 800198e:	f7ff f81f 	bl	80009d0 <lcd_puts>
		else
			lcd_puts(3, 7, (int8_t *)"OFF");
		break;
 8001992:	e0b4      	b.n	8001afe <update_screen_data+0x29a>
			lcd_puts(3, 7, (int8_t *)"OFF");
 8001994:	4b66      	ldr	r3, [pc, #408]	; (8001b30 <update_screen_data+0x2cc>)
 8001996:	001a      	movs	r2, r3
 8001998:	2107      	movs	r1, #7
 800199a:	2003      	movs	r0, #3
 800199c:	f7ff f818 	bl	80009d0 <lcd_puts>
		break;
 80019a0:	e0ad      	b.n	8001afe <update_screen_data+0x29a>

	case lamp:
		clr_data(lamp);
 80019a2:	2004      	movs	r0, #4
 80019a4:	f7ff f866 	bl	8000a74 <clr_data>
		clr_select();
 80019a8:	f7ff f942 	bl	8000c30 <clr_select>
		lcd_puts(1, 10, (int8_t *)">");
 80019ac:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <update_screen_data+0x2b8>)
 80019ae:	001a      	movs	r2, r3
 80019b0:	210a      	movs	r1, #10
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff f80c 	bl	80009d0 <lcd_puts>
		if (current_pos.key_number == _pos || current_pos.key_number == _neg)
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <update_screen_data+0x2a4>)
 80019ba:	785b      	ldrb	r3, [r3, #1]
 80019bc:	2207      	movs	r2, #7
 80019be:	4013      	ands	r3, r2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d006      	beq.n	80019d4 <update_screen_data+0x170>
 80019c6:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <update_screen_data+0x2a4>)
 80019c8:	785b      	ldrb	r3, [r3, #1]
 80019ca:	2207      	movs	r2, #7
 80019cc:	4013      	ands	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d109      	bne.n	80019e8 <update_screen_data+0x184>
		{
			send_cmd(data_reg.lamp, lamp);
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <update_screen_data+0x2ac>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	069b      	lsls	r3, r3, #26
 80019da:	0fdb      	lsrs	r3, r3, #31
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	2104      	movs	r1, #4
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f8a6 	bl	8001b34 <send_cmd>
		}
		if (data_reg.lamp)
 80019e8:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <update_screen_data+0x2ac>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2220      	movs	r2, #32
 80019ee:	4013      	ands	r3, r2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <update_screen_data+0x1a0>
			lcd_puts(1, 17, (int8_t *)"ON");
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <update_screen_data+0x2c8>)
 80019f8:	001a      	movs	r2, r3
 80019fa:	2111      	movs	r1, #17
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7fe ffe7 	bl	80009d0 <lcd_puts>
		else
			lcd_puts(1, 17, (int8_t *)"OFF");

		break;
 8001a02:	e07c      	b.n	8001afe <update_screen_data+0x29a>
			lcd_puts(1, 17, (int8_t *)"OFF");
 8001a04:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <update_screen_data+0x2cc>)
 8001a06:	001a      	movs	r2, r3
 8001a08:	2111      	movs	r1, #17
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7fe ffe0 	bl	80009d0 <lcd_puts>
		break;
 8001a10:	e075      	b.n	8001afe <update_screen_data+0x29a>

	case endo:
		clr_data(endo);
 8001a12:	2005      	movs	r0, #5
 8001a14:	f7ff f82e 	bl	8000a74 <clr_data>
		clr_select();
 8001a18:	f7ff f90a 	bl	8000c30 <clr_select>
		lcd_puts(2, 10, (int8_t *)">");
 8001a1c:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <update_screen_data+0x2b8>)
 8001a1e:	001a      	movs	r2, r3
 8001a20:	210a      	movs	r1, #10
 8001a22:	2002      	movs	r0, #2
 8001a24:	f7fe ffd4 	bl	80009d0 <lcd_puts>

		// if (current_pos.key_number == _pos || current_pos.key_number == _neg)
		// {
		// 	send_cmd(data_reg.endo, endo);
		// }
		send_cmd(data_reg.endo, endo);
 8001a28:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <update_screen_data+0x2ac>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	065b      	lsls	r3, r3, #25
 8001a2e:	0fdb      	lsrs	r3, r3, #31
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	2105      	movs	r1, #5
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 f87c 	bl	8001b34 <send_cmd>
		if (data_reg.endo)
 8001a3c:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <update_screen_data+0x2ac>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	4013      	ands	r3, r2
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <update_screen_data+0x1f4>
			lcd_puts(2, 17, (int8_t *)"ON");
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <update_screen_data+0x2c8>)
 8001a4c:	001a      	movs	r2, r3
 8001a4e:	2111      	movs	r1, #17
 8001a50:	2002      	movs	r0, #2
 8001a52:	f7fe ffbd 	bl	80009d0 <lcd_puts>
		else
			lcd_puts(2, 17, (int8_t *)"OFF");

		break;
 8001a56:	e052      	b.n	8001afe <update_screen_data+0x29a>
			lcd_puts(2, 17, (int8_t *)"OFF");
 8001a58:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <update_screen_data+0x2cc>)
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	2111      	movs	r1, #17
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f7fe ffb6 	bl	80009d0 <lcd_puts>
		break;
 8001a64:	e04b      	b.n	8001afe <update_screen_data+0x29a>

	case depth:
		clr_data(depth);
 8001a66:	2006      	movs	r0, #6
 8001a68:	f7ff f804 	bl	8000a74 <clr_data>
		clr_select();
 8001a6c:	f7ff f8e0 	bl	8000c30 <clr_select>
		lcd_puts(3, 10, (int8_t *)">");
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <update_screen_data+0x2b8>)
 8001a72:	001a      	movs	r2, r3
 8001a74:	210a      	movs	r1, #10
 8001a76:	2003      	movs	r0, #3
 8001a78:	f7fe ffaa 	bl	80009d0 <lcd_puts>
		if (current_pos.key_number == _pos || current_pos.key_number == _neg)
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <update_screen_data+0x2a4>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2207      	movs	r2, #7
 8001a82:	4013      	ands	r3, r2
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d006      	beq.n	8001a98 <update_screen_data+0x234>
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <update_screen_data+0x2a4>)
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4013      	ands	r3, r2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d109      	bne.n	8001aac <update_screen_data+0x248>
		{
			send_cmd(data_reg.depth, depth);
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <update_screen_data+0x2ac>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	061b      	lsls	r3, r3, #24
 8001a9e:	0fdb      	lsrs	r3, r3, #31
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	2106      	movs	r1, #6
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f844 	bl	8001b34 <send_cmd>
		}
		if (data_reg.depth)
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <update_screen_data+0x2ac>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	227f      	movs	r2, #127	; 0x7f
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d006      	beq.n	8001ac8 <update_screen_data+0x264>
		{
			// lcd_puts(1, 7, (int8_t *)"MAX");
			lcd_puts(3, 17, (int8_t *)"ON");
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <update_screen_data+0x2c8>)
 8001abc:	001a      	movs	r2, r3
 8001abe:	2111      	movs	r1, #17
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f7fe ff85 	bl	80009d0 <lcd_puts>
			clr_data(intensity);
			sprintf(buffer, "%02d", data_reg.intensity);
			lcd_puts(1, 7, (int8_t *)buffer);
		}

		break;
 8001ac6:	e019      	b.n	8001afc <update_screen_data+0x298>
			lcd_puts(3, 17, (int8_t *)"OFF");
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <update_screen_data+0x2cc>)
 8001aca:	001a      	movs	r2, r3
 8001acc:	2111      	movs	r1, #17
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f7fe ff7e 	bl	80009d0 <lcd_puts>
			clr_data(intensity);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7fe ffcd 	bl	8000a74 <clr_data>
			sprintf(buffer, "%02d", data_reg.intensity);
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <update_screen_data+0x2ac>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	071b      	lsls	r3, r3, #28
 8001ae0:	0f1b      	lsrs	r3, r3, #28
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	490c      	ldr	r1, [pc, #48]	; (8001b18 <update_screen_data+0x2b4>)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	0018      	movs	r0, r3
 8001aec:	f003 feea 	bl	80058c4 <siprintf>
			lcd_puts(1, 7, (int8_t *)buffer);
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	001a      	movs	r2, r3
 8001af4:	2107      	movs	r1, #7
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7fe ff6a 	bl	80009d0 <lcd_puts>
		break;
 8001afc:	46c0      	nop			; (mov r8, r8)
	}
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	08006418 	.word	0x08006418
 8001b10:	20000008 	.word	0x20000008
 8001b14:	2000009c 	.word	0x2000009c
 8001b18:	080062e4 	.word	0x080062e4
 8001b1c:	080062f4 	.word	0x080062f4
 8001b20:	08006344 	.word	0x08006344
 8001b24:	08006348 	.word	0x08006348
 8001b28:	0800634c 	.word	0x0800634c
 8001b2c:	080062ec 	.word	0x080062ec
 8001b30:	080062f0 	.word	0x080062f0

08001b34 <send_cmd>:

void send_cmd(int8_t x, int8_t mode)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	1c0a      	adds	r2, r1, #0
 8001b44:	701a      	strb	r2, [r3, #0]
	uint8_t data[5];
	data[0] = '@';
 8001b46:	2108      	movs	r1, #8
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	701a      	strb	r2, [r3, #0]
	data[4] = '#';
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2223      	movs	r2, #35	; 0x23
 8001b52:	711a      	strb	r2, [r3, #4]
	switch (mode)
 8001b54:	1dbb      	adds	r3, r7, #6
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	2b0b      	cmp	r3, #11
 8001b5c:	d900      	bls.n	8001b60 <send_cmd+0x2c>
 8001b5e:	e13e      	b.n	8001dde <send_cmd+0x2aa>
 8001b60:	009a      	lsls	r2, r3, #2
 8001b62:	4ba1      	ldr	r3, [pc, #644]	; (8001de8 <send_cmd+0x2b4>)
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	469f      	mov	pc, r3
	{
	case intensity:
		data[1] = 'I';
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2249      	movs	r2, #73	; 0x49
 8001b70:	705a      	strb	r2, [r3, #1]
		data[2] = '0';
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	2230      	movs	r2, #48	; 0x30
 8001b76:	709a      	strb	r2, [r3, #2]
		if (x == 10)
 8001b78:	1dfb      	adds	r3, r7, #7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	2b0a      	cmp	r3, #10
 8001b80:	d109      	bne.n	8001b96 <send_cmd+0x62>
		{
			data[3] = ':'; //@I0:#
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	223a      	movs	r2, #58	; 0x3a
 8001b86:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001b88:	1879      	adds	r1, r7, r1
 8001b8a:	4898      	ldr	r0, [pc, #608]	; (8001dec <send_cmd+0x2b8>)
 8001b8c:	2364      	movs	r3, #100	; 0x64
 8001b8e:	2205      	movs	r2, #5
 8001b90:	f003 fa1e 	bl	8004fd0 <HAL_UART_Transmit>
		else
		{
			data[3] = 48 + x;
			HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		}
		break;
 8001b94:	e123      	b.n	8001dde <send_cmd+0x2aa>
			data[3] = 48 + x;
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	3330      	adds	r3, #48	; 0x30
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001ba4:	1879      	adds	r1, r7, r1
 8001ba6:	4891      	ldr	r0, [pc, #580]	; (8001dec <send_cmd+0x2b8>)
 8001ba8:	2364      	movs	r3, #100	; 0x64
 8001baa:	2205      	movs	r2, #5
 8001bac:	f003 fa10 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001bb0:	e115      	b.n	8001dde <send_cmd+0x2aa>
	case color:
		if (x > 0)
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	dd0d      	ble.n	8001bd8 <send_cmd+0xa4>
		{
			data[1] = 'C'; //@c-0#
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2243      	movs	r2, #67	; 0x43
 8001bc2:	705a      	strb	r2, [r3, #1]
			data[2] = '+';
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	222b      	movs	r2, #43	; 0x2b
 8001bc8:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + x;
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3330      	adds	r3, #48	; 0x30
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	70da      	strb	r2, [r3, #3]
 8001bd6:	e01c      	b.n	8001c12 <send_cmd+0xde>
		}
		else if (x < 0)
 8001bd8:	1dfb      	adds	r3, r7, #7
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8001bde:	d90e      	bls.n	8001bfe <send_cmd+0xca>
		{
			data[1] = 'C';
 8001be0:	2108      	movs	r1, #8
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2243      	movs	r2, #67	; 0x43
 8001be6:	705a      	strb	r2, [r3, #1]
			data[2] = '-';
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	222d      	movs	r2, #45	; 0x2d
 8001bec:	709a      	strb	r2, [r3, #2]
			data[3] = (48 + (x) * (-1));
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2230      	movs	r2, #48	; 0x30
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	70da      	strb	r2, [r3, #3]
 8001bfc:	e009      	b.n	8001c12 <send_cmd+0xde>
		}
		else
		{
			data[1] = 'C';
 8001bfe:	2108      	movs	r1, #8
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2243      	movs	r2, #67	; 0x43
 8001c04:	705a      	strb	r2, [r3, #1]
			data[2] = '-'; //@c-0#
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	222d      	movs	r2, #45	; 0x2d
 8001c0a:	709a      	strb	r2, [r3, #2]
			data[3] = '0';
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2230      	movs	r2, #48	; 0x30
 8001c10:	70da      	strb	r2, [r3, #3]
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001c12:	2308      	movs	r3, #8
 8001c14:	18f9      	adds	r1, r7, r3
 8001c16:	4875      	ldr	r0, [pc, #468]	; (8001dec <send_cmd+0x2b8>)
 8001c18:	2364      	movs	r3, #100	; 0x64
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	f003 f9d8 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001c20:	e0dd      	b.n	8001dde <send_cmd+0x2aa>
		// data[1] = 'I';data[2] = '0';data[3] = 48+x;
		// HAL_UART_Transmit(&huart1, &data[0], 5, 100);
		break;

	case lamp:
		data[1] = 'L'; //@L_1#
 8001c22:	2108      	movs	r1, #8
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	224c      	movs	r2, #76	; 0x4c
 8001c28:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	225f      	movs	r2, #95	; 0x5f
 8001c2e:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 8001c30:	1dfb      	adds	r3, r7, #7
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3330      	adds	r3, #48	; 0x30
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001c3c:	1879      	adds	r1, r7, r1
 8001c3e:	486b      	ldr	r0, [pc, #428]	; (8001dec <send_cmd+0x2b8>)
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	2205      	movs	r2, #5
 8001c44:	f003 f9c4 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001c48:	e0c9      	b.n	8001dde <send_cmd+0x2aa>
	case endo:
		data[1] = 'E';
 8001c4a:	2108      	movs	r1, #8
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2245      	movs	r2, #69	; 0x45
 8001c50:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	225f      	movs	r2, #95	; 0x5f
 8001c56:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3330      	adds	r3, #48	; 0x30
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001c64:	1879      	adds	r1, r7, r1
 8001c66:	4861      	ldr	r0, [pc, #388]	; (8001dec <send_cmd+0x2b8>)
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	2205      	movs	r2, #5
 8001c6c:	f003 f9b0 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001c70:	e0b5      	b.n	8001dde <send_cmd+0x2aa>
	case depth:
		data[1] = 'D';
 8001c72:	2108      	movs	r1, #8
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2244      	movs	r2, #68	; 0x44
 8001c78:	705a      	strb	r2, [r3, #1]
		data[2] = '_';
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	225f      	movs	r2, #95	; 0x5f
 8001c7e:	709a      	strb	r2, [r3, #2]
		data[3] = 48 + x;
 8001c80:	1dfb      	adds	r3, r7, #7
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	3330      	adds	r3, #48	; 0x30
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	70da      	strb	r2, [r3, #3]
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001c8c:	1879      	adds	r1, r7, r1
 8001c8e:	4857      	ldr	r0, [pc, #348]	; (8001dec <send_cmd+0x2b8>)
 8001c90:	2364      	movs	r3, #100	; 0x64
 8001c92:	2205      	movs	r2, #5
 8001c94:	f003 f99c 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001c98:	e0a1      	b.n	8001dde <send_cmd+0x2aa>
	case 8:

		if (x == 1)
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10a      	bne.n	8001cba <send_cmd+0x186>
		{
			data[1] = 'F';
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2246      	movs	r2, #70	; 0x46
 8001caa:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	225f      	movs	r2, #95	; 0x5f
 8001cb0:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + 1;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2231      	movs	r2, #49	; 0x31
 8001cb6:	70da      	strb	r2, [r3, #3]
 8001cb8:	e00e      	b.n	8001cd8 <send_cmd+0x1a4>
		}
		else if (x == 0)
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <send_cmd+0x1a4>
		{
			data[1] = 'R';
 8001cc4:	2108      	movs	r1, #8
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2252      	movs	r2, #82	; 0x52
 8001cca:	705a      	strb	r2, [r3, #1]
			data[2] = 'E';
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2245      	movs	r2, #69	; 0x45
 8001cd0:	709a      	strb	r2, [r3, #2]
			data[3] = 'S';
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2253      	movs	r2, #83	; 0x53
 8001cd6:	70da      	strb	r2, [r3, #3]
		}

		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001cd8:	2308      	movs	r3, #8
 8001cda:	18f9      	adds	r1, r7, r3
 8001cdc:	4843      	ldr	r0, [pc, #268]	; (8001dec <send_cmd+0x2b8>)
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	f003 f975 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001ce6:	e07a      	b.n	8001dde <send_cmd+0x2aa>
	case 9:
		if (x == 1)
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10a      	bne.n	8001d08 <send_cmd+0x1d4>
		{
			data[1] = 'F';
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2246      	movs	r2, #70	; 0x46
 8001cf8:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	225f      	movs	r2, #95	; 0x5f
 8001cfe:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + 2;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2232      	movs	r2, #50	; 0x32
 8001d04:	70da      	strb	r2, [r3, #3]
 8001d06:	e00e      	b.n	8001d26 <send_cmd+0x1f2>
		}
		else if (x == 0)
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <send_cmd+0x1f2>
		{
			data[1] = 'R';
 8001d12:	2108      	movs	r1, #8
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	2252      	movs	r2, #82	; 0x52
 8001d18:	705a      	strb	r2, [r3, #1]
			data[2] = 'E';
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2245      	movs	r2, #69	; 0x45
 8001d1e:	709a      	strb	r2, [r3, #2]
			data[3] = 'S';
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	2253      	movs	r2, #83	; 0x53
 8001d24:	70da      	strb	r2, [r3, #3]
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001d26:	2308      	movs	r3, #8
 8001d28:	18f9      	adds	r1, r7, r3
 8001d2a:	4830      	ldr	r0, [pc, #192]	; (8001dec <send_cmd+0x2b8>)
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	2205      	movs	r2, #5
 8001d30:	f003 f94e 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001d34:	e053      	b.n	8001dde <send_cmd+0x2aa>
	case 10:
		if (x == 1)
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10a      	bne.n	8001d56 <send_cmd+0x222>
		{
			data[1] = 'F';
 8001d40:	2108      	movs	r1, #8
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	2246      	movs	r2, #70	; 0x46
 8001d46:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	225f      	movs	r2, #95	; 0x5f
 8001d4c:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + 3;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2233      	movs	r2, #51	; 0x33
 8001d52:	70da      	strb	r2, [r3, #3]
 8001d54:	e00e      	b.n	8001d74 <send_cmd+0x240>
		}
		else if (x == 0)
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <send_cmd+0x240>
		{
			data[1] = 'R';
 8001d60:	2108      	movs	r1, #8
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2252      	movs	r2, #82	; 0x52
 8001d66:	705a      	strb	r2, [r3, #1]
			data[2] = 'E';
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2245      	movs	r2, #69	; 0x45
 8001d6c:	709a      	strb	r2, [r3, #2]
			data[3] = 'S';
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2253      	movs	r2, #83	; 0x53
 8001d72:	70da      	strb	r2, [r3, #3]
		}
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001d74:	2308      	movs	r3, #8
 8001d76:	18f9      	adds	r1, r7, r3
 8001d78:	481c      	ldr	r0, [pc, #112]	; (8001dec <send_cmd+0x2b8>)
 8001d7a:	2364      	movs	r3, #100	; 0x64
 8001d7c:	2205      	movs	r2, #5
 8001d7e:	f003 f927 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001d82:	e02c      	b.n	8001dde <send_cmd+0x2aa>
	case 11:
		if (x == 0)
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <send_cmd+0x270>
		{
			data[1] = 'F';
 8001d8e:	2108      	movs	r1, #8
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2246      	movs	r2, #70	; 0x46
 8001d94:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	225f      	movs	r2, #95	; 0x5f
 8001d9a:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + 5;
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2235      	movs	r2, #53	; 0x35
 8001da0:	70da      	strb	r2, [r3, #3]
 8001da2:	e013      	b.n	8001dcc <send_cmd+0x298>
		}
		else if (x == 1)
 8001da4:	1dfb      	adds	r3, r7, #7
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10e      	bne.n	8001dcc <send_cmd+0x298>
		{
			data[1] = 'I';
 8001dae:	2108      	movs	r1, #8
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2249      	movs	r2, #73	; 0x49
 8001db4:	705a      	strb	r2, [r3, #1]
			data[2] = '_';
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	225f      	movs	r2, #95	; 0x5f
 8001dba:	709a      	strb	r2, [r3, #2]
			data[3] = 48 + last_focus;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <send_cmd+0x2bc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3330      	adds	r3, #48	; 0x30
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	70da      	strb	r2, [r3, #3]
		}
		//		data[1] = 'F';
		//		data[2] = '_';
		//		data[3] = 48 + 4;
		HAL_UART_Transmit(&huart1, &data[0], 5, 100);
 8001dcc:	2308      	movs	r3, #8
 8001dce:	18f9      	adds	r1, r7, r3
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <send_cmd+0x2b8>)
 8001dd2:	2364      	movs	r3, #100	; 0x64
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	f003 f8fb 	bl	8004fd0 <HAL_UART_Transmit>
		break;
 8001dda:	e000      	b.n	8001dde <send_cmd+0x2aa>
		break;
 8001ddc:	46c0      	nop			; (mov r8, r8)
	}
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	08006434 	.word	0x08006434
 8001dec:	20000198 	.word	0x20000198
 8001df0:	200000b1 	.word	0x200000b1

08001df4 <page1_print>:

void page1_print(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
	char buffer[3];
	lcd_puts(0, 0, (int8_t *)"______ COGNATE _____");
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <page1_print+0x168>)
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7fe fde5 	bl	80009d0 <lcd_puts>
	lcd_puts(1, 1, (int8_t *)"INTEN");
 8001e06:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <page1_print+0x16c>)
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7fe fddf 	bl	80009d0 <lcd_puts>
	lcd_puts(2, 1, (int8_t *)"COLOR");
 8001e12:	4b54      	ldr	r3, [pc, #336]	; (8001f64 <page1_print+0x170>)
 8001e14:	001a      	movs	r2, r3
 8001e16:	2101      	movs	r1, #1
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f7fe fdd9 	bl	80009d0 <lcd_puts>
	lcd_puts(3, 1, (int8_t *)"SENSR");
 8001e1e:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <page1_print+0x174>)
 8001e20:	001a      	movs	r2, r3
 8001e22:	2101      	movs	r1, #1
 8001e24:	2003      	movs	r0, #3
 8001e26:	f7fe fdd3 	bl	80009d0 <lcd_puts>
	lcd_puts(1, 11, (int8_t *)"LAMP");
 8001e2a:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <page1_print+0x178>)
 8001e2c:	001a      	movs	r2, r3
 8001e2e:	210b      	movs	r1, #11
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7fe fdcd 	bl	80009d0 <lcd_puts>
	lcd_puts(2, 11, (int8_t *)"ENDO");
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <page1_print+0x17c>)
 8001e38:	001a      	movs	r2, r3
 8001e3a:	210b      	movs	r1, #11
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f7fe fdc7 	bl	80009d0 <lcd_puts>
	lcd_puts(3, 11, (int8_t *)"DEPTH");
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <page1_print+0x180>)
 8001e44:	001a      	movs	r2, r3
 8001e46:	210b      	movs	r1, #11
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f7fe fdc1 	bl	80009d0 <lcd_puts>

	//	lcd_puts(1, 0, (int8_t *)">");

	sprintf(buffer, "%02d", data_reg.intensity);
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <page1_print+0x184>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	071b      	lsls	r3, r3, #28
 8001e54:	0f1b      	lsrs	r3, r3, #28
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	001a      	movs	r2, r3
 8001e5a:	4948      	ldr	r1, [pc, #288]	; (8001f7c <page1_print+0x188>)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f003 fd30 	bl	80058c4 <siprintf>
	lcd_puts(1, 7, (int8_t *)buffer);
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	001a      	movs	r2, r3
 8001e68:	2107      	movs	r1, #7
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f7fe fdb0 	bl	80009d0 <lcd_puts>

	sprintf(buffer, "%02d", data_reg.color);
 8001e70:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <page1_print+0x184>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	001a      	movs	r2, r3
 8001e78:	4940      	ldr	r1, [pc, #256]	; (8001f7c <page1_print+0x188>)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f003 fd21 	bl	80058c4 <siprintf>
	lcd_puts(2, 7, (int8_t *)"NW");
 8001e82:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <page1_print+0x18c>)
 8001e84:	001a      	movs	r2, r3
 8001e86:	2107      	movs	r1, #7
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f7fe fda1 	bl	80009d0 <lcd_puts>

	clr_data(sensor);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f7fe fdf0 	bl	8000a74 <clr_data>
	if (data_reg.sensor)
 8001e94:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <page1_print+0x184>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <page1_print+0xbc>
		lcd_puts(3, 7, (int8_t *)"ON");
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <page1_print+0x190>)
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	2107      	movs	r1, #7
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f7fe fd91 	bl	80009d0 <lcd_puts>
 8001eae:	e005      	b.n	8001ebc <page1_print+0xc8>
	else
		lcd_puts(3, 7, (int8_t *)"OFF");
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <page1_print+0x194>)
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	2107      	movs	r1, #7
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	f7fe fd8a 	bl	80009d0 <lcd_puts>

	clr_data(lamp);
 8001ebc:	2004      	movs	r0, #4
 8001ebe:	f7fe fdd9 	bl	8000a74 <clr_data>
	if (data_reg.lamp)
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <page1_print+0x184>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <page1_print+0xea>
		lcd_puts(1, 17, (int8_t *)"ON");
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <page1_print+0x190>)
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	2111      	movs	r1, #17
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7fe fd7a 	bl	80009d0 <lcd_puts>
 8001edc:	e005      	b.n	8001eea <page1_print+0xf6>
	else
		lcd_puts(1, 17, (int8_t *)"OFF");
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <page1_print+0x194>)
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	2111      	movs	r1, #17
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7fe fd73 	bl	80009d0 <lcd_puts>

	clr_data(endo);
 8001eea:	2005      	movs	r0, #5
 8001eec:	f7fe fdc2 	bl	8000a74 <clr_data>
	if (data_reg.endo)
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <page1_print+0x184>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <page1_print+0x118>
		lcd_puts(2, 17, (int8_t *)"ON");
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <page1_print+0x190>)
 8001f00:	001a      	movs	r2, r3
 8001f02:	2111      	movs	r1, #17
 8001f04:	2002      	movs	r0, #2
 8001f06:	f7fe fd63 	bl	80009d0 <lcd_puts>
 8001f0a:	e005      	b.n	8001f18 <page1_print+0x124>
	else
		lcd_puts(2, 17, (int8_t *)"OFF");
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <page1_print+0x194>)
 8001f0e:	001a      	movs	r2, r3
 8001f10:	2111      	movs	r1, #17
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7fe fd5c 	bl	80009d0 <lcd_puts>

	clr_data(depth);
 8001f18:	2006      	movs	r0, #6
 8001f1a:	f7fe fdab 	bl	8000a74 <clr_data>
	if (data_reg.depth)
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <page1_print+0x184>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	227f      	movs	r2, #127	; 0x7f
 8001f24:	4393      	bics	r3, r2
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <page1_print+0x146>
		lcd_puts(3, 17, (int8_t *)"ON");
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <page1_print+0x190>)
 8001f2e:	001a      	movs	r2, r3
 8001f30:	2111      	movs	r1, #17
 8001f32:	2003      	movs	r0, #3
 8001f34:	f7fe fd4c 	bl	80009d0 <lcd_puts>
 8001f38:	e005      	b.n	8001f46 <page1_print+0x152>
	else
		lcd_puts(3, 17, (int8_t *)"OFF");
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <page1_print+0x194>)
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2111      	movs	r1, #17
 8001f40:	2003      	movs	r0, #3
 8001f42:	f7fe fd45 	bl	80009d0 <lcd_puts>

	lcd_puts(1, 0, (int8_t *)">");
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <page1_print+0x198>)
 8001f48:	001a      	movs	r2, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7fe fd3f 	bl	80009d0 <lcd_puts>
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	08006350 	.word	0x08006350
 8001f60:	08006368 	.word	0x08006368
 8001f64:	08006370 	.word	0x08006370
 8001f68:	08006378 	.word	0x08006378
 8001f6c:	08006380 	.word	0x08006380
 8001f70:	08006388 	.word	0x08006388
 8001f74:	08006390 	.word	0x08006390
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	080062e4 	.word	0x080062e4
 8001f80:	0800634c 	.word	0x0800634c
 8001f84:	080062ec 	.word	0x080062ec
 8001f88:	080062f0 	.word	0x080062f0
 8001f8c:	080062f4 	.word	0x080062f4

08001f90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	801a      	strh	r2, [r3, #0]

	static uint32_t _time;

	if ((HAL_GetTick() - _time) >= 100)
 8001f9c:	f000 ff0a 	bl	8002db4 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x34>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b63      	cmp	r3, #99	; 0x63
 8001faa:	d905      	bls.n	8001fb8 <HAL_GPIO_EXTI_Callback+0x28>
		// {
		// 	//			interrupt_reg.key_flag = 1;
		// 	//			key_pressed.prv =1;
		// }

		_time = HAL_GetTick();
 8001fac:	f000 ff02 	bl	8002db4 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x34>)
 8001fb4:	601a      	str	r2, [r3, #0]

	else
	{
		__NOP();
	}
}
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_EXTI_Callback+0x2a>
		__NOP();
 8001fb8:	46c0      	nop			; (mov r8, r8)
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	20000224 	.word	0x20000224

08001fc8 <beep_sound>:

void beep_sound()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001fcc:	2390      	movs	r3, #144	; 0x90
 8001fce:	05db      	lsls	r3, r3, #23
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f001 f986 	bl	80032e6 <HAL_GPIO_WritePin>
	HAL_Delay(35);
 8001fda:	2023      	movs	r0, #35	; 0x23
 8001fdc:	f000 fef4 	bl	8002dc8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001fe0:	2390      	movs	r3, #144	; 0x90
 8001fe2:	05db      	lsls	r3, r3, #23
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f001 f97c 	bl	80032e6 <HAL_GPIO_WritePin>
	HAL_Delay(35);
 8001fee:	2023      	movs	r0, #35	; 0x23
 8001ff0:	f000 feea 	bl	8002dc8 <HAL_Delay>
	//	beep_sound_flag = 0;
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002002:	f000 fe7d 	bl	8002d00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002006:	f000 fac3 	bl	8002590 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800200a:	f000 fbe3 	bl	80027d4 <MX_GPIO_Init>
	MX_TIM6_Init();
 800200e:	f000 fb63 	bl	80026d8 <MX_TIM6_Init>
	MX_I2C1_Init();
 8002012:	f000 fb21 	bl	8002658 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002016:	f000 fbab 	bl	8002770 <MX_USART1_UART_Init>
	MX_TIM14_Init();
 800201a:	f000 fb81 	bl	8002720 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 800201e:	4bba      	ldr	r3, [pc, #744]	; (8002308 <main+0x30c>)
 8002020:	0018      	movs	r0, r3
 8002022:	f002 fd9f 	bl	8004b64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8002026:	4bb9      	ldr	r3, [pc, #740]	; (800230c <main+0x310>)
 8002028:	0018      	movs	r0, r3
 800202a:	f002 fd9b 	bl	8004b64 <HAL_TIM_Base_Start_IT>
	//	HAL_Delay(1000);
	//	home_page();
	//	HAL_Delay(1000);
	//	lcd_clear();

	HAL_Delay(100);
 800202e:	2064      	movs	r0, #100	; 0x64
 8002030:	f000 feca 	bl	8002dc8 <HAL_Delay>
	lcd_init();
 8002034:	f7fe fb8e 	bl	8000754 <lcd_init>
	HAL_Delay(100);
 8002038:	2064      	movs	r0, #100	; 0x64
 800203a:	f000 fec5 	bl	8002dc8 <HAL_Delay>
	home_page();
 800203e:	f7fe feb1 	bl	8000da4 <home_page>
	HAL_Delay(100);
 8002042:	2064      	movs	r0, #100	; 0x64
 8002044:	f000 fec0 	bl	8002dc8 <HAL_Delay>
	lcd_clear();
 8002048:	f7fe fe1e 	bl	8000c88 <lcd_clear>
	page1_print();
 800204c:	f7ff fed2 	bl	8001df4 <page1_print>
	HAL_Delay(100);
 8002050:	2064      	movs	r0, #100	; 0x64
 8002052:	f000 feb9 	bl	8002dc8 <HAL_Delay>
	//  	data_reg.sensor = 1;
	init_gesture();
 8002056:	f7fe f8ed 	bl	8000234 <init_gesture>
	HAL_Delay(100);
 800205a:	2064      	movs	r0, #100	; 0x64
 800205c:	f000 feb4 	bl	8002dc8 <HAL_Delay>
	uint8_t sns_status = 0;
 8002060:	230e      	movs	r3, #14
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
	uint8_t page_change_flag = 0;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]

	data_reg.sensor = 0;
 8002070:	4ba7      	ldr	r3, [pc, #668]	; (8002310 <main+0x314>)
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	2110      	movs	r1, #16
 8002076:	438a      	bics	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]

	uint32_t temp_time = HAL_GetTick();
 800207a:	f000 fe9b 	bl	8002db4 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	60bb      	str	r3, [r7, #8]
	HAL_Delay(10);
 8002082:	200a      	movs	r0, #10
 8002084:	f000 fea0 	bl	8002dc8 <HAL_Delay>

	pg3_sm = off;
 8002088:	4ba2      	ldr	r3, [pc, #648]	; (8002314 <main+0x318>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
	pg3_md = off;
 800208e:	4ba2      	ldr	r3, [pc, #648]	; (8002318 <main+0x31c>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
	pg3_wd = off;
 8002094:	4ba1      	ldr	r3, [pc, #644]	; (800231c <main+0x320>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]

	send_cmd(1, intensity); // F1
 800209a:	2101      	movs	r1, #1
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff fd49 	bl	8001b34 <send_cmd>
	send_cmd(1, lamp);		// F2
 80020a2:	2104      	movs	r1, #4
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7ff fd45 	bl	8001b34 <send_cmd>
	send_cmd(0, endo);		// F3
 80020aa:	2105      	movs	r1, #5
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff fd41 	bl	8001b34 <send_cmd>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin) == 0)
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	4a9a      	ldr	r2, [pc, #616]	; (8002320 <main+0x324>)
 80020b8:	0019      	movs	r1, r3
 80020ba:	0010      	movs	r0, r2
 80020bc:	f001 f8f6 	bl	80032ac <HAL_GPIO_ReadPin>
 80020c0:	1e03      	subs	r3, r0, #0
 80020c2:	d109      	bne.n	80020d8 <main+0xdc>
		{
			interrupt_reg.key_flag = 1;
 80020c4:	4a97      	ldr	r2, [pc, #604]	; (8002324 <main+0x328>)
 80020c6:	7813      	ldrb	r3, [r2, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	430b      	orrs	r3, r1
 80020cc:	7013      	strb	r3, [r2, #0]
			key_pressed.prv = 1;
 80020ce:	4a96      	ldr	r2, [pc, #600]	; (8002328 <main+0x32c>)
 80020d0:	7813      	ldrb	r3, [r2, #0]
 80020d2:	2101      	movs	r1, #1
 80020d4:	430b      	orrs	r3, r1
 80020d6:	7013      	strb	r3, [r2, #0]
		}

		if (HAL_GPIO_ReadPin(S_NEXT_GPIO_Port, S_NEXT_Pin) == 0)
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	015b      	lsls	r3, r3, #5
 80020dc:	4a90      	ldr	r2, [pc, #576]	; (8002320 <main+0x324>)
 80020de:	0019      	movs	r1, r3
 80020e0:	0010      	movs	r0, r2
 80020e2:	f001 f8e3 	bl	80032ac <HAL_GPIO_ReadPin>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d109      	bne.n	80020fe <main+0x102>
		{
			interrupt_reg.key_flag = 1;
 80020ea:	4a8e      	ldr	r2, [pc, #568]	; (8002324 <main+0x328>)
 80020ec:	7813      	ldrb	r3, [r2, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	430b      	orrs	r3, r1
 80020f2:	7013      	strb	r3, [r2, #0]
			key_pressed.nxt = 1;
 80020f4:	4a8c      	ldr	r2, [pc, #560]	; (8002328 <main+0x32c>)
 80020f6:	7813      	ldrb	r3, [r2, #0]
 80020f8:	2102      	movs	r1, #2
 80020fa:	430b      	orrs	r3, r1
 80020fc:	7013      	strb	r3, [r2, #0]
		}

		if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin) == 0)
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	4a87      	ldr	r2, [pc, #540]	; (8002320 <main+0x324>)
 8002104:	0019      	movs	r1, r3
 8002106:	0010      	movs	r0, r2
 8002108:	f001 f8d0 	bl	80032ac <HAL_GPIO_ReadPin>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d109      	bne.n	8002124 <main+0x128>
		{
			interrupt_reg.key_flag = 1;
 8002110:	4a84      	ldr	r2, [pc, #528]	; (8002324 <main+0x328>)
 8002112:	7813      	ldrb	r3, [r2, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	430b      	orrs	r3, r1
 8002118:	7013      	strb	r3, [r2, #0]
			key_pressed.depth = 1;
 800211a:	4a83      	ldr	r2, [pc, #524]	; (8002328 <main+0x32c>)
 800211c:	7813      	ldrb	r3, [r2, #0]
 800211e:	2104      	movs	r1, #4
 8002120:	430b      	orrs	r3, r1
 8002122:	7013      	strb	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(CHANGE_N_GPIO_Port, CHANGE_N_Pin) == 0)
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	4a7d      	ldr	r2, [pc, #500]	; (8002320 <main+0x324>)
 800212a:	0019      	movs	r1, r3
 800212c:	0010      	movs	r0, r2
 800212e:	f001 f8bd 	bl	80032ac <HAL_GPIO_ReadPin>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d109      	bne.n	800214a <main+0x14e>
		{

			key_pressed.neg = 1;
 8002136:	4a7c      	ldr	r2, [pc, #496]	; (8002328 <main+0x32c>)
 8002138:	7813      	ldrb	r3, [r2, #0]
 800213a:	2110      	movs	r1, #16
 800213c:	430b      	orrs	r3, r1
 800213e:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8002140:	4a78      	ldr	r2, [pc, #480]	; (8002324 <main+0x328>)
 8002142:	7813      	ldrb	r3, [r2, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	430b      	orrs	r3, r1
 8002148:	7013      	strb	r3, [r2, #0]
		}

		if (HAL_GPIO_ReadPin(CHANGE_P_GPIO_Port, CHANGE_P_Pin) == 0)
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	00da      	lsls	r2, r3, #3
 800214e:	2390      	movs	r3, #144	; 0x90
 8002150:	05db      	lsls	r3, r3, #23
 8002152:	0011      	movs	r1, r2
 8002154:	0018      	movs	r0, r3
 8002156:	f001 f8a9 	bl	80032ac <HAL_GPIO_ReadPin>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d109      	bne.n	8002172 <main+0x176>
		{

			key_pressed.pos = 1;
 800215e:	4a72      	ldr	r2, [pc, #456]	; (8002328 <main+0x32c>)
 8002160:	7813      	ldrb	r3, [r2, #0]
 8002162:	2108      	movs	r1, #8
 8002164:	430b      	orrs	r3, r1
 8002166:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 1;
 8002168:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <main+0x328>)
 800216a:	7813      	ldrb	r3, [r2, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	430b      	orrs	r3, r1
 8002170:	7013      	strb	r3, [r2, #0]
		}

		if (interrupt_reg.key_flag)
 8002172:	4b6c      	ldr	r3, [pc, #432]	; (8002324 <main+0x328>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	07db      	lsls	r3, r3, #31
 8002178:	0fdb      	lsrs	r3, r3, #31
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d100      	bne.n	8002182 <main+0x186>
 8002180:	e106      	b.n	8002390 <main+0x394>
		{

			if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin) == 0)
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	4a66      	ldr	r2, [pc, #408]	; (8002320 <main+0x324>)
 8002188:	0019      	movs	r1, r3
 800218a:	0010      	movs	r0, r2
 800218c:	f001 f88e 	bl	80032ac <HAL_GPIO_ReadPin>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d131      	bne.n	80021f8 <main+0x1fc>
			{
				temp_time = HAL_GetTick();
 8002194:	f000 fe0e 	bl	8002db4 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	60bb      	str	r3, [r7, #8]
				// temp_time = tt_cnt;
				HAL_Delay(50);
 800219c:	2032      	movs	r0, #50	; 0x32
 800219e:	f000 fe13 	bl	8002dc8 <HAL_Delay>
				while ((HAL_GetTick() - temp_time) <= 2000) // while ((tt_cnt - temp_time) >= 5000) // while ((HAL_GetTick() - temp_time) >= 5000)  // error tt_cnt
 80021a2:	e020      	b.n	80021e6 <main+0x1ea>
				{
					if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin))
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <main+0x324>)
 80021aa:	0019      	movs	r1, r3
 80021ac:	0010      	movs	r0, r2
 80021ae:	f001 f87d 	bl	80032ac <HAL_GPIO_ReadPin>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d00a      	beq.n	80021cc <main+0x1d0>
					{
						interrupt_reg.key_flag = 1;
 80021b6:	4a5b      	ldr	r2, [pc, #364]	; (8002324 <main+0x328>)
 80021b8:	7813      	ldrb	r3, [r2, #0]
 80021ba:	2101      	movs	r1, #1
 80021bc:	430b      	orrs	r3, r1
 80021be:	7013      	strb	r3, [r2, #0]
						interrupt_reg.prv_long_press = 0;
 80021c0:	4a58      	ldr	r2, [pc, #352]	; (8002324 <main+0x328>)
 80021c2:	7813      	ldrb	r3, [r2, #0]
 80021c4:	2108      	movs	r1, #8
 80021c6:	438b      	bics	r3, r1
 80021c8:	7013      	strb	r3, [r2, #0]
						break;
 80021ca:	e015      	b.n	80021f8 <main+0x1fc>
					}
					interrupt_reg.key_flag = 0;
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <main+0x328>)
 80021ce:	7813      	ldrb	r3, [r2, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	438b      	bics	r3, r1
 80021d4:	7013      	strb	r3, [r2, #0]
					interrupt_reg.prv_long_press = 1;
 80021d6:	4a53      	ldr	r2, [pc, #332]	; (8002324 <main+0x328>)
 80021d8:	7813      	ldrb	r3, [r2, #0]
 80021da:	2108      	movs	r1, #8
 80021dc:	430b      	orrs	r3, r1
 80021de:	7013      	strb	r3, [r2, #0]
					HAL_Delay(50);
 80021e0:	2032      	movs	r0, #50	; 0x32
 80021e2:	f000 fdf1 	bl	8002dc8 <HAL_Delay>
				while ((HAL_GetTick() - temp_time) <= 2000) // while ((tt_cnt - temp_time) >= 5000) // while ((HAL_GetTick() - temp_time) >= 5000)  // error tt_cnt
 80021e6:	f000 fde5 	bl	8002db4 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	23fa      	movs	r3, #250	; 0xfa
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d9d5      	bls.n	80021a4 <main+0x1a8>
				}
			}

			if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin) == 0)
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	019b      	lsls	r3, r3, #6
 80021fc:	4a48      	ldr	r2, [pc, #288]	; (8002320 <main+0x324>)
 80021fe:	0019      	movs	r1, r3
 8002200:	0010      	movs	r0, r2
 8002202:	f001 f853 	bl	80032ac <HAL_GPIO_ReadPin>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d12d      	bne.n	8002266 <main+0x26a>
			{
				temp_time = HAL_GetTick();
 800220a:	f000 fdd3 	bl	8002db4 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	60bb      	str	r3, [r7, #8]
				HAL_Delay(50);
 8002212:	2032      	movs	r0, #50	; 0x32
 8002214:	f000 fdd8 	bl	8002dc8 <HAL_Delay>
				while ((HAL_GetTick() - temp_time) <= 5000)
 8002218:	e01d      	b.n	8002256 <main+0x25a>
				{
					if (HAL_GPIO_ReadPin(DEPTH_GPIO_Port, DEPTH_Pin))
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	4a40      	ldr	r2, [pc, #256]	; (8002320 <main+0x324>)
 8002220:	0019      	movs	r1, r3
 8002222:	0010      	movs	r0, r2
 8002224:	f001 f842 	bl	80032ac <HAL_GPIO_ReadPin>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d00a      	beq.n	8002242 <main+0x246>
					{
						interrupt_reg.key_flag = 1;
 800222c:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <main+0x328>)
 800222e:	7813      	ldrb	r3, [r2, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	430b      	orrs	r3, r1
 8002234:	7013      	strb	r3, [r2, #0]
						interrupt_reg.depth_long_press = 0;
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <main+0x328>)
 8002238:	7813      	ldrb	r3, [r2, #0]
 800223a:	2110      	movs	r1, #16
 800223c:	438b      	bics	r3, r1
 800223e:	7013      	strb	r3, [r2, #0]
						break;
 8002240:	e011      	b.n	8002266 <main+0x26a>
					}
					interrupt_reg.key_flag = 0;
 8002242:	4a38      	ldr	r2, [pc, #224]	; (8002324 <main+0x328>)
 8002244:	7813      	ldrb	r3, [r2, #0]
 8002246:	2101      	movs	r1, #1
 8002248:	438b      	bics	r3, r1
 800224a:	7013      	strb	r3, [r2, #0]
					interrupt_reg.depth_long_press = 1;
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <main+0x328>)
 800224e:	7813      	ldrb	r3, [r2, #0]
 8002250:	2110      	movs	r1, #16
 8002252:	430b      	orrs	r3, r1
 8002254:	7013      	strb	r3, [r2, #0]
				while ((HAL_GetTick() - temp_time) <= 5000)
 8002256:	f000 fdad 	bl	8002db4 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	4a32      	ldr	r2, [pc, #200]	; (800232c <main+0x330>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d9d9      	bls.n	800221a <main+0x21e>
				}
			}

			if (interrupt_reg.key_flag)
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <main+0x328>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	07db      	lsls	r3, r3, #31
 800226c:	0fdb      	lsrs	r3, r3, #31
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d012      	beq.n	800229a <main+0x29e>
			{
				beep_sound();
 8002274:	f7ff fea8 	bl	8001fc8 <beep_sound>
				// if (!data_reg.sensor)
				// {
				update_key_press();
 8002278:	f7fe fde4 	bl	8000e44 <update_key_press>
				interrupt_reg.key_flag = 0;
 800227c:	4a29      	ldr	r2, [pc, #164]	; (8002324 <main+0x328>)
 800227e:	7813      	ldrb	r3, [r2, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	438b      	bics	r3, r1
 8002284:	7013      	strb	r3, [r2, #0]
				interrupt_reg.update_data = 1;
 8002286:	4a27      	ldr	r2, [pc, #156]	; (8002324 <main+0x328>)
 8002288:	7813      	ldrb	r3, [r2, #0]
 800228a:	2120      	movs	r1, #32
 800228c:	430b      	orrs	r3, r1
 800228e:	7013      	strb	r3, [r2, #0]
				// }

				interrupt_reg.key_flag = 0;
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <main+0x328>)
 8002292:	7813      	ldrb	r3, [r2, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	438b      	bics	r3, r1
 8002298:	7013      	strb	r3, [r2, #0]
			}

			if (interrupt_reg.prv_long_press)
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <main+0x328>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	071b      	lsls	r3, r3, #28
 80022a0:	0fdb      	lsrs	r3, r3, #31
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d04f      	beq.n	8002348 <main+0x34c>
			{
				beep_sound();
 80022a8:	f7ff fe8e 	bl	8001fc8 <beep_sound>
				interrupt_reg.prv_long_press = 0;
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <main+0x328>)
 80022ae:	7813      	ldrb	r3, [r2, #0]
 80022b0:	2108      	movs	r1, #8
 80022b2:	438b      	bics	r3, r1
 80022b4:	7013      	strb	r3, [r2, #0]
				key_pressed.prv = 0;
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <main+0x32c>)
 80022b8:	7813      	ldrb	r3, [r2, #0]
 80022ba:	2101      	movs	r1, #1
 80022bc:	438b      	bics	r3, r1
 80022be:	7013      	strb	r3, [r2, #0]
				// interrupt_reg.update_data = 0;
				data_reg.sensor = !data_reg.sensor;
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <main+0x314>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2210      	movs	r2, #16
 80022c6:	4013      	ands	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	425a      	negs	r2, r3
 80022cc:	4153      	adcs	r3, r2
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <main+0x314>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	400a      	ands	r2, r1
 80022d6:	0110      	lsls	r0, r2, #4
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	2110      	movs	r1, #16
 80022dc:	438a      	bics	r2, r1
 80022de:	1c11      	adds	r1, r2, #0
 80022e0:	1c02      	adds	r2, r0, #0
 80022e2:	430a      	orrs	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]
				clr_data(sensor);
 80022e6:	2003      	movs	r0, #3
 80022e8:	f7fe fbc4 	bl	8000a74 <clr_data>
				if (data_reg.sensor)
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <main+0x314>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2210      	movs	r2, #16
 80022f2:	4013      	ands	r3, r2
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01c      	beq.n	8002334 <main+0x338>
					lcd_puts(3, 7, (int8_t *)"ON");
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <main+0x334>)
 80022fc:	001a      	movs	r2, r3
 80022fe:	2107      	movs	r1, #7
 8002300:	2003      	movs	r0, #3
 8002302:	f7fe fb65 	bl	80009d0 <lcd_puts>
 8002306:	e01b      	b.n	8002340 <main+0x344>
 8002308:	20000108 	.word	0x20000108
 800230c:	20000150 	.word	0x20000150
 8002310:	20000008 	.word	0x20000008
 8002314:	200000a0 	.word	0x200000a0
 8002318:	200000a1 	.word	0x200000a1
 800231c:	200000a2 	.word	0x200000a2
 8002320:	48000400 	.word	0x48000400
 8002324:	200000b0 	.word	0x200000b0
 8002328:	200000ac 	.word	0x200000ac
 800232c:	00001388 	.word	0x00001388
 8002330:	080062ec 	.word	0x080062ec
				else
					lcd_puts(3, 7, (int8_t *)"OFF");
 8002334:	4b8d      	ldr	r3, [pc, #564]	; (800256c <main+0x570>)
 8002336:	001a      	movs	r2, r3
 8002338:	2107      	movs	r1, #7
 800233a:	2003      	movs	r0, #3
 800233c:	f7fe fb48 	bl	80009d0 <lcd_puts>
				sns_status = 1;
 8002340:	230e      	movs	r3, #14
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
			}

			if (interrupt_reg.depth_long_press)
 8002348:	4b89      	ldr	r3, [pc, #548]	; (8002570 <main+0x574>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	06db      	lsls	r3, r3, #27
 800234e:	0fdb      	lsrs	r3, r3, #31
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01c      	beq.n	8002390 <main+0x394>
			{
				//				lcd_puts(0, 0, (int8_t *)"...");
				page_change_flag = 1;
 8002356:	230f      	movs	r3, #15
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
				beep_sound();
 800235e:	f7ff fe33 	bl	8001fc8 <beep_sound>
				current_pos.key_number = _depth;
 8002362:	4b84      	ldr	r3, [pc, #528]	; (8002574 <main+0x578>)
 8002364:	785a      	ldrb	r2, [r3, #1]
 8002366:	2107      	movs	r1, #7
 8002368:	438a      	bics	r2, r1
 800236a:	1c11      	adds	r1, r2, #0
 800236c:	2202      	movs	r2, #2
 800236e:	430a      	orrs	r2, r1
 8002370:	705a      	strb	r2, [r3, #1]
				interrupt_reg.depth_long_press = 0;
 8002372:	4a7f      	ldr	r2, [pc, #508]	; (8002570 <main+0x574>)
 8002374:	7813      	ldrb	r3, [r2, #0]
 8002376:	2110      	movs	r1, #16
 8002378:	438b      	bics	r3, r1
 800237a:	7013      	strb	r3, [r2, #0]
				key_pressed.depth = 0;
 800237c:	4a7e      	ldr	r2, [pc, #504]	; (8002578 <main+0x57c>)
 800237e:	7813      	ldrb	r3, [r2, #0]
 8002380:	2104      	movs	r1, #4
 8002382:	438b      	bics	r3, r1
 8002384:	7013      	strb	r3, [r2, #0]
				interrupt_reg.key_flag = 0;
 8002386:	4a7a      	ldr	r2, [pc, #488]	; (8002570 <main+0x574>)
 8002388:	7813      	ldrb	r3, [r2, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	438b      	bics	r3, r1
 800238e:	7013      	strb	r3, [r2, #0]
			//				interrupt_reg.gesture_flag = 0;
			//				interrupt_reg.update_data = 1;
			//			}
		}

		if (data_reg.sensor)
 8002390:	4b7a      	ldr	r3, [pc, #488]	; (800257c <main+0x580>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2210      	movs	r2, #16
 8002396:	4013      	ands	r3, r2
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d055      	beq.n	800244a <main+0x44e>
		{
			HAL_Delay(10);
 800239e:	200a      	movs	r0, #10
 80023a0:	f000 fd12 	bl	8002dc8 <HAL_Delay>
			//			test[0] = 's';
			//			test[1] = '0';
			if (gestureAvailable())
 80023a4:	f7fe f942 	bl	800062c <gestureAvailable>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d04e      	beq.n	800244a <main+0x44e>
			{
				//				test[1] = 'L';
				//				HAL_UART_Transmit(&huart1, &test[0], 5, 100);
				uint8_t gesture = readGesture();
 80023ac:	1dfc      	adds	r4, r7, #7
 80023ae:	f7fe f827 	bl	8000400 <readGesture>
 80023b2:	0003      	movs	r3, r0
 80023b4:	7023      	strb	r3, [r4, #0]
				switch (gesture)
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d035      	beq.n	800242a <main+0x42e>
 80023be:	dc43      	bgt.n	8002448 <main+0x44c>
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d023      	beq.n	800240c <main+0x410>
 80023c4:	dc40      	bgt.n	8002448 <main+0x44c>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <main+0x3d4>
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d00f      	beq.n	80023ee <main+0x3f2>
					// lcd_puts(2, 1, (int8_t *)"RRRR");
					interrupt_reg.update_data = 1;
					break;

				default:
					break;
 80023ce:	e03b      	b.n	8002448 <main+0x44c>
					beep_sound();
 80023d0:	f7ff fdfa 	bl	8001fc8 <beep_sound>
					key_pressed.prv = 1;
 80023d4:	4a68      	ldr	r2, [pc, #416]	; (8002578 <main+0x57c>)
 80023d6:	7813      	ldrb	r3, [r2, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	430b      	orrs	r3, r1
 80023dc:	7013      	strb	r3, [r2, #0]
					update_key_press();
 80023de:	f7fe fd31 	bl	8000e44 <update_key_press>
					interrupt_reg.update_data = 1;
 80023e2:	4a63      	ldr	r2, [pc, #396]	; (8002570 <main+0x574>)
 80023e4:	7813      	ldrb	r3, [r2, #0]
 80023e6:	2120      	movs	r1, #32
 80023e8:	430b      	orrs	r3, r1
 80023ea:	7013      	strb	r3, [r2, #0]
					break;
 80023ec:	e02d      	b.n	800244a <main+0x44e>
					beep_sound();
 80023ee:	f7ff fdeb 	bl	8001fc8 <beep_sound>
					key_pressed.nxt = 1;
 80023f2:	4a61      	ldr	r2, [pc, #388]	; (8002578 <main+0x57c>)
 80023f4:	7813      	ldrb	r3, [r2, #0]
 80023f6:	2102      	movs	r1, #2
 80023f8:	430b      	orrs	r3, r1
 80023fa:	7013      	strb	r3, [r2, #0]
					update_key_press();
 80023fc:	f7fe fd22 	bl	8000e44 <update_key_press>
					interrupt_reg.update_data = 1;
 8002400:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <main+0x574>)
 8002402:	7813      	ldrb	r3, [r2, #0]
 8002404:	2120      	movs	r1, #32
 8002406:	430b      	orrs	r3, r1
 8002408:	7013      	strb	r3, [r2, #0]
					break;
 800240a:	e01e      	b.n	800244a <main+0x44e>
					beep_sound();
 800240c:	f7ff fddc 	bl	8001fc8 <beep_sound>
					key_pressed.neg = 1;
 8002410:	4a59      	ldr	r2, [pc, #356]	; (8002578 <main+0x57c>)
 8002412:	7813      	ldrb	r3, [r2, #0]
 8002414:	2110      	movs	r1, #16
 8002416:	430b      	orrs	r3, r1
 8002418:	7013      	strb	r3, [r2, #0]
					update_key_press();
 800241a:	f7fe fd13 	bl	8000e44 <update_key_press>
					interrupt_reg.update_data = 1;
 800241e:	4a54      	ldr	r2, [pc, #336]	; (8002570 <main+0x574>)
 8002420:	7813      	ldrb	r3, [r2, #0]
 8002422:	2120      	movs	r1, #32
 8002424:	430b      	orrs	r3, r1
 8002426:	7013      	strb	r3, [r2, #0]
					break;
 8002428:	e00f      	b.n	800244a <main+0x44e>
					beep_sound();
 800242a:	f7ff fdcd 	bl	8001fc8 <beep_sound>
					key_pressed.pos = 1;
 800242e:	4a52      	ldr	r2, [pc, #328]	; (8002578 <main+0x57c>)
 8002430:	7813      	ldrb	r3, [r2, #0]
 8002432:	2108      	movs	r1, #8
 8002434:	430b      	orrs	r3, r1
 8002436:	7013      	strb	r3, [r2, #0]
					update_key_press();
 8002438:	f7fe fd04 	bl	8000e44 <update_key_press>
					interrupt_reg.update_data = 1;
 800243c:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <main+0x574>)
 800243e:	7813      	ldrb	r3, [r2, #0]
 8002440:	2120      	movs	r1, #32
 8002442:	430b      	orrs	r3, r1
 8002444:	7013      	strb	r3, [r2, #0]
					break;
 8002446:	e000      	b.n	800244a <main+0x44e>
					break;
 8002448:	46c0      	nop			; (mov r8, r8)
				}
			}
		}

		if (interrupt_reg.update_data)
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <main+0x574>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	069b      	lsls	r3, r3, #26
 8002450:	0fdb      	lsrs	r3, r3, #31
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d064      	beq.n	8002522 <main+0x526>
		{
			//			char buffers[3];
			update_new_data();
 8002458:	f7fe ff0c 	bl	8001274 <update_new_data>

			if (current_pos.position_cursor == 7)
 800245c:	4b45      	ldr	r3, [pc, #276]	; (8002574 <main+0x578>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b25b      	sxtb	r3, r3
 8002462:	2b07      	cmp	r3, #7
 8002464:	d123      	bne.n	80024ae <main+0x4b2>
				//						lcd_clear();
				//						page_2_print();
				//					}
				//					update_screen_data_2();

				if (pg2_fc == 0)
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <main+0x584>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <main+0x48e>
				{
					//						lcd_clear();
					if (last_pg != 2)
 800246e:	4b45      	ldr	r3, [pc, #276]	; (8002584 <main+0x588>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <main+0x482>
					{
						lcd_clear();
 8002476:	f7fe fc07 	bl	8000c88 <lcd_clear>
						page_2_print();
 800247a:	f7fe ff8d 	bl	8001398 <page_2_print>
					}

					last_pg = 2;
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <main+0x588>)
 8002480:	2202      	movs	r2, #2
 8002482:	701a      	strb	r2, [r3, #0]
					update_screen_data_2();
 8002484:	f7ff f84c 	bl	8001520 <update_screen_data_2>
 8002488:	e046      	b.n	8002518 <main+0x51c>
				}
				else if (pg2_fc == 1)
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <main+0x584>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d142      	bne.n	8002518 <main+0x51c>
				{
					//						lcd_clear();
					if (last_pg != 3)
 8002492:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <main+0x588>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d006      	beq.n	80024a8 <main+0x4ac>
					{
						lcd_clear();
 800249a:	f7fe fbf5 	bl	8000c88 <lcd_clear>
						page_3_print();
 800249e:	f7fe ff91 	bl	80013c4 <page_3_print>
						last_pg = 3;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <main+0x588>)
 80024a4:	2203      	movs	r2, #3
 80024a6:	701a      	strb	r2, [r3, #0]
					}
					//						lcd_clear();
					//						page_3_print();

					update_screen_data_3();
 80024a8:	f7ff f854 	bl	8001554 <update_screen_data_3>
 80024ac:	e034      	b.n	8002518 <main+0x51c>
				}

				//					sprintf(buffers, "%02d", current_pos.position_cursor);
				//					lcd_puts(3, 16, (int8_t *)buffers);
			}
			else if ((current_pos.position_cursor >= 1) || (current_pos.position_cursor <= 6))
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <main+0x578>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dc04      	bgt.n	80024c2 <main+0x4c6>
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <main+0x578>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	2b06      	cmp	r3, #6
 80024c0:	dc2a      	bgt.n	8002518 <main+0x51c>
			{
				if (pg2_fc == 0)
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <main+0x584>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <main+0x4ea>
				{

					if (last_pg != 1)
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <main+0x588>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d003      	beq.n	80024da <main+0x4de>
					{
						lcd_clear();
 80024d2:	f7fe fbd9 	bl	8000c88 <lcd_clear>
						page1_print();
 80024d6:	f7ff fc8d 	bl	8001df4 <page1_print>
					}

					last_pg = 1;
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <main+0x588>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
					update_screen_data();
 80024e0:	f7ff f9c0 	bl	8001864 <update_screen_data>
 80024e4:	e018      	b.n	8002518 <main+0x51c>

					//					sprintf(buffers, "%02d", current_pos.position_cursor);
					//				lcd_puts(2, 16, (int8_t *)buffers);
				}

				else if (pg2_fc == 1)
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <main+0x584>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d114      	bne.n	8002518 <main+0x51c>
				{
					if (current_pos.position_cursor > 3)
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <main+0x578>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	dd02      	ble.n	80024fe <main+0x502>
					{
						current_pos.position_cursor = 7;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <main+0x578>)
 80024fa:	2207      	movs	r2, #7
 80024fc:	701a      	strb	r2, [r3, #0]
					}

					if (last_pg != 3)
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <main+0x588>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d003      	beq.n	800250e <main+0x512>
					{
						lcd_clear();
 8002506:	f7fe fbbf 	bl	8000c88 <lcd_clear>
						page_3_print();
 800250a:	f7fe ff5b 	bl	80013c4 <page_3_print>
					}

					last_pg = 3;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <main+0x588>)
 8002510:	2203      	movs	r2, #3
 8002512:	701a      	strb	r2, [r3, #0]
					update_screen_data_3();
 8002514:	f7ff f81e 	bl	8001554 <update_screen_data_3>
					//					sprintf(buffers, "%02d", current_pos.position_cursor);
					//					lcd_puts(3, 16, (int8_t *)buffers);
				}
			}

			interrupt_reg.update_data = 0;
 8002518:	4a15      	ldr	r2, [pc, #84]	; (8002570 <main+0x574>)
 800251a:	7813      	ldrb	r3, [r2, #0]
 800251c:	2120      	movs	r1, #32
 800251e:	438b      	bics	r3, r1
 8002520:	7013      	strb	r3, [r2, #0]
		}

		if (page_change_flag)
 8002522:	240f      	movs	r4, #15
 8002524:	193b      	adds	r3, r7, r4
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <main+0x568>
		{
			clock_page();
 800252c:	f7fe fbb6 	bl	8000c9c <clock_page>
			Total_Time_Print(tt_cnt); // tt_cnt timer_intrupt
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <main+0x58c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f7fe fbd9 	bl	8000cec <Total_Time_Print>
			HAL_Delay(5000);
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <main+0x590>)
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fc43 	bl	8002dc8 <HAL_Delay>
			lcd_clear();
 8002542:	f7fe fba1 	bl	8000c88 <lcd_clear>
			page1_print();
 8002546:	f7ff fc55 	bl	8001df4 <page1_print>
			page_change_flag = 0;
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
			interrupt_reg.update_data = 0;
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <main+0x574>)
 8002552:	7813      	ldrb	r3, [r2, #0]
 8002554:	2120      	movs	r1, #32
 8002556:	438b      	bics	r3, r1
 8002558:	7013      	strb	r3, [r2, #0]
			interrupt_reg.key_flag = 0;
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <main+0x574>)
 800255c:	7813      	ldrb	r3, [r2, #0]
 800255e:	2101      	movs	r1, #1
 8002560:	438b      	bics	r3, r1
 8002562:	7013      	strb	r3, [r2, #0]
		}
		HAL_Delay(50);
 8002564:	2032      	movs	r0, #50	; 0x32
 8002566:	f000 fc2f 	bl	8002dc8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(S_PRV_GPIO_Port, S_PRV_Pin) == 0)
 800256a:	e5a2      	b.n	80020b2 <main+0xb6>
 800256c:	080062f0 	.word	0x080062f0
 8002570:	200000b0 	.word	0x200000b0
 8002574:	20000004 	.word	0x20000004
 8002578:	200000ac 	.word	0x200000ac
 800257c:	20000008 	.word	0x20000008
 8002580:	2000009f 	.word	0x2000009f
 8002584:	2000009e 	.word	0x2000009e
 8002588:	200000a4 	.word	0x200000a4
 800258c:	00001388 	.word	0x00001388

08002590 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b095      	sub	sp, #84	; 0x54
 8002594:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002596:	2420      	movs	r4, #32
 8002598:	193b      	adds	r3, r7, r4
 800259a:	0018      	movs	r0, r3
 800259c:	2330      	movs	r3, #48	; 0x30
 800259e:	001a      	movs	r2, r3
 80025a0:	2100      	movs	r1, #0
 80025a2:	f003 f9af 	bl	8005904 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a6:	2310      	movs	r3, #16
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	0018      	movs	r0, r3
 80025ac:	2310      	movs	r3, #16
 80025ae:	001a      	movs	r2, r3
 80025b0:	2100      	movs	r1, #0
 80025b2:	f003 f9a7 	bl	8005904 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b6:	003b      	movs	r3, r7
 80025b8:	0018      	movs	r0, r3
 80025ba:	2310      	movs	r3, #16
 80025bc:	001a      	movs	r2, r3
 80025be:	2100      	movs	r1, #0
 80025c0:	f003 f9a0 	bl	8005904 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025c4:	0021      	movs	r1, r4
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2201      	movs	r2, #1
 80025d0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2210      	movs	r2, #16
 80025d6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2202      	movs	r2, #2
 80025dc:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2200      	movs	r2, #0
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	22c0      	movs	r2, #192	; 0xc0
 80025e8:	0352      	lsls	r2, r2, #13
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	2200      	movs	r2, #0
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	0018      	movs	r0, r3
 80025f6:	f001 fd39 	bl	800406c <HAL_RCC_OscConfig>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d001      	beq.n	8002602 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80025fe:	f000 f999 	bl	8002934 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8002602:	2110      	movs	r1, #16
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2207      	movs	r2, #7
 8002608:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2202      	movs	r2, #2
 800260e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2101      	movs	r1, #1
 8002620:	0018      	movs	r0, r3
 8002622:	f002 f83d 	bl	80046a0 <HAL_RCC_ClockConfig>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800262a:	f000 f983 	bl	8002934 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 800262e:	003b      	movs	r3, r7
 8002630:	2221      	movs	r2, #33	; 0x21
 8002632:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002634:	003b      	movs	r3, r7
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800263a:	003b      	movs	r3, r7
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002640:	003b      	movs	r3, r7
 8002642:	0018      	movs	r0, r3
 8002644:	f002 f970 	bl	8004928 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d001      	beq.n	8002650 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800264c:	f000 f972 	bl	8002934 <Error_Handler>
	}
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b015      	add	sp, #84	; 0x54
 8002656:	bd90      	pop	{r4, r7, pc}

08002658 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <MX_I2C1_Init+0x74>)
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <MX_I2C1_Init+0x78>)
 8002660:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0000020B;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_I2C1_Init+0x74>)
 8002664:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <MX_I2C1_Init+0x7c>)
 8002666:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <MX_I2C1_Init+0x74>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <MX_I2C1_Init+0x74>)
 8002670:	2201      	movs	r2, #1
 8002672:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MX_I2C1_Init+0x74>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <MX_I2C1_Init+0x74>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <MX_I2C1_Init+0x74>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_I2C1_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <MX_I2C1_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_I2C1_Init+0x74>)
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fe5f 	bl	8003358 <HAL_I2C_Init>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d001      	beq.n	80026a2 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800269e:	f000 f949 	bl	8002934 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <MX_I2C1_Init+0x74>)
 80026a4:	2100      	movs	r1, #0
 80026a6:	0018      	movs	r0, r3
 80026a8:	f001 fc48 	bl	8003f3c <HAL_I2CEx_ConfigAnalogFilter>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d001      	beq.n	80026b4 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80026b0:	f000 f940 	bl	8002934 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <MX_I2C1_Init+0x74>)
 80026b6:	2100      	movs	r1, #0
 80026b8:	0018      	movs	r0, r3
 80026ba:	f001 fc8b 	bl	8003fd4 <HAL_I2CEx_ConfigDigitalFilter>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80026c2:	f000 f937 	bl	8002934 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200000b4 	.word	0x200000b4
 80026d0:	40005400 	.word	0x40005400
 80026d4:	0000020b 	.word	0x0000020b

080026d8 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	/* USER CODE END TIM6_Init 0 */

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_TIM6_Init+0x38>)
 80026de:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <MX_TIM6_Init+0x3c>)
 80026e0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 32000 - 1;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_TIM6_Init+0x38>)
 80026e4:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <MX_TIM6_Init+0x40>)
 80026e6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_TIM6_Init+0x38>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1000 - 1;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_TIM6_Init+0x38>)
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <MX_TIM6_Init+0x44>)
 80026f2:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_TIM6_Init+0x38>)
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <MX_TIM6_Init+0x38>)
 80026fc:	0018      	movs	r0, r3
 80026fe:	f002 f9e1 	bl	8004ac4 <HAL_TIM_Base_Init>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d001      	beq.n	800270a <MX_TIM6_Init+0x32>
	{
		Error_Handler();
 8002706:	f000 f915 	bl	8002934 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000108 	.word	0x20000108
 8002714:	40001000 	.word	0x40001000
 8002718:	00007cff 	.word	0x00007cff
 800271c:	000003e7 	.word	0x000003e7

08002720 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_TIM14_Init+0x40>)
 8002726:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <MX_TIM14_Init+0x44>)
 8002728:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 32000 - 1;
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <MX_TIM14_Init+0x40>)
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <MX_TIM14_Init+0x48>)
 800272e:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <MX_TIM14_Init+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 3000;
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <MX_TIM14_Init+0x40>)
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <MX_TIM14_Init+0x4c>)
 800273a:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_TIM14_Init+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <MX_TIM14_Init+0x40>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <MX_TIM14_Init+0x40>)
 800274a:	0018      	movs	r0, r3
 800274c:	f002 f9ba 	bl	8004ac4 <HAL_TIM_Base_Init>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM14_Init+0x38>
	{
		Error_Handler();
 8002754:	f000 f8ee 	bl	8002934 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	20000150 	.word	0x20000150
 8002764:	40002000 	.word	0x40002000
 8002768:	00007cff 	.word	0x00007cff
 800276c:	00000bb8 	.word	0x00000bb8

08002770 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 8002776:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <MX_USART1_UART_Init+0x60>)
 8002778:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 800277c:	2296      	movs	r2, #150	; 0x96
 800277e:	0192      	lsls	r2, r2, #6
 8002780:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 8002796:	220c      	movs	r2, #12
 8002798:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80027b2:	4806      	ldr	r0, [pc, #24]	; (80027cc <MX_USART1_UART_Init+0x5c>)
 80027b4:	2300      	movs	r3, #0
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	f003 f813 	bl	80057e4 <HAL_RS485Ex_Init>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <MX_USART1_UART_Init+0x56>
	{
		Error_Handler();
 80027c2:	f000 f8b7 	bl	8002934 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000198 	.word	0x20000198
 80027d0:	40013800 	.word	0x40013800

080027d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027da:	240c      	movs	r4, #12
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	0018      	movs	r0, r3
 80027e0:	2314      	movs	r3, #20
 80027e2:	001a      	movs	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f003 f88d 	bl	8005904 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <MX_GPIO_Init+0x150>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <MX_GPIO_Init+0x150>)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	03c9      	lsls	r1, r1, #15
 80027f4:	430a      	orrs	r2, r1
 80027f6:	615a      	str	r2, [r3, #20]
 80027f8:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <MX_GPIO_Init+0x150>)
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	03db      	lsls	r3, r3, #15
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <MX_GPIO_Init+0x150>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <MX_GPIO_Init+0x150>)
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0289      	lsls	r1, r1, #10
 8002810:	430a      	orrs	r2, r1
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	4b43      	ldr	r3, [pc, #268]	; (8002924 <MX_GPIO_Init+0x150>)
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	029b      	lsls	r3, r3, #10
 800281c:	4013      	ands	r3, r2
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <MX_GPIO_Init+0x150>)
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <MX_GPIO_Init+0x150>)
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	02c9      	lsls	r1, r1, #11
 800282c:	430a      	orrs	r2, r1
 800282e:	615a      	str	r2, [r3, #20]
 8002830:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <MX_GPIO_Init+0x150>)
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	02db      	lsls	r3, r3, #11
 8002838:	4013      	ands	r3, r2
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, D4_Pin | D5_Pin | D6_Pin | D7_Pin | E_Pin | RS_Pin | BUZZER_Pin | PA7_Pin | LED2_Pin | LED1_Pin, GPIO_PIN_RESET);
 800283e:	493a      	ldr	r1, [pc, #232]	; (8002928 <MX_GPIO_Init+0x154>)
 8002840:	2390      	movs	r3, #144	; 0x90
 8002842:	05db      	lsls	r3, r3, #23
 8002844:	2200      	movs	r2, #0
 8002846:	0018      	movs	r0, r3
 8002848:	f000 fd4d 	bl	80032e6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, PB0_Pin | GPIO_PIN_1 | PB2_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 800284c:	4937      	ldr	r1, [pc, #220]	; (800292c <MX_GPIO_Init+0x158>)
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <MX_GPIO_Init+0x15c>)
 8002850:	2200      	movs	r2, #0
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fd47 	bl	80032e6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
							 E_Pin RS_Pin BUZZER_Pin PA7_Pin
							 LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = D4_Pin | D5_Pin | D6_Pin | D7_Pin | E_Pin | RS_Pin | BUZZER_Pin | PA7_Pin | LED2_Pin | LED1_Pin;
 8002858:	193b      	adds	r3, r7, r4
 800285a:	4a33      	ldr	r2, [pc, #204]	; (8002928 <MX_GPIO_Init+0x154>)
 800285c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285e:	193b      	adds	r3, r7, r4
 8002860:	2201      	movs	r2, #1
 8002862:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	193b      	adds	r3, r7, r4
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	193b      	adds	r3, r7, r4
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	193a      	adds	r2, r7, r4
 8002872:	2390      	movs	r3, #144	; 0x90
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	0011      	movs	r1, r2
 8002878:	0018      	movs	r0, r3
 800287a:	f000 fba7 	bl	8002fcc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0_Pin PB1 PB2_Pin PB10 */
	GPIO_InitStruct.Pin = PB0_Pin | GPIO_PIN_1 | PB2_Pin | GPIO_PIN_10;
 800287e:	193b      	adds	r3, r7, r4
 8002880:	4a2a      	ldr	r2, [pc, #168]	; (800292c <MX_GPIO_Init+0x158>)
 8002882:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	193b      	adds	r3, r7, r4
 8002886:	2201      	movs	r2, #1
 8002888:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	193b      	adds	r3, r7, r4
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	193b      	adds	r3, r7, r4
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002896:	193b      	adds	r3, r7, r4
 8002898:	4a25      	ldr	r2, [pc, #148]	; (8002930 <MX_GPIO_Init+0x15c>)
 800289a:	0019      	movs	r1, r3
 800289c:	0010      	movs	r0, r2
 800289e:	f000 fb95 	bl	8002fcc <HAL_GPIO_Init>

	/*Configure GPIO pins : S_PRV_Pin S_NEXT_Pin DEPTH_Pin IR_N_Pin
							 CHANGE_N_Pin */
	GPIO_InitStruct.Pin = S_PRV_Pin | S_NEXT_Pin | DEPTH_Pin | IR_N_Pin | CHANGE_N_Pin;
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	22f8      	movs	r2, #248	; 0xf8
 80028a6:	0212      	lsls	r2, r2, #8
 80028a8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	2288      	movs	r2, #136	; 0x88
 80028ae:	0352      	lsls	r2, r2, #13
 80028b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <MX_GPIO_Init+0x15c>)
 80028bc:	0019      	movs	r1, r3
 80028be:	0010      	movs	r0, r2
 80028c0:	f000 fb84 	bl	8002fcc <HAL_GPIO_Init>

	/*Configure GPIO pin : CHANGE_P_Pin */
	GPIO_InitStruct.Pin = CHANGE_P_Pin;
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	00d2      	lsls	r2, r2, #3
 80028ca:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028cc:	193b      	adds	r3, r7, r4
 80028ce:	2288      	movs	r2, #136	; 0x88
 80028d0:	0352      	lsls	r2, r2, #13
 80028d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(CHANGE_P_GPIO_Port, &GPIO_InitStruct);
 80028da:	193a      	adds	r2, r7, r4
 80028dc:	2390      	movs	r3, #144	; 0x90
 80028de:	05db      	lsls	r3, r3, #23
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fb72 	bl	8002fcc <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C_INT_Pin */
	GPIO_InitStruct.Pin = I2C_INT_Pin;
 80028e8:	0021      	movs	r1, r4
 80028ea:	187b      	adds	r3, r7, r1
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	0212      	lsls	r2, r2, #8
 80028f0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2200      	movs	r2, #0
 80028f6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 80028fe:	187a      	adds	r2, r7, r1
 8002900:	2390      	movs	r3, #144	; 0x90
 8002902:	05db      	lsls	r3, r3, #23
 8002904:	0011      	movs	r1, r2
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fb60 	bl	8002fcc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	2007      	movs	r0, #7
 8002912:	f000 fb29 	bl	8002f68 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002916:	2007      	movs	r0, #7
 8002918:	f000 fb3b 	bl	8002f92 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b009      	add	sp, #36	; 0x24
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	000009ff 	.word	0x000009ff
 800292c:	00000407 	.word	0x00000407
 8002930:	48000400 	.word	0x48000400

08002934 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002938:	b672      	cpsid	i
}
 800293a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800293c:	e7fe      	b.n	800293c <Error_Handler+0x8>
	...

08002940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <HAL_MspInit+0x44>)
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_MspInit+0x44>)
 800294c:	2101      	movs	r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_MspInit+0x44>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_MspInit+0x44>)
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <HAL_MspInit+0x44>)
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	0549      	lsls	r1, r1, #21
 8002968:	430a      	orrs	r2, r1
 800296a:	61da      	str	r2, [r3, #28]
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_MspInit+0x44>)
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	055b      	lsls	r3, r3, #21
 8002974:	4013      	ands	r3, r2
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b08b      	sub	sp, #44	; 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	2414      	movs	r4, #20
 8002992:	193b      	adds	r3, r7, r4
 8002994:	0018      	movs	r0, r3
 8002996:	2314      	movs	r3, #20
 8002998:	001a      	movs	r2, r3
 800299a:	2100      	movs	r1, #0
 800299c:	f002 ffb2 	bl	8005904 <memset>
  if(hi2c->Instance==I2C1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_I2C_MspInit+0x90>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d132      	bne.n	8002a10 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	02c9      	lsls	r1, r1, #11
 80029b4:	430a      	orrs	r2, r1
 80029b6:	615a      	str	r2, [r3, #20]
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	02db      	lsls	r3, r3, #11
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	22c0      	movs	r2, #192	; 0xc0
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ce:	0021      	movs	r1, r4
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2212      	movs	r2, #18
 80029d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2201      	movs	r2, #1
 80029da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2203      	movs	r2, #3
 80029e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	2201      	movs	r2, #1
 80029e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <HAL_I2C_MspInit+0x98>)
 80029ec:	0019      	movs	r1, r3
 80029ee:	0010      	movs	r0, r2
 80029f0:	f000 faec 	bl	8002fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0389      	lsls	r1, r1, #14
 80029fe:	430a      	orrs	r2, r1
 8002a00:	61da      	str	r2, [r3, #28]
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	039b      	lsls	r3, r3, #14
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b00b      	add	sp, #44	; 0x2c
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	40005400 	.word	0x40005400
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	48000400 	.word	0x48000400

08002a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d114      	bne.n	8002a60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_TIM_Base_MspInit+0x80>)
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_TIM_Base_MspInit+0x80>)
 8002a3c:	2110      	movs	r1, #16
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	61da      	str	r2, [r3, #28]
 8002a42:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_TIM_Base_MspInit+0x80>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	2210      	movs	r2, #16
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2011      	movs	r0, #17
 8002a54:	f000 fa88 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002a58:	2011      	movs	r0, #17
 8002a5a:	f000 fa9a 	bl	8002f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a5e:	e01a      	b.n	8002a96 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM14)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_TIM_Base_MspInit+0x84>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d115      	bne.n	8002a96 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_TIM_Base_MspInit+0x80>)
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_TIM_Base_MspInit+0x80>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0049      	lsls	r1, r1, #1
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_TIM_Base_MspInit+0x80>)
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2013      	movs	r0, #19
 8002a8c:	f000 fa6c 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002a90:	2013      	movs	r0, #19
 8002a92:	f000 fa7e 	bl	8002f92 <HAL_NVIC_EnableIRQ>
}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	40001000 	.word	0x40001000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40002000 	.word	0x40002000

08002aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b08b      	sub	sp, #44	; 0x2c
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	2414      	movs	r4, #20
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	0018      	movs	r0, r3
 8002aba:	2314      	movs	r3, #20
 8002abc:	001a      	movs	r2, r3
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f002 ff20 	bl	8005904 <memset>
  if(huart->Instance==USART1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_UART_MspInit+0xd8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d156      	bne.n	8002b7c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	01c9      	lsls	r1, r1, #7
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	619a      	str	r2, [r3, #24]
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	01db      	lsls	r3, r3, #7
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0289      	lsls	r1, r1, #10
 8002af4:	430a      	orrs	r2, r1
 8002af6:	615a      	str	r2, [r3, #20]
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	02c9      	lsls	r1, r1, #11
 8002b10:	430a      	orrs	r2, r1
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_UART_MspInit+0xdc>)
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	02db      	lsls	r3, r3, #11
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA12     ------> USART1_DE
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	0152      	lsls	r2, r2, #5
 8002b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	2203      	movs	r2, #3
 8002b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	2201      	movs	r2, #1
 8002b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	193a      	adds	r2, r7, r4
 8002b44:	2390      	movs	r3, #144	; 0x90
 8002b46:	05db      	lsls	r3, r3, #23
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 fa3e 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b50:	0021      	movs	r1, r4
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	22c0      	movs	r2, #192	; 0xc0
 8002b56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2203      	movs	r2, #3
 8002b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <HAL_UART_MspInit+0xe0>)
 8002b74:	0019      	movs	r1, r3
 8002b76:	0010      	movs	r0, r2
 8002b78:	f000 fa28 	bl	8002fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b00b      	add	sp, #44	; 0x2c
 8002b82:	bd90      	pop	{r4, r7, pc}
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	48000400 	.word	0x48000400

08002b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <NMI_Handler+0x4>

08002b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9a:	e7fe      	b.n	8002b9a <HardFault_Handler+0x4>

08002b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb4:	f000 f8ec 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHANGE_P_Pin);
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 fbaa 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_PRV_Pin);
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fba5 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S_NEXT_Pin);
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 fba0 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEPTH_Pin);
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	019b      	lsls	r3, r3, #6
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 fb9b 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IR_N_Pin);
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	01db      	lsls	r3, r3, #7
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fb96 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CHANGE_N_Pin);
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 fb91 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <TIM6_IRQHandler+0x14>)
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f002 f824 	bl	8004c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	20000108 	.word	0x20000108

08002c1c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <TIM14_IRQHandler+0x14>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f002 f818 	bl	8004c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	20000150 	.word	0x20000150

08002c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <_sbrk+0x5c>)
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <_sbrk+0x60>)
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <_sbrk+0x64>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <_sbrk+0x64>)
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <_sbrk+0x68>)
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <_sbrk+0x64>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	18d3      	adds	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d207      	bcs.n	8002c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c64:	f002 fe56 	bl	8005914 <__errno>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	425b      	negs	r3, r3
 8002c72:	e009      	b.n	8002c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <_sbrk+0x64>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	18d2      	adds	r2, r2, r3
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <_sbrk+0x64>)
 8002c84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b006      	add	sp, #24
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20002000 	.word	0x20002000
 8002c94:	00000400 	.word	0x00000400
 8002c98:	20000228 	.word	0x20000228
 8002c9c:	20000378 	.word	0x20000378

08002ca0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cac:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cb0:	f7ff fff6 	bl	8002ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cb6:	490d      	ldr	r1, [pc, #52]	; (8002cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <LoopForever+0xe>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cbc:	e002      	b.n	8002cc4 <LoopCopyDataInit>

08002cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc2:	3304      	adds	r3, #4

08002cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc8:	d3f9      	bcc.n	8002cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	; (8002cf8 <LoopForever+0x16>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd0:	e001      	b.n	8002cd6 <LoopFillZerobss>

08002cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd4:	3204      	adds	r2, #4

08002cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd8:	d3fb      	bcc.n	8002cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cda:	f002 fe21 	bl	8005920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cde:	f7ff f98d 	bl	8001ffc <main>

08002ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ce2:	e7fe      	b.n	8002ce2 <LoopForever>
  ldr   r0, =_estack
 8002ce4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002cf0:	080064d8 	.word	0x080064d8
  ldr r2, =_sbss
 8002cf4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002cf8:	20000378 	.word	0x20000378

08002cfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC1_IRQHandler>
	...

08002d00 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_Init+0x24>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_Init+0x24>)
 8002d0a:	2110      	movs	r1, #16
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f000 f809 	bl	8002d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d16:	f7ff fe13 	bl	8002940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	40022000 	.word	0x40022000

08002d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_InitTick+0x5c>)
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_InitTick+0x60>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	0019      	movs	r1, r3
 8002d3a:	23fa      	movs	r3, #250	; 0xfa
 8002d3c:	0098      	lsls	r0, r3, #2
 8002d3e:	f7fd f9ed 	bl	800011c <__udivsi3>
 8002d42:	0003      	movs	r3, r0
 8002d44:	0019      	movs	r1, r3
 8002d46:	0020      	movs	r0, r4
 8002d48:	f7fd f9e8 	bl	800011c <__udivsi3>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 f92f 	bl	8002fb2 <HAL_SYSTICK_Config>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e00f      	b.n	8002d7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d80b      	bhi.n	8002d7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	2301      	movs	r3, #1
 8002d66:	425b      	negs	r3, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f8fc 	bl	8002f68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_InitTick+0x64>)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b003      	add	sp, #12
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	2000000c 	.word	0x2000000c
 8002d88:	20000014 	.word	0x20000014
 8002d8c:	20000010 	.word	0x20000010

08002d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_IncTick+0x1c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	001a      	movs	r2, r3
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_IncTick+0x20>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	18d2      	adds	r2, r2, r3
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_IncTick+0x20>)
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	20000014 	.word	0x20000014
 8002db0:	2000022c 	.word	0x2000022c

08002db4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  return uwTick;
 8002db8:	4b02      	ldr	r3, [pc, #8]	; (8002dc4 <HAL_GetTick+0x10>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	2000022c 	.word	0x2000022c

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_GetTick>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	d005      	beq.n	8002dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_Delay+0x44>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	001a      	movs	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	f7ff ffe0 	bl	8002db4 <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d8f7      	bhi.n	8002df0 <HAL_Delay+0x28>
  {
  }
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b004      	add	sp, #16
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	20000014 	.word	0x20000014

08002e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	0002      	movs	r2, r0
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b7f      	cmp	r3, #127	; 0x7f
 8002e22:	d809      	bhi.n	8002e38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	001a      	movs	r2, r3
 8002e2a:	231f      	movs	r3, #31
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <__NVIC_EnableIRQ+0x30>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	4091      	lsls	r1, r2
 8002e34:	000a      	movs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
  }
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b7f      	cmp	r3, #127	; 0x7f
 8002e58:	d828      	bhi.n	8002eac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e5a:	4a2f      	ldr	r2, [pc, #188]	; (8002f18 <__NVIC_SetPriority+0xd4>)
 8002e5c:	1dfb      	adds	r3, r7, #7
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	33c0      	adds	r3, #192	; 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	589b      	ldr	r3, [r3, r2]
 8002e6a:	1dfa      	adds	r2, r7, #7
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	0011      	movs	r1, r2
 8002e70:	2203      	movs	r2, #3
 8002e72:	400a      	ands	r2, r1
 8002e74:	00d2      	lsls	r2, r2, #3
 8002e76:	21ff      	movs	r1, #255	; 0xff
 8002e78:	4091      	lsls	r1, r2
 8002e7a:	000a      	movs	r2, r1
 8002e7c:	43d2      	mvns	r2, r2
 8002e7e:	401a      	ands	r2, r3
 8002e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	401a      	ands	r2, r3
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	2303      	movs	r3, #3
 8002e92:	4003      	ands	r3, r0
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e98:	481f      	ldr	r0, [pc, #124]	; (8002f18 <__NVIC_SetPriority+0xd4>)
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	33c0      	adds	r3, #192	; 0xc0
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002eaa:	e031      	b.n	8002f10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <__NVIC_SetPriority+0xd8>)
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	3b08      	subs	r3, #8
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3306      	adds	r3, #6
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1dfa      	adds	r2, r7, #7
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	0011      	movs	r1, r2
 8002ecc:	2203      	movs	r2, #3
 8002ece:	400a      	ands	r2, r1
 8002ed0:	00d2      	lsls	r2, r2, #3
 8002ed2:	21ff      	movs	r1, #255	; 0xff
 8002ed4:	4091      	lsls	r1, r2
 8002ed6:	000a      	movs	r2, r1
 8002ed8:	43d2      	mvns	r2, r2
 8002eda:	401a      	ands	r2, r3
 8002edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	22ff      	movs	r2, #255	; 0xff
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	1dfb      	adds	r3, r7, #7
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	0018      	movs	r0, r3
 8002eec:	2303      	movs	r3, #3
 8002eee:	4003      	ands	r3, r0
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ef4:	4809      	ldr	r0, [pc, #36]	; (8002f1c <__NVIC_SetPriority+0xd8>)
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	001c      	movs	r4, r3
 8002efc:	230f      	movs	r3, #15
 8002efe:	4023      	ands	r3, r4
 8002f00:	3b08      	subs	r3, #8
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	430a      	orrs	r2, r1
 8002f06:	3306      	adds	r3, #6
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	18c3      	adds	r3, r0, r3
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b003      	add	sp, #12
 8002f16:	bd90      	pop	{r4, r7, pc}
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	045b      	lsls	r3, r3, #17
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d301      	bcc.n	8002f38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f34:	2301      	movs	r3, #1
 8002f36:	e010      	b.n	8002f5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <SysTick_Config+0x44>)
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	3a01      	subs	r2, #1
 8002f3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f40:	2301      	movs	r3, #1
 8002f42:	425b      	negs	r3, r3
 8002f44:	2103      	movs	r1, #3
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7ff ff7c 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <SysTick_Config+0x44>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <SysTick_Config+0x44>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	210f      	movs	r1, #15
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	1c02      	adds	r2, r0, #0
 8002f78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b25b      	sxtb	r3, r3
 8002f82:	0011      	movs	r1, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff ff5d 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b004      	add	sp, #16
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	0002      	movs	r2, r0
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff ff33 	bl	8002e10 <__NVIC_EnableIRQ>
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ffaf 	bl	8002f20 <SysTick_Config>
 8002fc2:	0003      	movs	r3, r0
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fda:	e14f      	b.n	800327c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4091      	lsls	r1, r2
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d100      	bne.n	8002ff4 <HAL_GPIO_Init+0x28>
 8002ff2:	e140      	b.n	8003276 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d005      	beq.n	800300c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003008:	2b02      	cmp	r3, #2
 800300a:	d130      	bne.n	800306e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	409a      	lsls	r2, r3
 800301a:	0013      	movs	r3, r2
 800301c:	43da      	mvns	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	409a      	lsls	r2, r3
 800302e:	0013      	movs	r3, r2
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003042:	2201      	movs	r2, #1
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	409a      	lsls	r2, r3
 8003048:	0013      	movs	r3, r2
 800304a:	43da      	mvns	r2, r3
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	2201      	movs	r2, #1
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
 8003060:	0013      	movs	r3, r2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2203      	movs	r2, #3
 8003074:	4013      	ands	r3, r2
 8003076:	2b03      	cmp	r3, #3
 8003078:	d017      	beq.n	80030aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	409a      	lsls	r2, r3
 8003088:	0013      	movs	r3, r2
 800308a:	43da      	mvns	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	409a      	lsls	r2, r3
 800309c:	0013      	movs	r3, r2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2203      	movs	r2, #3
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d123      	bne.n	80030fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	08da      	lsrs	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3208      	adds	r2, #8
 80030be:	0092      	lsls	r2, r2, #2
 80030c0:	58d3      	ldr	r3, [r2, r3]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2207      	movs	r2, #7
 80030c8:	4013      	ands	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	409a      	lsls	r2, r3
 80030d0:	0013      	movs	r3, r2
 80030d2:	43da      	mvns	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2107      	movs	r1, #7
 80030e2:	400b      	ands	r3, r1
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	6939      	ldr	r1, [r7, #16]
 80030fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	409a      	lsls	r2, r3
 800310c:	0013      	movs	r3, r2
 800310e:	43da      	mvns	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2203      	movs	r2, #3
 800311c:	401a      	ands	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	23c0      	movs	r3, #192	; 0xc0
 8003138:	029b      	lsls	r3, r3, #10
 800313a:	4013      	ands	r3, r2
 800313c:	d100      	bne.n	8003140 <HAL_GPIO_Init+0x174>
 800313e:	e09a      	b.n	8003276 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003140:	4b54      	ldr	r3, [pc, #336]	; (8003294 <HAL_GPIO_Init+0x2c8>)
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_GPIO_Init+0x2c8>)
 8003146:	2101      	movs	r1, #1
 8003148:	430a      	orrs	r2, r1
 800314a:	619a      	str	r2, [r3, #24]
 800314c:	4b51      	ldr	r3, [pc, #324]	; (8003294 <HAL_GPIO_Init+0x2c8>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003158:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <HAL_GPIO_Init+0x2cc>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	589b      	ldr	r3, [r3, r2]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2203      	movs	r2, #3
 800316a:	4013      	ands	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	409a      	lsls	r2, r3
 8003172:	0013      	movs	r3, r2
 8003174:	43da      	mvns	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	2390      	movs	r3, #144	; 0x90
 8003180:	05db      	lsls	r3, r3, #23
 8003182:	429a      	cmp	r2, r3
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x1e2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a44      	ldr	r2, [pc, #272]	; (800329c <HAL_GPIO_Init+0x2d0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x1de>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a43      	ldr	r2, [pc, #268]	; (80032a0 <HAL_GPIO_Init+0x2d4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x1da>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a42      	ldr	r2, [pc, #264]	; (80032a4 <HAL_GPIO_Init+0x2d8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x1d6>
 800319e:	2303      	movs	r3, #3
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x1e4>
 80031a2:	2305      	movs	r3, #5
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x1e4>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x1e4>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x1e4>
 80031ae:	2300      	movs	r3, #0
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	2103      	movs	r1, #3
 80031b4:	400a      	ands	r2, r1
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031c0:	4935      	ldr	r1, [pc, #212]	; (8003298 <HAL_GPIO_Init+0x2cc>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	035b      	lsls	r3, r3, #13
 80031e6:	4013      	ands	r3, r2
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43da      	mvns	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	039b      	lsls	r3, r3, #14
 8003210:	4013      	ands	r3, r2
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800321c:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	43da      	mvns	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	4013      	ands	r3, r2
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003246:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43da      	mvns	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	025b      	lsls	r3, r3, #9
 8003264:	4013      	ands	r3, r2
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_GPIO_Init+0x2dc>)
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	40da      	lsrs	r2, r3
 8003284:	1e13      	subs	r3, r2, #0
 8003286:	d000      	beq.n	800328a <HAL_GPIO_Init+0x2be>
 8003288:	e6a8      	b.n	8002fdc <HAL_GPIO_Init+0x10>
  } 
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b006      	add	sp, #24
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	48000400 	.word	0x48000400
 80032a0:	48000800 	.word	0x48000800
 80032a4:	48000c00 	.word	0x48000c00
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	000a      	movs	r2, r1
 80032b6:	1cbb      	adds	r3, r7, #2
 80032b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	1cba      	adds	r2, r7, #2
 80032c0:	8812      	ldrh	r2, [r2, #0]
 80032c2:	4013      	ands	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80032c6:	230f      	movs	r3, #15
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e003      	b.n	80032d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032d8:	230f      	movs	r3, #15
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	781b      	ldrb	r3, [r3, #0]
  }
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	0008      	movs	r0, r1
 80032f0:	0011      	movs	r1, r2
 80032f2:	1cbb      	adds	r3, r7, #2
 80032f4:	1c02      	adds	r2, r0, #0
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	1c7b      	adds	r3, r7, #1
 80032fa:	1c0a      	adds	r2, r1, #0
 80032fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032fe:	1c7b      	adds	r3, r7, #1
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003306:	1cbb      	adds	r3, r7, #2
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800330e:	e003      	b.n	8003318 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003310:	1cbb      	adds	r3, r7, #2
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	0002      	movs	r2, r0
 8003328:	1dbb      	adds	r3, r7, #6
 800332a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	1dba      	adds	r2, r7, #6
 8003332:	8812      	ldrh	r2, [r2, #0]
 8003334:	4013      	ands	r3, r2
 8003336:	d008      	beq.n	800334a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800333a:	1dba      	adds	r2, r7, #6
 800333c:	8812      	ldrh	r2, [r2, #0]
 800333e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003340:	1dbb      	adds	r3, r7, #6
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	0018      	movs	r0, r3
 8003346:	f7fe fe23 	bl	8001f90 <HAL_GPIO_EXTI_Callback>
  }
}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	40010400 	.word	0x40010400

08003358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e082      	b.n	8003470 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2241      	movs	r2, #65	; 0x41
 800336e:	5c9b      	ldrb	r3, [r3, r2]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2240      	movs	r2, #64	; 0x40
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff fb01 	bl	8002988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2241      	movs	r2, #65	; 0x41
 800338a:	2124      	movs	r1, #36	; 0x24
 800338c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	438a      	bics	r2, r1
 800339c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4934      	ldr	r1, [pc, #208]	; (8003478 <HAL_I2C_Init+0x120>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4931      	ldr	r1, [pc, #196]	; (800347c <HAL_I2C_Init+0x124>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d108      	bne.n	80033d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	0209      	lsls	r1, r1, #8
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e007      	b.n	80033e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2184      	movs	r1, #132	; 0x84
 80033e0:	0209      	lsls	r1, r1, #8
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d104      	bne.n	80033f8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	491f      	ldr	r1, [pc, #124]	; (8003480 <HAL_I2C_Init+0x128>)
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	491a      	ldr	r1, [pc, #104]	; (800347c <HAL_I2C_Init+0x124>)
 8003414:	400a      	ands	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	431a      	orrs	r2, r3
 8003422:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69d9      	ldr	r1, [r3, #28]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1a      	ldr	r2, [r3, #32]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2101      	movs	r1, #1
 800344e:	430a      	orrs	r2, r1
 8003450:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2241      	movs	r2, #65	; 0x41
 800345c:	2120      	movs	r1, #32
 800345e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2242      	movs	r2, #66	; 0x42
 800346a:	2100      	movs	r1, #0
 800346c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}
 8003478:	f0ffffff 	.word	0xf0ffffff
 800347c:	ffff7fff 	.word	0xffff7fff
 8003480:	02008000 	.word	0x02008000

08003484 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	000c      	movs	r4, r1
 800348e:	0010      	movs	r0, r2
 8003490:	0019      	movs	r1, r3
 8003492:	230a      	movs	r3, #10
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	1c22      	adds	r2, r4, #0
 8003498:	801a      	strh	r2, [r3, #0]
 800349a:	2308      	movs	r3, #8
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	1c02      	adds	r2, r0, #0
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	1dbb      	adds	r3, r7, #6
 80034a4:	1c0a      	adds	r2, r1, #0
 80034a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2241      	movs	r2, #65	; 0x41
 80034ac:	5c9b      	ldrb	r3, [r3, r2]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d000      	beq.n	80034b6 <HAL_I2C_Mem_Write+0x32>
 80034b4:	e10c      	b.n	80036d0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <HAL_I2C_Mem_Write+0x42>
 80034bc:	232c      	movs	r3, #44	; 0x2c
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d105      	bne.n	80034d2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0ff      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_I2C_Mem_Write+0x5c>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0f8      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034e8:	f7ff fc64 	bl	8002db4 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	0219      	lsls	r1, r3, #8
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2319      	movs	r3, #25
 80034fc:	2201      	movs	r2, #1
 80034fe:	f000 fb0b 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0e3      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2241      	movs	r2, #65	; 0x41
 800350e:	2121      	movs	r1, #33	; 0x21
 8003510:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2242      	movs	r2, #66	; 0x42
 8003516:	2140      	movs	r1, #64	; 0x40
 8003518:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003524:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	222c      	movs	r2, #44	; 0x2c
 800352a:	18ba      	adds	r2, r7, r2
 800352c:	8812      	ldrh	r2, [r2, #0]
 800352e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003536:	1dbb      	adds	r3, r7, #6
 8003538:	881c      	ldrh	r4, [r3, #0]
 800353a:	2308      	movs	r3, #8
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	881a      	ldrh	r2, [r3, #0]
 8003540:	230a      	movs	r3, #10
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	8819      	ldrh	r1, [r3, #0]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	0023      	movs	r3, r4
 8003552:	f000 f9f9 	bl	8003948 <I2C_RequestMemoryWrite>
 8003556:	1e03      	subs	r3, r0, #0
 8003558:	d005      	beq.n	8003566 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2240      	movs	r2, #64	; 0x40
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0b5      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	2bff      	cmp	r3, #255	; 0xff
 800356e:	d911      	bls.n	8003594 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	b2da      	uxtb	r2, r3
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	045c      	lsls	r4, r3, #17
 8003580:	230a      	movs	r3, #10
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	8819      	ldrh	r1, [r3, #0]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	0023      	movs	r3, r4
 800358e:	f000 fc9b 	bl	8003ec8 <I2C_TransferConfig>
 8003592:	e012      	b.n	80035ba <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	049c      	lsls	r4, r3, #18
 80035a8:	230a      	movs	r3, #10
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	8819      	ldrh	r1, [r3, #0]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	0023      	movs	r3, r4
 80035b6:	f000 fc87 	bl	8003ec8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 faf7 	bl	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e081      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03a      	beq.n	800367e <HAL_I2C_Mem_Write+0x1fa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d136      	bne.n	800367e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	0013      	movs	r3, r2
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	f000 fa7b 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e053      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	2bff      	cmp	r3, #255	; 0xff
 8003632:	d911      	bls.n	8003658 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	22ff      	movs	r2, #255	; 0xff
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	b2da      	uxtb	r2, r3
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	045c      	lsls	r4, r3, #17
 8003644:	230a      	movs	r3, #10
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	8819      	ldrh	r1, [r3, #0]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	2300      	movs	r3, #0
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	0023      	movs	r3, r4
 8003652:	f000 fc39 	bl	8003ec8 <I2C_TransferConfig>
 8003656:	e012      	b.n	800367e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	b2da      	uxtb	r2, r3
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	049c      	lsls	r4, r3, #18
 800366c:	230a      	movs	r3, #10
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	8819      	ldrh	r1, [r3, #0]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0023      	movs	r3, r4
 800367a:	f000 fc25 	bl	8003ec8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d198      	bne.n	80035ba <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	0018      	movs	r0, r3
 8003690:	f000 fad6 	bl	8003c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01a      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2220      	movs	r2, #32
 80036a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	490b      	ldr	r1, [pc, #44]	; (80036dc <HAL_I2C_Mem_Write+0x258>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2241      	movs	r2, #65	; 0x41
 80036b8:	2120      	movs	r1, #32
 80036ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2242      	movs	r2, #66	; 0x42
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2240      	movs	r2, #64	; 0x40
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b007      	add	sp, #28
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	fe00e800 	.word	0xfe00e800

080036e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	000c      	movs	r4, r1
 80036ea:	0010      	movs	r0, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	230a      	movs	r3, #10
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	1c22      	adds	r2, r4, #0
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	2308      	movs	r3, #8
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	1c02      	adds	r2, r0, #0
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	1dbb      	adds	r3, r7, #6
 8003700:	1c0a      	adds	r2, r1, #0
 8003702:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2241      	movs	r2, #65	; 0x41
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b20      	cmp	r3, #32
 800370e:	d000      	beq.n	8003712 <HAL_I2C_Mem_Read+0x32>
 8003710:	e110      	b.n	8003934 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <HAL_I2C_Mem_Read+0x42>
 8003718:	232c      	movs	r3, #44	; 0x2c
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	0092      	lsls	r2, r2, #2
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e103      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2240      	movs	r2, #64	; 0x40
 8003732:	5c9b      	ldrb	r3, [r3, r2]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_I2C_Mem_Read+0x5c>
 8003738:	2302      	movs	r3, #2
 800373a:	e0fc      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	2101      	movs	r1, #1
 8003742:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003744:	f7ff fb36 	bl	8002db4 <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	0219      	lsls	r1, r3, #8
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2319      	movs	r3, #25
 8003758:	2201      	movs	r2, #1
 800375a:	f000 f9dd 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0e7      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2241      	movs	r2, #65	; 0x41
 800376a:	2122      	movs	r1, #34	; 0x22
 800376c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2242      	movs	r2, #66	; 0x42
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	222c      	movs	r2, #44	; 0x2c
 8003786:	18ba      	adds	r2, r7, r2
 8003788:	8812      	ldrh	r2, [r2, #0]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	881c      	ldrh	r4, [r3, #0]
 8003796:	2308      	movs	r3, #8
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	230a      	movs	r3, #10
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	8819      	ldrh	r1, [r3, #0]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	0023      	movs	r3, r4
 80037ae:	f000 f92f 	bl	8003a10 <I2C_RequestMemoryRead>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2240      	movs	r2, #64	; 0x40
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0b9      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2bff      	cmp	r3, #255	; 0xff
 80037ca:	d911      	bls.n	80037f0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	045c      	lsls	r4, r3, #17
 80037dc:	230a      	movs	r3, #10
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	8819      	ldrh	r1, [r3, #0]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	4b56      	ldr	r3, [pc, #344]	; (8003940 <HAL_I2C_Mem_Read+0x260>)
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	0023      	movs	r3, r4
 80037ea:	f000 fb6d 	bl	8003ec8 <I2C_TransferConfig>
 80037ee:	e012      	b.n	8003816 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	049c      	lsls	r4, r3, #18
 8003804:	230a      	movs	r3, #10
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	8819      	ldrh	r1, [r3, #0]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <HAL_I2C_Mem_Read+0x260>)
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	0023      	movs	r3, r4
 8003812:	f000 fb59 	bl	8003ec8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	0013      	movs	r3, r2
 8003820:	2200      	movs	r2, #0
 8003822:	2104      	movs	r1, #4
 8003824:	f000 f978 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003828:	1e03      	subs	r3, r0, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e082      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03a      	beq.n	80038e2 <HAL_I2C_Mem_Read+0x202>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d136      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	0013      	movs	r3, r2
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	f000 f949 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e053      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	; 0xff
 8003896:	d911      	bls.n	80038bc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	; 0xff
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	045c      	lsls	r4, r3, #17
 80038a8:	230a      	movs	r3, #10
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	8819      	ldrh	r1, [r3, #0]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	2300      	movs	r3, #0
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	0023      	movs	r3, r4
 80038b6:	f000 fb07 	bl	8003ec8 <I2C_TransferConfig>
 80038ba:	e012      	b.n	80038e2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	049c      	lsls	r4, r3, #18
 80038d0:	230a      	movs	r3, #10
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	8819      	ldrh	r1, [r3, #0]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	0023      	movs	r3, r4
 80038de:	f000 faf3 	bl	8003ec8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d194      	bne.n	8003816 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f9a4 	bl	8003c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e01a      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	490c      	ldr	r1, [pc, #48]	; (8003944 <HAL_I2C_Mem_Read+0x264>)
 8003914:	400a      	ands	r2, r1
 8003916:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2241      	movs	r2, #65	; 0x41
 800391c:	2120      	movs	r1, #32
 800391e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2242      	movs	r2, #66	; 0x42
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2240      	movs	r2, #64	; 0x40
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b007      	add	sp, #28
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	80002400 	.word	0x80002400
 8003944:	fe00e800 	.word	0xfe00e800

08003948 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	000c      	movs	r4, r1
 8003952:	0010      	movs	r0, r2
 8003954:	0019      	movs	r1, r3
 8003956:	250a      	movs	r5, #10
 8003958:	197b      	adds	r3, r7, r5
 800395a:	1c22      	adds	r2, r4, #0
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	2308      	movs	r3, #8
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	1c02      	adds	r2, r0, #0
 8003964:	801a      	strh	r2, [r3, #0]
 8003966:	1dbb      	adds	r3, r7, #6
 8003968:	1c0a      	adds	r2, r1, #0
 800396a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	045c      	lsls	r4, r3, #17
 8003976:	197b      	adds	r3, r7, r5
 8003978:	8819      	ldrh	r1, [r3, #0]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <I2C_RequestMemoryWrite+0xc4>)
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	0023      	movs	r3, r4
 8003982:	f000 faa1 	bl	8003ec8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	6a39      	ldr	r1, [r7, #32]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0018      	movs	r0, r3
 800398e:	f000 f911 	bl	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003992:	1e03      	subs	r3, r0, #0
 8003994:	d001      	beq.n	800399a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e033      	b.n	8003a02 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800399a:	1dbb      	adds	r3, r7, #6
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039a2:	2308      	movs	r3, #8
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
 80039b0:	e019      	b.n	80039e6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039b2:	2308      	movs	r3, #8
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	6a39      	ldr	r1, [r7, #32]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 f8f2 	bl	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d001      	beq.n	80039d8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e014      	b.n	8003a02 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039d8:	2308      	movs	r3, #8
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039e6:	6a3a      	ldr	r2, [r7, #32]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	0013      	movs	r3, r2
 80039f0:	2200      	movs	r2, #0
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	f000 f890 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d001      	beq.n	8003a00 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	80002000 	.word	0x80002000

08003a10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a10:	b5b0      	push	{r4, r5, r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	000c      	movs	r4, r1
 8003a1a:	0010      	movs	r0, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	250a      	movs	r5, #10
 8003a20:	197b      	adds	r3, r7, r5
 8003a22:	1c22      	adds	r2, r4, #0
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	2308      	movs	r3, #8
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	1c02      	adds	r2, r0, #0
 8003a2c:	801a      	strh	r2, [r3, #0]
 8003a2e:	1dbb      	adds	r3, r7, #6
 8003a30:	1c0a      	adds	r2, r1, #0
 8003a32:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	197b      	adds	r3, r7, r5
 8003a3c:	8819      	ldrh	r1, [r3, #0]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <I2C_RequestMemoryRead+0xc0>)
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	f000 fa3f 	bl	8003ec8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f8af 	bl	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e033      	b.n	8003ac6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a5e:	1dbb      	adds	r3, r7, #6
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a66:	2308      	movs	r3, #8
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
 8003a74:	e019      	b.n	8003aaa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a76:	2308      	movs	r3, #8
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	6a39      	ldr	r1, [r7, #32]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 f890 	bl	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e014      	b.n	8003ac6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	0013      	movs	r3, r2
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2140      	movs	r1, #64	; 0x40
 8003ab8:	f000 f82e 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	1e03      	subs	r3, r0, #0
 8003abe:	d001      	beq.n	8003ac4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	80002000 	.word	0x80002000

08003ad4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d103      	bne.n	8003af2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2201      	movs	r2, #1
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d007      	beq.n	8003b10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
  }
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b28:	e030      	b.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	d02d      	beq.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b30:	f7ff f940 	bl	8002db4 <HAL_GetTick>
 8003b34:	0002      	movs	r2, r0
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d302      	bcc.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d122      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	425a      	negs	r2, r3
 8003b56:	4153      	adcs	r3, r2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	1dfb      	adds	r3, r7, #7
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d113      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	2220      	movs	r2, #32
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2241      	movs	r2, #65	; 0x41
 8003b74:	2120      	movs	r1, #32
 8003b76:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2242      	movs	r2, #66	; 0x42
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2240      	movs	r2, #64	; 0x40
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e00f      	b.n	8003bac <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	425a      	negs	r2, r3
 8003b9c:	4153      	adcs	r3, r2
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	001a      	movs	r2, r3
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d0bf      	beq.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bc0:	e032      	b.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f87d 	bl	8003cc8 <I2C_IsErrorOccurred>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e030      	b.n	8003c38 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	d025      	beq.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7ff f8ea 	bl	8002db4 <HAL_GetTick>
 8003be0:	0002      	movs	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d11a      	bne.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d013      	beq.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	2220      	movs	r2, #32
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2241      	movs	r2, #65	; 0x41
 8003c10:	2120      	movs	r1, #32
 8003c12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2242      	movs	r2, #66	; 0x42
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e007      	b.n	8003c38 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d1c5      	bne.n	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b004      	add	sp, #16
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c4c:	e02f      	b.n	8003cae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f837 	bl	8003cc8 <I2C_IsErrorOccurred>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e02d      	b.n	8003cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7ff f8a7 	bl	8002db4 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11a      	bne.n	8003cae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d013      	beq.n	8003cae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2241      	movs	r2, #65	; 0x41
 8003c96:	2120      	movs	r1, #32
 8003c98:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2242      	movs	r2, #66	; 0x42
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2240      	movs	r2, #64	; 0x40
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e007      	b.n	8003cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d1c8      	bne.n	8003c4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b08b      	sub	sp, #44	; 0x2c
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd4:	2327      	movs	r3, #39	; 0x27
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2210      	movs	r2, #16
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <I2C_IsErrorOccurred+0x2e>
 8003cf4:	e082      	b.n	8003dfc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cfe:	e060      	b.n	8003dc2 <I2C_IsErrorOccurred+0xfa>
 8003d00:	2427      	movs	r4, #39	; 0x27
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	193a      	adds	r2, r7, r4
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d058      	beq.n	8003dc2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d10:	f7ff f850 	bl	8002db4 <HAL_GetTick>
 8003d14:	0002      	movs	r2, r0
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d306      	bcc.n	8003d2e <I2C_IsErrorOccurred+0x66>
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	193a      	adds	r2, r7, r4
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d149      	bne.n	8003dc2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	01db      	lsls	r3, r3, #7
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d3c:	2013      	movs	r0, #19
 8003d3e:	183b      	adds	r3, r7, r0
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	2142      	movs	r1, #66	; 0x42
 8003d44:	5c52      	ldrb	r2, [r2, r1]
 8003d46:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	401a      	ands	r2, r3
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d126      	bne.n	8003daa <I2C_IsErrorOccurred+0xe2>
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	01db      	lsls	r3, r3, #7
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d021      	beq.n	8003daa <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d01d      	beq.n	8003daa <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	01c9      	lsls	r1, r1, #7
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d80:	f7ff f818 	bl	8002db4 <HAL_GetTick>
 8003d84:	0003      	movs	r3, r0
 8003d86:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d88:	e00f      	b.n	8003daa <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d8a:	f7ff f813 	bl	8002db4 <HAL_GetTick>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b19      	cmp	r3, #25
 8003d96:	d908      	bls.n	8003daa <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003da0:	2327      	movs	r3, #39	; 0x27
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]

              break;
 8003da8:	e00b      	b.n	8003dc2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2220      	movs	r2, #32
 8003db2:	4013      	ands	r3, r2
 8003db4:	2127      	movs	r1, #39	; 0x27
 8003db6:	187a      	adds	r2, r7, r1
 8003db8:	1879      	adds	r1, r7, r1
 8003dba:	7809      	ldrb	r1, [r1, #0]
 8003dbc:	7011      	strb	r1, [r2, #0]
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d1e3      	bne.n	8003d8a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d004      	beq.n	8003dda <I2C_IsErrorOccurred+0x112>
 8003dd0:	2327      	movs	r3, #39	; 0x27
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d092      	beq.n	8003d00 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dda:	2327      	movs	r3, #39	; 0x27
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2220      	movs	r2, #32
 8003dea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2204      	movs	r2, #4
 8003df0:	4313      	orrs	r3, r2
 8003df2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003df4:	2327      	movs	r3, #39	; 0x27
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d00c      	beq.n	8003e28 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	2201      	movs	r2, #1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	0052      	lsls	r2, r2, #1
 8003e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e20:	2327      	movs	r3, #39	; 0x27
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d00c      	beq.n	8003e4c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2208      	movs	r2, #8
 8003e36:	4313      	orrs	r3, r2
 8003e38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	00d2      	lsls	r2, r2, #3
 8003e42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e44:	2327      	movs	r3, #39	; 0x27
 8003e46:	18fb      	adds	r3, r7, r3
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4013      	ands	r3, r2
 8003e54:	d00c      	beq.n	8003e70 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e68:	2327      	movs	r3, #39	; 0x27
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003e70:	2327      	movs	r3, #39	; 0x27
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01d      	beq.n	8003eb6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff fe29 	bl	8003ad4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <I2C_IsErrorOccurred+0x1fc>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2241      	movs	r2, #65	; 0x41
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2242      	movs	r2, #66	; 0x42
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2240      	movs	r2, #64	; 0x40
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003eb6:	2327      	movs	r3, #39	; 0x27
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	781b      	ldrb	r3, [r3, #0]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b00b      	add	sp, #44	; 0x2c
 8003ec2:	bd90      	pop	{r4, r7, pc}
 8003ec4:	fe00e800 	.word	0xfe00e800

08003ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	0008      	movs	r0, r1
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	240a      	movs	r4, #10
 8003ed8:	193b      	adds	r3, r7, r4
 8003eda:	1c02      	adds	r2, r0, #0
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	2009      	movs	r0, #9
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	1c0a      	adds	r2, r1, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ee6:	193b      	adds	r3, r7, r4
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	059b      	lsls	r3, r3, #22
 8003eec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eee:	183b      	adds	r3, r7, r0
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	0419      	lsls	r1, r3, #16
 8003ef4:	23ff      	movs	r3, #255	; 0xff
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003efa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	4313      	orrs	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f12:	0d51      	lsrs	r1, r2, #21
 8003f14:	2280      	movs	r2, #128	; 0x80
 8003f16:	00d2      	lsls	r2, r2, #3
 8003f18:	400a      	ands	r2, r1
 8003f1a:	4907      	ldr	r1, [pc, #28]	; (8003f38 <I2C_TransferConfig+0x70>)
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	43d2      	mvns	r2, r2
 8003f20:	401a      	ands	r2, r3
 8003f22:	0011      	movs	r1, r2
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b007      	add	sp, #28
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	03ff63ff 	.word	0x03ff63ff

08003f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2241      	movs	r2, #65	; 0x41
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d138      	bne.n	8003fc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2240      	movs	r2, #64	; 0x40
 8003f56:	5c9b      	ldrb	r3, [r3, r2]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e032      	b.n	8003fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	2101      	movs	r1, #1
 8003f66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2241      	movs	r2, #65	; 0x41
 8003f6c:	2124      	movs	r1, #36	; 0x24
 8003f6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	438a      	bics	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4911      	ldr	r1, [pc, #68]	; (8003fd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2101      	movs	r1, #1
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2241      	movs	r2, #65	; 0x41
 8003fb4:	2120      	movs	r1, #32
 8003fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2240      	movs	r2, #64	; 0x40
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b002      	add	sp, #8
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	ffffefff 	.word	0xffffefff

08003fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2241      	movs	r2, #65	; 0x41
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d139      	bne.n	800405e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2240      	movs	r2, #64	; 0x40
 8003fee:	5c9b      	ldrb	r3, [r3, r2]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e033      	b.n	8004060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2240      	movs	r2, #64	; 0x40
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2241      	movs	r2, #65	; 0x41
 8004004:	2124      	movs	r1, #36	; 0x24
 8004006:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2101      	movs	r1, #1
 8004014:	438a      	bics	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a11      	ldr	r2, [pc, #68]	; (8004068 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2241      	movs	r2, #65	; 0x41
 800404e:	2120      	movs	r1, #32
 8004050:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2240      	movs	r2, #64	; 0x40
 8004056:	2100      	movs	r1, #0
 8004058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b004      	add	sp, #16
 8004066:	bd80      	pop	{r7, pc}
 8004068:	fffff0ff 	.word	0xfffff0ff

0800406c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e301      	b.n	8004682 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	4013      	ands	r3, r2
 8004086:	d100      	bne.n	800408a <HAL_RCC_OscConfig+0x1e>
 8004088:	e08d      	b.n	80041a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800408a:	4bc3      	ldr	r3, [pc, #780]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	220c      	movs	r2, #12
 8004090:	4013      	ands	r3, r2
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00e      	beq.n	80040b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004096:	4bc0      	ldr	r3, [pc, #768]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	220c      	movs	r2, #12
 800409c:	4013      	ands	r3, r2
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d116      	bne.n	80040d0 <HAL_RCC_OscConfig+0x64>
 80040a2:	4bbd      	ldr	r3, [pc, #756]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	025b      	lsls	r3, r3, #9
 80040aa:	401a      	ands	r2, r3
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d10d      	bne.n	80040d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	4bb8      	ldr	r3, [pc, #736]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	4013      	ands	r3, r2
 80040be:	d100      	bne.n	80040c2 <HAL_RCC_OscConfig+0x56>
 80040c0:	e070      	b.n	80041a4 <HAL_RCC_OscConfig+0x138>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d000      	beq.n	80040cc <HAL_RCC_OscConfig+0x60>
 80040ca:	e06b      	b.n	80041a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e2d8      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_OscConfig+0x7c>
 80040d8:	4baf      	ldr	r3, [pc, #700]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4bae      	ldr	r3, [pc, #696]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	0249      	lsls	r1, r1, #9
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e02f      	b.n	8004148 <HAL_RCC_OscConfig+0xdc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x9e>
 80040f0:	4ba9      	ldr	r3, [pc, #676]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4ba8      	ldr	r3, [pc, #672]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80040f6:	49a9      	ldr	r1, [pc, #676]	; (800439c <HAL_RCC_OscConfig+0x330>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	4ba6      	ldr	r3, [pc, #664]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4ba5      	ldr	r3, [pc, #660]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004102:	49a7      	ldr	r1, [pc, #668]	; (80043a0 <HAL_RCC_OscConfig+0x334>)
 8004104:	400a      	ands	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e01e      	b.n	8004148 <HAL_RCC_OscConfig+0xdc>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b05      	cmp	r3, #5
 8004110:	d10e      	bne.n	8004130 <HAL_RCC_OscConfig+0xc4>
 8004112:	4ba1      	ldr	r3, [pc, #644]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4ba0      	ldr	r3, [pc, #640]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	02c9      	lsls	r1, r1, #11
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	4b9d      	ldr	r3, [pc, #628]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b9c      	ldr	r3, [pc, #624]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	0249      	lsls	r1, r1, #9
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0xdc>
 8004130:	4b99      	ldr	r3, [pc, #612]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b98      	ldr	r3, [pc, #608]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004136:	4999      	ldr	r1, [pc, #612]	; (800439c <HAL_RCC_OscConfig+0x330>)
 8004138:	400a      	ands	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	4b96      	ldr	r3, [pc, #600]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b95      	ldr	r3, [pc, #596]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004142:	4997      	ldr	r1, [pc, #604]	; (80043a0 <HAL_RCC_OscConfig+0x334>)
 8004144:	400a      	ands	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d014      	beq.n	800417a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fe30 	bl	8002db4 <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800415a:	f7fe fe2b 	bl	8002db4 <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b64      	cmp	r3, #100	; 0x64
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e28a      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416c:	4b8a      	ldr	r3, [pc, #552]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	029b      	lsls	r3, r3, #10
 8004174:	4013      	ands	r3, r2
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0xee>
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fe fe1b 	bl	8002db4 <HAL_GetTick>
 800417e:	0003      	movs	r3, r0
 8004180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004184:	f7fe fe16 	bl	8002db4 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e275      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	4b80      	ldr	r3, [pc, #512]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	2380      	movs	r3, #128	; 0x80
 800419c:	029b      	lsls	r3, r3, #10
 800419e:	4013      	ands	r3, r2
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x118>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2202      	movs	r2, #2
 80041ac:	4013      	ands	r3, r2
 80041ae:	d100      	bne.n	80041b2 <HAL_RCC_OscConfig+0x146>
 80041b0:	e069      	b.n	8004286 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041b2:	4b79      	ldr	r3, [pc, #484]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	220c      	movs	r2, #12
 80041b8:	4013      	ands	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041bc:	4b76      	ldr	r3, [pc, #472]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	220c      	movs	r2, #12
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d11c      	bne.n	8004202 <HAL_RCC_OscConfig+0x196>
 80041c8:	4b73      	ldr	r3, [pc, #460]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	025b      	lsls	r3, r3, #9
 80041d0:	4013      	ands	r3, r2
 80041d2:	d116      	bne.n	8004202 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d4:	4b70      	ldr	r3, [pc, #448]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2202      	movs	r2, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x17e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e24b      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ea:	4b6b      	ldr	r3, [pc, #428]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	22f8      	movs	r2, #248	; 0xf8
 80041f0:	4393      	bics	r3, r2
 80041f2:	0019      	movs	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	00da      	lsls	r2, r3, #3
 80041fa:	4b67      	ldr	r3, [pc, #412]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004200:	e041      	b.n	8004286 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d024      	beq.n	8004254 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b62      	ldr	r3, [pc, #392]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004210:	2101      	movs	r1, #1
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fe fdcd 	bl	8002db4 <HAL_GetTick>
 800421a:	0003      	movs	r3, r0
 800421c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004220:	f7fe fdc8 	bl	8002db4 <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e227      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d0f1      	beq.n	8004220 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b56      	ldr	r3, [pc, #344]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	22f8      	movs	r2, #248	; 0xf8
 8004242:	4393      	bics	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00da      	lsls	r2, r3, #3
 800424c:	4b52      	ldr	r3, [pc, #328]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e018      	b.n	8004286 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004254:	4b50      	ldr	r3, [pc, #320]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800425a:	2101      	movs	r1, #1
 800425c:	438a      	bics	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe fda8 	bl	8002db4 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426a:	f7fe fda3 	bl	8002db4 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e202      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427c:	4b46      	ldr	r3, [pc, #280]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2202      	movs	r2, #2
 8004282:	4013      	ands	r3, r2
 8004284:	d1f1      	bne.n	800426a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2208      	movs	r2, #8
 800428c:	4013      	ands	r3, r2
 800428e:	d036      	beq.n	80042fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d019      	beq.n	80042cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004298:	4b3f      	ldr	r3, [pc, #252]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800429a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800429c:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800429e:	2101      	movs	r1, #1
 80042a0:	430a      	orrs	r2, r1
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a4:	f7fe fd86 	bl	8002db4 <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fe fd81 	bl	8002db4 <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e1e0      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c0:	4b35      	ldr	r3, [pc, #212]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2202      	movs	r2, #2
 80042c6:	4013      	ands	r3, r2
 80042c8:	d0f1      	beq.n	80042ae <HAL_RCC_OscConfig+0x242>
 80042ca:	e018      	b.n	80042fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042cc:	4b32      	ldr	r3, [pc, #200]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80042ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80042d2:	2101      	movs	r1, #1
 80042d4:	438a      	bics	r2, r1
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d8:	f7fe fd6c 	bl	8002db4 <HAL_GetTick>
 80042dc:	0003      	movs	r3, r0
 80042de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e2:	f7fe fd67 	bl	8002db4 <HAL_GetTick>
 80042e6:	0002      	movs	r2, r0
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1c6      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2202      	movs	r2, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d1f1      	bne.n	80042e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	d100      	bne.n	800430a <HAL_RCC_OscConfig+0x29e>
 8004308:	e0b4      	b.n	8004474 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	201f      	movs	r0, #31
 800430c:	183b      	adds	r3, r7, r0
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004312:	4b21      	ldr	r3, [pc, #132]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	055b      	lsls	r3, r3, #21
 800431a:	4013      	ands	r3, r2
 800431c:	d110      	bne.n	8004340 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004324:	2180      	movs	r1, #128	; 0x80
 8004326:	0549      	lsls	r1, r1, #21
 8004328:	430a      	orrs	r2, r1
 800432a:	61da      	str	r2, [r3, #28]
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	055b      	lsls	r3, r3, #21
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800433a:	183b      	adds	r3, r7, r0
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_RCC_OscConfig+0x338>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4013      	ands	r3, r2
 800434a:	d11a      	bne.n	8004382 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434c:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_RCC_OscConfig+0x338>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <HAL_RCC_OscConfig+0x338>)
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	0049      	lsls	r1, r1, #1
 8004356:	430a      	orrs	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435a:	f7fe fd2b 	bl	8002db4 <HAL_GetTick>
 800435e:	0003      	movs	r3, r0
 8004360:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fe fd26 	bl	8002db4 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e185      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x338>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4013      	ands	r3, r2
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d10e      	bne.n	80043a8 <HAL_RCC_OscConfig+0x33c>
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	4b02      	ldr	r3, [pc, #8]	; (8004398 <HAL_RCC_OscConfig+0x32c>)
 8004390:	2101      	movs	r1, #1
 8004392:	430a      	orrs	r2, r1
 8004394:	621a      	str	r2, [r3, #32]
 8004396:	e035      	b.n	8004404 <HAL_RCC_OscConfig+0x398>
 8004398:	40021000 	.word	0x40021000
 800439c:	fffeffff 	.word	0xfffeffff
 80043a0:	fffbffff 	.word	0xfffbffff
 80043a4:	40007000 	.word	0x40007000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10c      	bne.n	80043ca <HAL_RCC_OscConfig+0x35e>
 80043b0:	4bb6      	ldr	r3, [pc, #728]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	4bb5      	ldr	r3, [pc, #724]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	438a      	bics	r2, r1
 80043ba:	621a      	str	r2, [r3, #32]
 80043bc:	4bb3      	ldr	r3, [pc, #716]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	4bb2      	ldr	r3, [pc, #712]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043c2:	2104      	movs	r1, #4
 80043c4:	438a      	bics	r2, r1
 80043c6:	621a      	str	r2, [r3, #32]
 80043c8:	e01c      	b.n	8004404 <HAL_RCC_OscConfig+0x398>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x380>
 80043d2:	4bae      	ldr	r3, [pc, #696]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043d4:	6a1a      	ldr	r2, [r3, #32]
 80043d6:	4bad      	ldr	r3, [pc, #692]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043d8:	2104      	movs	r1, #4
 80043da:	430a      	orrs	r2, r1
 80043dc:	621a      	str	r2, [r3, #32]
 80043de:	4bab      	ldr	r3, [pc, #684]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043e0:	6a1a      	ldr	r2, [r3, #32]
 80043e2:	4baa      	ldr	r3, [pc, #680]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	430a      	orrs	r2, r1
 80043e8:	621a      	str	r2, [r3, #32]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0x398>
 80043ec:	4ba7      	ldr	r3, [pc, #668]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	4ba6      	ldr	r3, [pc, #664]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	438a      	bics	r2, r1
 80043f6:	621a      	str	r2, [r3, #32]
 80043f8:	4ba4      	ldr	r3, [pc, #656]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	4ba3      	ldr	r3, [pc, #652]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80043fe:	2104      	movs	r1, #4
 8004400:	438a      	bics	r2, r1
 8004402:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d014      	beq.n	8004436 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440c:	f7fe fcd2 	bl	8002db4 <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	e009      	b.n	800442a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fe fccd 	bl	8002db4 <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	4a9b      	ldr	r2, [pc, #620]	; (8004690 <HAL_RCC_OscConfig+0x624>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e12b      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442a:	4b98      	ldr	r3, [pc, #608]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	2202      	movs	r2, #2
 8004430:	4013      	ands	r3, r2
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x3aa>
 8004434:	e013      	b.n	800445e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7fe fcbd 	bl	8002db4 <HAL_GetTick>
 800443a:	0003      	movs	r3, r0
 800443c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443e:	e009      	b.n	8004454 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004440:	f7fe fcb8 	bl	8002db4 <HAL_GetTick>
 8004444:	0002      	movs	r2, r0
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	4a91      	ldr	r2, [pc, #580]	; (8004690 <HAL_RCC_OscConfig+0x624>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e116      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004454:	4b8d      	ldr	r3, [pc, #564]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	2202      	movs	r2, #2
 800445a:	4013      	ands	r3, r2
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800445e:	231f      	movs	r3, #31
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004468:	4b88      	ldr	r3, [pc, #544]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	4b87      	ldr	r3, [pc, #540]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800446e:	4989      	ldr	r1, [pc, #548]	; (8004694 <HAL_RCC_OscConfig+0x628>)
 8004470:	400a      	ands	r2, r1
 8004472:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2210      	movs	r2, #16
 800447a:	4013      	ands	r3, r2
 800447c:	d063      	beq.n	8004546 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d12a      	bne.n	80044dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004486:	4b81      	ldr	r3, [pc, #516]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448a:	4b80      	ldr	r3, [pc, #512]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800448c:	2104      	movs	r1, #4
 800448e:	430a      	orrs	r2, r1
 8004490:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004492:	4b7e      	ldr	r3, [pc, #504]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004496:	4b7d      	ldr	r3, [pc, #500]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004498:	2101      	movs	r1, #1
 800449a:	430a      	orrs	r2, r1
 800449c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449e:	f7fe fc89 	bl	8002db4 <HAL_GetTick>
 80044a2:	0003      	movs	r3, r0
 80044a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80044a8:	f7fe fc84 	bl	8002db4 <HAL_GetTick>
 80044ac:	0002      	movs	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e0e3      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044ba:	4b74      	ldr	r3, [pc, #464]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	2202      	movs	r2, #2
 80044c0:	4013      	ands	r3, r2
 80044c2:	d0f1      	beq.n	80044a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80044c4:	4b71      	ldr	r3, [pc, #452]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	22f8      	movs	r2, #248	; 0xf8
 80044ca:	4393      	bics	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	00da      	lsls	r2, r3, #3
 80044d4:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80044d6:	430a      	orrs	r2, r1
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34
 80044da:	e034      	b.n	8004546 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	3305      	adds	r3, #5
 80044e2:	d111      	bne.n	8004508 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80044e4:	4b69      	ldr	r3, [pc, #420]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80044e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e8:	4b68      	ldr	r3, [pc, #416]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80044ea:	2104      	movs	r1, #4
 80044ec:	438a      	bics	r2, r1
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80044f0:	4b66      	ldr	r3, [pc, #408]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	22f8      	movs	r2, #248	; 0xf8
 80044f6:	4393      	bics	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	00da      	lsls	r2, r3, #3
 8004500:	4b62      	ldr	r3, [pc, #392]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004502:	430a      	orrs	r2, r1
 8004504:	635a      	str	r2, [r3, #52]	; 0x34
 8004506:	e01e      	b.n	8004546 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004508:	4b60      	ldr	r3, [pc, #384]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800450a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450c:	4b5f      	ldr	r3, [pc, #380]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800450e:	2104      	movs	r1, #4
 8004510:	430a      	orrs	r2, r1
 8004512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004514:	4b5d      	ldr	r3, [pc, #372]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004518:	4b5c      	ldr	r3, [pc, #368]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800451a:	2101      	movs	r1, #1
 800451c:	438a      	bics	r2, r1
 800451e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004520:	f7fe fc48 	bl	8002db4 <HAL_GetTick>
 8004524:	0003      	movs	r3, r0
 8004526:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800452a:	f7fe fc43 	bl	8002db4 <HAL_GetTick>
 800452e:	0002      	movs	r2, r0
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0a2      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800453c:	4b53      	ldr	r3, [pc, #332]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	2202      	movs	r2, #2
 8004542:	4013      	ands	r3, r2
 8004544:	d1f1      	bne.n	800452a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d100      	bne.n	8004550 <HAL_RCC_OscConfig+0x4e4>
 800454e:	e097      	b.n	8004680 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004550:	4b4e      	ldr	r3, [pc, #312]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	220c      	movs	r2, #12
 8004556:	4013      	ands	r3, r2
 8004558:	2b08      	cmp	r3, #8
 800455a:	d100      	bne.n	800455e <HAL_RCC_OscConfig+0x4f2>
 800455c:	e06b      	b.n	8004636 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d14c      	bne.n	8004600 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004566:	4b49      	ldr	r3, [pc, #292]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b48      	ldr	r3, [pc, #288]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800456c:	494a      	ldr	r1, [pc, #296]	; (8004698 <HAL_RCC_OscConfig+0x62c>)
 800456e:	400a      	ands	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fe fc1f 	bl	8002db4 <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457c:	f7fe fc1a 	bl	8002db4 <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e079      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458e:	4b3f      	ldr	r3, [pc, #252]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	049b      	lsls	r3, r3, #18
 8004596:	4013      	ands	r3, r2
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800459a:	4b3c      	ldr	r3, [pc, #240]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	220f      	movs	r2, #15
 80045a0:	4393      	bics	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	4b38      	ldr	r3, [pc, #224]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80045ae:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4a3a      	ldr	r2, [pc, #232]	; (800469c <HAL_RCC_OscConfig+0x630>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	431a      	orrs	r2, r3
 80045c2:	4b32      	ldr	r3, [pc, #200]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b30      	ldr	r3, [pc, #192]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80045ce:	2180      	movs	r1, #128	; 0x80
 80045d0:	0449      	lsls	r1, r1, #17
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fe fbed 	bl	8002db4 <HAL_GetTick>
 80045da:	0003      	movs	r3, r0
 80045dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fe fbe8 	bl	8002db4 <HAL_GetTick>
 80045e4:	0002      	movs	r2, r0
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e047      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f2:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	049b      	lsls	r3, r3, #18
 80045fa:	4013      	ands	r3, r2
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x574>
 80045fe:	e03f      	b.n	8004680 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004600:	4b22      	ldr	r3, [pc, #136]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b21      	ldr	r3, [pc, #132]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004606:	4924      	ldr	r1, [pc, #144]	; (8004698 <HAL_RCC_OscConfig+0x62c>)
 8004608:	400a      	ands	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fe fbd2 	bl	8002db4 <HAL_GetTick>
 8004610:	0003      	movs	r3, r0
 8004612:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f7fe fbcd 	bl	8002db4 <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e02c      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004628:	4b18      	ldr	r3, [pc, #96]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	049b      	lsls	r3, r3, #18
 8004630:	4013      	ands	r3, r2
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x5aa>
 8004634:	e024      	b.n	8004680 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e01f      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_RCC_OscConfig+0x620>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCC_OscConfig+0x620>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	025b      	lsls	r3, r3, #9
 8004654:	401a      	ands	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	429a      	cmp	r2, r3
 800465c:	d10e      	bne.n	800467c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	220f      	movs	r2, #15
 8004662:	401a      	ands	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d107      	bne.n	800467c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	23f0      	movs	r3, #240	; 0xf0
 8004670:	039b      	lsls	r3, r3, #14
 8004672:	401a      	ands	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b008      	add	sp, #32
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	40021000 	.word	0x40021000
 8004690:	00001388 	.word	0x00001388
 8004694:	efffffff 	.word	0xefffffff
 8004698:	feffffff 	.word	0xfeffffff
 800469c:	ffc2ffff 	.word	0xffc2ffff

080046a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0b3      	b.n	800481c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	4013      	ands	r3, r2
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d911      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b58      	ldr	r3, [pc, #352]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4393      	bics	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	4b55      	ldr	r3, [pc, #340]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d4:	4b53      	ldr	r3, [pc, #332]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2201      	movs	r2, #1
 80046da:	4013      	ands	r3, r2
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e09a      	b.n	800481c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2202      	movs	r2, #2
 80046ec:	4013      	ands	r3, r2
 80046ee:	d015      	beq.n	800471c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2204      	movs	r2, #4
 80046f6:	4013      	ands	r3, r2
 80046f8:	d006      	beq.n	8004708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046fa:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004700:	21e0      	movs	r1, #224	; 0xe0
 8004702:	00c9      	lsls	r1, r1, #3
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b47      	ldr	r3, [pc, #284]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	22f0      	movs	r2, #240	; 0xf0
 800470e:	4393      	bics	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	4b44      	ldr	r3, [pc, #272]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	4013      	ands	r3, r2
 8004724:	d040      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	029b      	lsls	r3, r3, #10
 8004736:	4013      	ands	r3, r2
 8004738:	d114      	bne.n	8004764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e06e      	b.n	800481c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	049b      	lsls	r3, r3, #18
 800474e:	4013      	ands	r3, r2
 8004750:	d108      	bne.n	8004764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e062      	b.n	800481c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2202      	movs	r2, #2
 800475c:	4013      	ands	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e05b      	b.n	800481c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004764:	4b30      	ldr	r3, [pc, #192]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	4393      	bics	r3, r2
 800476c:	0019      	movs	r1, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004778:	f7fe fb1c 	bl	8002db4 <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004780:	e009      	b.n	8004796 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004782:	f7fe fb17 	bl	8002db4 <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	4a27      	ldr	r2, [pc, #156]	; (800482c <HAL_RCC_ClockConfig+0x18c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e042      	b.n	800481c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	220c      	movs	r2, #12
 800479c:	401a      	ands	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1ec      	bne.n	8004782 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d211      	bcs.n	80047da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	4393      	bics	r3, r2
 80047be:	0019      	movs	r1, r3
 80047c0:	4b18      	ldr	r3, [pc, #96]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c8:	4b16      	ldr	r3, [pc, #88]	; (8004824 <HAL_RCC_ClockConfig+0x184>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2201      	movs	r2, #1
 80047ce:	4013      	ands	r3, r2
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e020      	b.n	800481c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2204      	movs	r2, #4
 80047e0:	4013      	ands	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a11      	ldr	r2, [pc, #68]	; (8004830 <HAL_RCC_ClockConfig+0x190>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047f8:	f000 f820 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80047fc:	0001      	movs	r1, r0
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <HAL_RCC_ClockConfig+0x188>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	220f      	movs	r2, #15
 8004806:	4013      	ands	r3, r2
 8004808:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x194>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	000a      	movs	r2, r1
 800480e:	40da      	lsrs	r2, r3
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_ClockConfig+0x198>)
 8004812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004814:	2003      	movs	r0, #3
 8004816:	f7fe fa87 	bl	8002d28 <HAL_InitTick>
  
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b004      	add	sp, #16
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40022000 	.word	0x40022000
 8004828:	40021000 	.word	0x40021000
 800482c:	00001388 	.word	0x00001388
 8004830:	fffff8ff 	.word	0xfffff8ff
 8004834:	08006464 	.word	0x08006464
 8004838:	2000000c 	.word	0x2000000c

0800483c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	220c      	movs	r2, #12
 8004860:	4013      	ands	r3, r2
 8004862:	2b04      	cmp	r3, #4
 8004864:	d002      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x30>
 8004866:	2b08      	cmp	r3, #8
 8004868:	d003      	beq.n	8004872 <HAL_RCC_GetSysClockFreq+0x36>
 800486a:	e02c      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800486e:	613b      	str	r3, [r7, #16]
      break;
 8004870:	e02c      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	0c9b      	lsrs	r3, r3, #18
 8004876:	220f      	movs	r2, #15
 8004878:	4013      	ands	r3, r2
 800487a:	4a19      	ldr	r2, [pc, #100]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800487c:	5cd3      	ldrb	r3, [r2, r3]
 800487e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004880:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	220f      	movs	r2, #15
 8004886:	4013      	ands	r3, r2
 8004888:	4a16      	ldr	r2, [pc, #88]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800488a:	5cd3      	ldrb	r3, [r2, r3]
 800488c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	025b      	lsls	r3, r3, #9
 8004894:	4013      	ands	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4810      	ldr	r0, [pc, #64]	; (80048dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800489c:	f7fb fc3e 	bl	800011c <__udivsi3>
 80048a0:	0003      	movs	r3, r0
 80048a2:	001a      	movs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4353      	muls	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e009      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	000a      	movs	r2, r1
 80048b0:	0152      	lsls	r2, r2, #5
 80048b2:	1a52      	subs	r2, r2, r1
 80048b4:	0193      	lsls	r3, r2, #6
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	185b      	adds	r3, r3, r1
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	613b      	str	r3, [r7, #16]
      break;
 80048c4:	e002      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80048c8:	613b      	str	r3, [r7, #16]
      break;
 80048ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048cc:	693b      	ldr	r3, [r7, #16]
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b006      	add	sp, #24
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	40021000 	.word	0x40021000
 80048dc:	007a1200 	.word	0x007a1200
 80048e0:	0800647c 	.word	0x0800647c
 80048e4:	0800648c 	.word	0x0800648c

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b02      	ldr	r3, [pc, #8]	; (80048f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	2000000c 	.word	0x2000000c

080048fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004900:	f7ff fff2 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004904:	0001      	movs	r1, r0
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	2207      	movs	r2, #7
 800490e:	4013      	ands	r3, r2
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	40d9      	lsrs	r1, r3
 8004916:	000b      	movs	r3, r1
}    
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	40021000 	.word	0x40021000
 8004924:	08006474 	.word	0x08006474

08004928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	025b      	lsls	r3, r3, #9
 8004940:	4013      	ands	r3, r2
 8004942:	d100      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004944:	e08e      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2017      	movs	r0, #23
 8004948:	183b      	adds	r3, r7, r0
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494e:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	055b      	lsls	r3, r3, #21
 8004956:	4013      	ands	r3, r2
 8004958:	d110      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	4b54      	ldr	r3, [pc, #336]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	4b53      	ldr	r3, [pc, #332]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004960:	2180      	movs	r1, #128	; 0x80
 8004962:	0549      	lsls	r1, r1, #21
 8004964:	430a      	orrs	r2, r1
 8004966:	61da      	str	r2, [r3, #28]
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	055b      	lsls	r3, r3, #21
 8004970:	4013      	ands	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004976:	183b      	adds	r3, r7, r0
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	4b4c      	ldr	r3, [pc, #304]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4013      	ands	r3, r2
 8004986:	d11a      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004988:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b48      	ldr	r3, [pc, #288]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	0049      	lsls	r1, r1, #1
 8004992:	430a      	orrs	r2, r1
 8004994:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004996:	f7fe fa0d 	bl	8002db4 <HAL_GetTick>
 800499a:	0003      	movs	r3, r0
 800499c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	e008      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a0:	f7fe fa08 	bl	8002db4 <HAL_GetTick>
 80049a4:	0002      	movs	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e077      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4013      	ands	r3, r2
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049be:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049c0:	6a1a      	ldr	r2, [r3, #32]
 80049c2:	23c0      	movs	r3, #192	; 0xc0
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d034      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	23c0      	movs	r3, #192	; 0xc0
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4013      	ands	r3, r2
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d02c      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e0:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4a33      	ldr	r2, [pc, #204]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ea:	4b30      	ldr	r3, [pc, #192]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049ec:	6a1a      	ldr	r2, [r3, #32]
 80049ee:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049f0:	2180      	movs	r1, #128	; 0x80
 80049f2:	0249      	lsls	r1, r1, #9
 80049f4:	430a      	orrs	r2, r1
 80049f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f8:	4b2c      	ldr	r3, [pc, #176]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049fe:	492e      	ldr	r1, [pc, #184]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a04:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7fe f9cf 	bl	8002db4 <HAL_GetTick>
 8004a16:	0003      	movs	r3, r0
 8004a18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	e009      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fe f9ca 	bl	8002db4 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	4a25      	ldr	r2, [pc, #148]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e038      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	2202      	movs	r2, #2
 8004a36:	4013      	ands	r3, r2
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a4e:	2317      	movs	r3, #23
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a58:	4b14      	ldr	r3, [pc, #80]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	4b13      	ldr	r3, [pc, #76]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a5e:	4918      	ldr	r1, [pc, #96]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004a60:	400a      	ands	r2, r1
 8004a62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	2203      	movs	r2, #3
 8004a74:	4393      	bics	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2220      	movs	r2, #32
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	2210      	movs	r2, #16
 8004a92:	4393      	bics	r3, r2
 8004a94:	0019      	movs	r1, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b006      	add	sp, #24
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	fffffcff 	.word	0xfffffcff
 8004ab8:	fffeffff 	.word	0xfffeffff
 8004abc:	00001388 	.word	0x00001388
 8004ac0:	efffffff 	.word	0xefffffff

08004ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e042      	b.n	8004b5c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	223d      	movs	r2, #61	; 0x3d
 8004ada:	5c9b      	ldrb	r3, [r3, r2]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d107      	bne.n	8004af2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	223c      	movs	r2, #60	; 0x3c
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7fd ff99 	bl	8002a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	223d      	movs	r2, #61	; 0x3d
 8004af6:	2102      	movs	r1, #2
 8004af8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	0019      	movs	r1, r3
 8004b04:	0010      	movs	r0, r2
 8004b06:	f000 f9dd 	bl	8004ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2246      	movs	r2, #70	; 0x46
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	223e      	movs	r2, #62	; 0x3e
 8004b16:	2101      	movs	r1, #1
 8004b18:	5499      	strb	r1, [r3, r2]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	223f      	movs	r2, #63	; 0x3f
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	2101      	movs	r1, #1
 8004b28:	5499      	strb	r1, [r3, r2]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2241      	movs	r2, #65	; 0x41
 8004b2e:	2101      	movs	r1, #1
 8004b30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2242      	movs	r2, #66	; 0x42
 8004b36:	2101      	movs	r1, #1
 8004b38:	5499      	strb	r1, [r3, r2]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2243      	movs	r2, #67	; 0x43
 8004b3e:	2101      	movs	r1, #1
 8004b40:	5499      	strb	r1, [r3, r2]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2244      	movs	r2, #68	; 0x44
 8004b46:	2101      	movs	r1, #1
 8004b48:	5499      	strb	r1, [r3, r2]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2245      	movs	r2, #69	; 0x45
 8004b4e:	2101      	movs	r1, #1
 8004b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	223d      	movs	r2, #61	; 0x3d
 8004b56:	2101      	movs	r1, #1
 8004b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	223d      	movs	r2, #61	; 0x3d
 8004b70:	5c9b      	ldrb	r3, [r3, r2]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d001      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e035      	b.n	8004be8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	223d      	movs	r2, #61	; 0x3d
 8004b80:	2102      	movs	r1, #2
 8004b82:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2101      	movs	r1, #1
 8004b90:	430a      	orrs	r2, r1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <HAL_TIM_Base_Start_IT+0x8c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIM_Base_Start_IT+0x4e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <HAL_TIM_Base_Start_IT+0x90>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIM_Base_Start_IT+0x4e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <HAL_TIM_Base_Start_IT+0x94>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2207      	movs	r2, #7
 8004bba:	4013      	ands	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b06      	cmp	r3, #6
 8004bc2:	d010      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2101      	movs	r1, #1
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	e007      	b.n	8004be6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2101      	movs	r1, #1
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b004      	add	sp, #16
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40014000 	.word	0x40014000

08004bfc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2101      	movs	r1, #1
 8004c10:	438a      	bics	r2, r1
 8004c12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4a0d      	ldr	r2, [pc, #52]	; (8004c50 <HAL_TIM_Base_Stop_IT+0x54>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d10d      	bne.n	8004c3c <HAL_TIM_Base_Stop_IT+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4a0b      	ldr	r2, [pc, #44]	; (8004c54 <HAL_TIM_Base_Stop_IT+0x58>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d107      	bne.n	8004c3c <HAL_TIM_Base_Stop_IT+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	438a      	bics	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	223d      	movs	r2, #61	; 0x3d
 8004c40:	2101      	movs	r1, #1
 8004c42:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	00001111 	.word	0x00001111
 8004c54:	00000444 	.word	0x00000444

08004c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2202      	movs	r2, #2
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d124      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2202      	movs	r2, #2
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d11d      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2203      	movs	r2, #3
 8004c82:	4252      	negs	r2, r2
 8004c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2203      	movs	r2, #3
 8004c94:	4013      	ands	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 f8fa 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e007      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f000 f8ed 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f000 f8f9 	bl	8004ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d125      	bne.n	8004d12 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d11e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2205      	movs	r2, #5
 8004cda:	4252      	negs	r2, r2
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	23c0      	movs	r3, #192	; 0xc0
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 f8cd 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004cfa:	e007      	b.n	8004d0c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 f8c0 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 f8cc 	bl	8004ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d124      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2208      	movs	r2, #8
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d11d      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2209      	movs	r2, #9
 8004d34:	4252      	negs	r2, r2
 8004d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	2203      	movs	r2, #3
 8004d46:	4013      	ands	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 f8a1 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004d52:	e007      	b.n	8004d64 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	0018      	movs	r0, r3
 8004d58:	f000 f894 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f000 f8a0 	bl	8004ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2210      	movs	r2, #16
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d125      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2210      	movs	r2, #16
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d11e      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2211      	movs	r2, #17
 8004d8c:	4252      	negs	r2, r2
 8004d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2208      	movs	r2, #8
 8004d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	23c0      	movs	r3, #192	; 0xc0
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 f874 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e007      	b.n	8004dbe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 f867 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 f873 	bl	8004ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d10f      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d108      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2202      	movs	r2, #2
 8004de6:	4252      	negs	r2, r2
 8004de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7fb fff9 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b80      	cmp	r3, #128	; 0x80
 8004dfe:	d10f      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2280      	movs	r2, #128	; 0x80
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d108      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2281      	movs	r2, #129	; 0x81
 8004e14:	4252      	negs	r2, r2
 8004e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 f8d0 	bl	8004fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2240      	movs	r2, #64	; 0x40
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d10f      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2240      	movs	r2, #64	; 0x40
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d108      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2241      	movs	r2, #65	; 0x41
 8004e42:	4252      	negs	r2, r2
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f000 f833 	bl	8004eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2220      	movs	r2, #32
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d10f      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d108      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2221      	movs	r2, #33	; 0x21
 8004e70:	4252      	negs	r2, r2
 8004e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	0018      	movs	r0, r3
 8004e78:	f000 f89a 	bl	8004fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b002      	add	sp, #8
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <TIM_Base_SetConfig+0xd0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0x20>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a2e      	ldr	r2, [pc, #184]	; (8004f98 <TIM_Base_SetConfig+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2270      	movs	r2, #112	; 0x70
 8004ee8:	4393      	bics	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <TIM_Base_SetConfig+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <TIM_Base_SetConfig+0x62>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <TIM_Base_SetConfig+0xd4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00f      	beq.n	8004f26 <TIM_Base_SetConfig+0x62>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <TIM_Base_SetConfig+0xd8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_Base_SetConfig+0x62>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <TIM_Base_SetConfig+0xdc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_Base_SetConfig+0x62>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a22      	ldr	r2, [pc, #136]	; (8004fa4 <TIM_Base_SetConfig+0xe0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_Base_SetConfig+0x62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <TIM_Base_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d108      	bne.n	8004f38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <TIM_Base_SetConfig+0xe8>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	4393      	bics	r3, r2
 8004f3e:	001a      	movs	r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <TIM_Base_SetConfig+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <TIM_Base_SetConfig+0xba>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <TIM_Base_SetConfig+0xdc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <TIM_Base_SetConfig+0xba>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <TIM_Base_SetConfig+0xe0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_Base_SetConfig+0xba>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a0b      	ldr	r2, [pc, #44]	; (8004fa8 <TIM_Base_SetConfig+0xe4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d103      	bne.n	8004f86 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	615a      	str	r2, [r3, #20]
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40002000 	.word	0x40002000
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	fffffcff 	.word	0xfffffcff

08004fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b002      	add	sp, #8
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	1dbb      	adds	r3, r7, #6
 8004fde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d000      	beq.n	8004fea <HAL_UART_Transmit+0x1a>
 8004fe8:	e08d      	b.n	8005106 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_UART_Transmit+0x28>
 8004ff0:	1dbb      	adds	r3, r7, #6
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e085      	b.n	8005108 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	015b      	lsls	r3, r3, #5
 8005004:	429a      	cmp	r2, r3
 8005006:	d109      	bne.n	800501c <HAL_UART_Transmit+0x4c>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2201      	movs	r2, #1
 8005014:	4013      	ands	r3, r2
 8005016:	d001      	beq.n	800501c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e075      	b.n	8005108 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2284      	movs	r2, #132	; 0x84
 8005020:	2100      	movs	r1, #0
 8005022:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2221      	movs	r2, #33	; 0x21
 8005028:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502a:	f7fd fec3 	bl	8002db4 <HAL_GetTick>
 800502e:	0003      	movs	r3, r0
 8005030:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1dba      	adds	r2, r7, #6
 8005036:	2150      	movs	r1, #80	; 0x50
 8005038:	8812      	ldrh	r2, [r2, #0]
 800503a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1dba      	adds	r2, r7, #6
 8005040:	2152      	movs	r1, #82	; 0x52
 8005042:	8812      	ldrh	r2, [r2, #0]
 8005044:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	015b      	lsls	r3, r3, #5
 800504e:	429a      	cmp	r2, r3
 8005050:	d108      	bne.n	8005064 <HAL_UART_Transmit+0x94>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e003      	b.n	800506c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800506c:	e030      	b.n	80050d0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	0013      	movs	r3, r2
 8005078:	2200      	movs	r2, #0
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	f000 fae4 	bl	8005648 <UART_WaitOnFlagUntilTimeout>
 8005080:	1e03      	subs	r3, r0, #0
 8005082:	d004      	beq.n	800508e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e03c      	b.n	8005108 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	05d2      	lsls	r2, r2, #23
 800509e:	0dd2      	lsrs	r2, r2, #23
 80050a0:	b292      	uxth	r2, r2
 80050a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	3302      	adds	r3, #2
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e008      	b.n	80050be <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b292      	uxth	r2, r2
 80050b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2252      	movs	r2, #82	; 0x52
 80050c2:	5a9b      	ldrh	r3, [r3, r2]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b299      	uxth	r1, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2252      	movs	r2, #82	; 0x52
 80050ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2252      	movs	r2, #82	; 0x52
 80050d4:	5a9b      	ldrh	r3, [r3, r2]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1c8      	bne.n	800506e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	0013      	movs	r3, r2
 80050e6:	2200      	movs	r2, #0
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	f000 faad 	bl	8005648 <UART_WaitOnFlagUntilTimeout>
 80050ee:	1e03      	subs	r3, r0, #0
 80050f0:	d004      	beq.n	80050fc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e005      	b.n	8005108 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b008      	add	sp, #32
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005118:	231e      	movs	r3, #30
 800511a:	18fb      	adds	r3, r7, r3
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a8d      	ldr	r2, [pc, #564]	; (8005374 <UART_SetConfig+0x264>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a88      	ldr	r2, [pc, #544]	; (8005378 <UART_SetConfig+0x268>)
 8005156:	4013      	ands	r3, r2
 8005158:	0019      	movs	r1, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4a7f      	ldr	r2, [pc, #508]	; (800537c <UART_SetConfig+0x26c>)
 800517e:	4013      	ands	r3, r2
 8005180:	0019      	movs	r1, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	430a      	orrs	r2, r1
 800518a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7b      	ldr	r2, [pc, #492]	; (8005380 <UART_SetConfig+0x270>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d127      	bne.n	80051e6 <UART_SetConfig+0xd6>
 8005196:	4b7b      	ldr	r3, [pc, #492]	; (8005384 <UART_SetConfig+0x274>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	2203      	movs	r2, #3
 800519c:	4013      	ands	r3, r2
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d00d      	beq.n	80051be <UART_SetConfig+0xae>
 80051a2:	d81b      	bhi.n	80051dc <UART_SetConfig+0xcc>
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d014      	beq.n	80051d2 <UART_SetConfig+0xc2>
 80051a8:	d818      	bhi.n	80051dc <UART_SetConfig+0xcc>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <UART_SetConfig+0xa4>
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d00a      	beq.n	80051c8 <UART_SetConfig+0xb8>
 80051b2:	e013      	b.n	80051dc <UART_SetConfig+0xcc>
 80051b4:	231f      	movs	r3, #31
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e021      	b.n	8005202 <UART_SetConfig+0xf2>
 80051be:	231f      	movs	r3, #31
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	2202      	movs	r2, #2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e01c      	b.n	8005202 <UART_SetConfig+0xf2>
 80051c8:	231f      	movs	r3, #31
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	2204      	movs	r2, #4
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e017      	b.n	8005202 <UART_SetConfig+0xf2>
 80051d2:	231f      	movs	r3, #31
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	2208      	movs	r2, #8
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e012      	b.n	8005202 <UART_SetConfig+0xf2>
 80051dc:	231f      	movs	r3, #31
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	2210      	movs	r2, #16
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e00d      	b.n	8005202 <UART_SetConfig+0xf2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a67      	ldr	r2, [pc, #412]	; (8005388 <UART_SetConfig+0x278>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d104      	bne.n	80051fa <UART_SetConfig+0xea>
 80051f0:	231f      	movs	r3, #31
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e003      	b.n	8005202 <UART_SetConfig+0xf2>
 80051fa:	231f      	movs	r3, #31
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	2210      	movs	r2, #16
 8005200:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	429a      	cmp	r2, r3
 800520c:	d15c      	bne.n	80052c8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800520e:	231f      	movs	r3, #31
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d015      	beq.n	8005244 <UART_SetConfig+0x134>
 8005218:	dc18      	bgt.n	800524c <UART_SetConfig+0x13c>
 800521a:	2b04      	cmp	r3, #4
 800521c:	d00d      	beq.n	800523a <UART_SetConfig+0x12a>
 800521e:	dc15      	bgt.n	800524c <UART_SetConfig+0x13c>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <UART_SetConfig+0x11a>
 8005224:	2b02      	cmp	r3, #2
 8005226:	d005      	beq.n	8005234 <UART_SetConfig+0x124>
 8005228:	e010      	b.n	800524c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522a:	f7ff fb67 	bl	80048fc <HAL_RCC_GetPCLK1Freq>
 800522e:	0003      	movs	r3, r0
 8005230:	61bb      	str	r3, [r7, #24]
        break;
 8005232:	e012      	b.n	800525a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005234:	4b55      	ldr	r3, [pc, #340]	; (800538c <UART_SetConfig+0x27c>)
 8005236:	61bb      	str	r3, [r7, #24]
        break;
 8005238:	e00f      	b.n	800525a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523a:	f7ff faff 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800523e:	0003      	movs	r3, r0
 8005240:	61bb      	str	r3, [r7, #24]
        break;
 8005242:	e00a      	b.n	800525a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	61bb      	str	r3, [r7, #24]
        break;
 800524a:	e006      	b.n	800525a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005250:	231e      	movs	r3, #30
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
        break;
 8005258:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d100      	bne.n	8005262 <UART_SetConfig+0x152>
 8005260:	e07a      	b.n	8005358 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	005a      	lsls	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	18d2      	adds	r2, r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	0019      	movs	r1, r3
 8005274:	0010      	movs	r0, r2
 8005276:	f7fa ff51 	bl	800011c <__udivsi3>
 800527a:	0003      	movs	r3, r0
 800527c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b0f      	cmp	r3, #15
 8005282:	d91c      	bls.n	80052be <UART_SetConfig+0x1ae>
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	025b      	lsls	r3, r3, #9
 800528a:	429a      	cmp	r2, r3
 800528c:	d217      	bcs.n	80052be <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	b29a      	uxth	r2, r3
 8005292:	200e      	movs	r0, #14
 8005294:	183b      	adds	r3, r7, r0
 8005296:	210f      	movs	r1, #15
 8005298:	438a      	bics	r2, r1
 800529a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2207      	movs	r2, #7
 80052a4:	4013      	ands	r3, r2
 80052a6:	b299      	uxth	r1, r3
 80052a8:	183b      	adds	r3, r7, r0
 80052aa:	183a      	adds	r2, r7, r0
 80052ac:	8812      	ldrh	r2, [r2, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	183a      	adds	r2, r7, r0
 80052b8:	8812      	ldrh	r2, [r2, #0]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	e04c      	b.n	8005358 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80052be:	231e      	movs	r3, #30
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e047      	b.n	8005358 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052c8:	231f      	movs	r3, #31
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d015      	beq.n	80052fe <UART_SetConfig+0x1ee>
 80052d2:	dc18      	bgt.n	8005306 <UART_SetConfig+0x1f6>
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d00d      	beq.n	80052f4 <UART_SetConfig+0x1e4>
 80052d8:	dc15      	bgt.n	8005306 <UART_SetConfig+0x1f6>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <UART_SetConfig+0x1d4>
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d005      	beq.n	80052ee <UART_SetConfig+0x1de>
 80052e2:	e010      	b.n	8005306 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7ff fb0a 	bl	80048fc <HAL_RCC_GetPCLK1Freq>
 80052e8:	0003      	movs	r3, r0
 80052ea:	61bb      	str	r3, [r7, #24]
        break;
 80052ec:	e012      	b.n	8005314 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <UART_SetConfig+0x27c>)
 80052f0:	61bb      	str	r3, [r7, #24]
        break;
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f4:	f7ff faa2 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80052f8:	0003      	movs	r3, r0
 80052fa:	61bb      	str	r3, [r7, #24]
        break;
 80052fc:	e00a      	b.n	8005314 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	61bb      	str	r3, [r7, #24]
        break;
 8005304:	e006      	b.n	8005314 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800530a:	231e      	movs	r3, #30
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
        break;
 8005312:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01e      	beq.n	8005358 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085a      	lsrs	r2, r3, #1
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	18d2      	adds	r2, r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	0019      	movs	r1, r3
 800532a:	0010      	movs	r0, r2
 800532c:	f7fa fef6 	bl	800011c <__udivsi3>
 8005330:	0003      	movs	r3, r0
 8005332:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	d90a      	bls.n	8005350 <UART_SetConfig+0x240>
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	025b      	lsls	r3, r3, #9
 8005340:	429a      	cmp	r2, r3
 8005342:	d205      	bcs.n	8005350 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	e003      	b.n	8005358 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005350:	231e      	movs	r3, #30
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005364:	231e      	movs	r3, #30
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	781b      	ldrb	r3, [r3, #0]
}
 800536a:	0018      	movs	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	b008      	add	sp, #32
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	ffff69f3 	.word	0xffff69f3
 8005378:	ffffcfff 	.word	0xffffcfff
 800537c:	fffff4ff 	.word	0xfffff4ff
 8005380:	40013800 	.word	0x40013800
 8005384:	40021000 	.word	0x40021000
 8005388:	40004400 	.word	0x40004400
 800538c:	007a1200 	.word	0x007a1200

08005390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2201      	movs	r2, #1
 800539e:	4013      	ands	r3, r2
 80053a0:	d00b      	beq.n	80053ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a4a      	ldr	r2, [pc, #296]	; (80054d4 <UART_AdvFeatureConfig+0x144>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	0019      	movs	r1, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2202      	movs	r2, #2
 80053c0:	4013      	ands	r3, r2
 80053c2:	d00b      	beq.n	80053dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a43      	ldr	r2, [pc, #268]	; (80054d8 <UART_AdvFeatureConfig+0x148>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2204      	movs	r2, #4
 80053e2:	4013      	ands	r3, r2
 80053e4:	d00b      	beq.n	80053fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a3b      	ldr	r2, [pc, #236]	; (80054dc <UART_AdvFeatureConfig+0x14c>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	2208      	movs	r2, #8
 8005404:	4013      	ands	r3, r2
 8005406:	d00b      	beq.n	8005420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <UART_AdvFeatureConfig+0x150>)
 8005410:	4013      	ands	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2210      	movs	r2, #16
 8005426:	4013      	ands	r3, r2
 8005428:	d00b      	beq.n	8005442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <UART_AdvFeatureConfig+0x154>)
 8005432:	4013      	ands	r3, r2
 8005434:	0019      	movs	r1, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2220      	movs	r2, #32
 8005448:	4013      	ands	r3, r2
 800544a:	d00b      	beq.n	8005464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <UART_AdvFeatureConfig+0x158>)
 8005454:	4013      	ands	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	2240      	movs	r2, #64	; 0x40
 800546a:	4013      	ands	r3, r2
 800546c:	d01d      	beq.n	80054aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <UART_AdvFeatureConfig+0x15c>)
 8005476:	4013      	ands	r3, r2
 8005478:	0019      	movs	r1, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	035b      	lsls	r3, r3, #13
 800548e:	429a      	cmp	r2, r3
 8005490:	d10b      	bne.n	80054aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <UART_AdvFeatureConfig+0x160>)
 800549a:	4013      	ands	r3, r2
 800549c:	0019      	movs	r1, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2280      	movs	r2, #128	; 0x80
 80054b0:	4013      	ands	r3, r2
 80054b2:	d00b      	beq.n	80054cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4a0e      	ldr	r2, [pc, #56]	; (80054f4 <UART_AdvFeatureConfig+0x164>)
 80054bc:	4013      	ands	r3, r2
 80054be:	0019      	movs	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	fffdffff 	.word	0xfffdffff
 80054d8:	fffeffff 	.word	0xfffeffff
 80054dc:	fffbffff 	.word	0xfffbffff
 80054e0:	ffff7fff 	.word	0xffff7fff
 80054e4:	ffffefff 	.word	0xffffefff
 80054e8:	ffffdfff 	.word	0xffffdfff
 80054ec:	ffefffff 	.word	0xffefffff
 80054f0:	ff9fffff 	.word	0xff9fffff
 80054f4:	fff7ffff 	.word	0xfff7ffff

080054f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b092      	sub	sp, #72	; 0x48
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2284      	movs	r2, #132	; 0x84
 8005504:	2100      	movs	r1, #0
 8005506:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005508:	f7fd fc54 	bl	8002db4 <HAL_GetTick>
 800550c:	0003      	movs	r3, r0
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2208      	movs	r2, #8
 8005518:	4013      	ands	r3, r2
 800551a:	2b08      	cmp	r3, #8
 800551c:	d12c      	bne.n	8005578 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	0391      	lsls	r1, r2, #14
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4a46      	ldr	r2, [pc, #280]	; (8005640 <UART_CheckIdleState+0x148>)
 8005528:	9200      	str	r2, [sp, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	f000 f88c 	bl	8005648 <UART_WaitOnFlagUntilTimeout>
 8005530:	1e03      	subs	r3, r0, #0
 8005532:	d021      	beq.n	8005578 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
 800553e:	2301      	movs	r3, #1
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	438a      	bics	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2278      	movs	r2, #120	; 0x78
 8005570:	2100      	movs	r1, #0
 8005572:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e05f      	b.n	8005638 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2204      	movs	r2, #4
 8005580:	4013      	ands	r3, r2
 8005582:	2b04      	cmp	r3, #4
 8005584:	d146      	bne.n	8005614 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	2280      	movs	r2, #128	; 0x80
 800558a:	03d1      	lsls	r1, r2, #15
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <UART_CheckIdleState+0x148>)
 8005590:	9200      	str	r2, [sp, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	f000 f858 	bl	8005648 <UART_WaitOnFlagUntilTimeout>
 8005598:	1e03      	subs	r3, r0, #0
 800559a:	d03b      	beq.n	8005614 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559c:	f3ef 8310 	mrs	r3, PRIMASK
 80055a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80055a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
 80055a6:	2301      	movs	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f383 8810 	msr	PRIMASK, r3
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4921      	ldr	r1, [pc, #132]	; (8005644 <UART_CheckIdleState+0x14c>)
 80055be:	400a      	ands	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f383 8810 	msr	PRIMASK, r3
}
 80055cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ce:	f3ef 8310 	mrs	r3, PRIMASK
 80055d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80055d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
 80055d8:	2301      	movs	r3, #1
 80055da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2101      	movs	r1, #1
 80055f0:	438a      	bics	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	f383 8810 	msr	PRIMASK, r3
}
 80055fe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	2120      	movs	r1, #32
 8005606:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2278      	movs	r2, #120	; 0x78
 800560c:	2100      	movs	r1, #0
 800560e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e011      	b.n	8005638 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2280      	movs	r2, #128	; 0x80
 800561e:	2120      	movs	r1, #32
 8005620:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2278      	movs	r2, #120	; 0x78
 8005632:	2100      	movs	r1, #0
 8005634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	b010      	add	sp, #64	; 0x40
 800563e:	bd80      	pop	{r7, pc}
 8005640:	01ffffff 	.word	0x01ffffff
 8005644:	fffffedf 	.word	0xfffffedf

08005648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	1dfb      	adds	r3, r7, #7
 8005656:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005658:	e04b      	b.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	3301      	adds	r3, #1
 800565e:	d048      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005660:	f7fd fba8 	bl	8002db4 <HAL_GetTick>
 8005664:	0002      	movs	r2, r0
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	429a      	cmp	r2, r3
 800566e:	d302      	bcc.n	8005676 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e04b      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2204      	movs	r2, #4
 8005682:	4013      	ands	r3, r2
 8005684:	d035      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	2208      	movs	r2, #8
 800568e:	4013      	ands	r3, r2
 8005690:	2b08      	cmp	r3, #8
 8005692:	d111      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2208      	movs	r2, #8
 800569a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 f83c 	bl	800571c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2284      	movs	r2, #132	; 0x84
 80056a8:	2108      	movs	r1, #8
 80056aa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2278      	movs	r2, #120	; 0x78
 80056b0:	2100      	movs	r1, #0
 80056b2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e02c      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	401a      	ands	r2, r3
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d112      	bne.n	80056f2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	0112      	lsls	r2, r2, #4
 80056d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	0018      	movs	r0, r3
 80056da:	f000 f81f 	bl	800571c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2284      	movs	r2, #132	; 0x84
 80056e2:	2120      	movs	r1, #32
 80056e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2278      	movs	r2, #120	; 0x78
 80056ea:	2100      	movs	r1, #0
 80056ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e00f      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	425a      	negs	r2, r3
 8005702:	4153      	adcs	r3, r2
 8005704:	b2db      	uxtb	r3, r3
 8005706:	001a      	movs	r2, r3
 8005708:	1dfb      	adds	r3, r7, #7
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d0a4      	beq.n	800565a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	0018      	movs	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	b004      	add	sp, #16
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005724:	f3ef 8310 	mrs	r3, PRIMASK
 8005728:	617b      	str	r3, [r7, #20]
  return(result);
 800572a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
 800572e:	2301      	movs	r3, #1
 8005730:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f383 8810 	msr	PRIMASK, r3
}
 8005738:	46c0      	nop			; (mov r8, r8)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4926      	ldr	r1, [pc, #152]	; (80057e0 <UART_EndRxTransfer+0xc4>)
 8005746:	400a      	ands	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f383 8810 	msr	PRIMASK, r3
}
 8005754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005756:	f3ef 8310 	mrs	r3, PRIMASK
 800575a:	623b      	str	r3, [r7, #32]
  return(result);
 800575c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	633b      	str	r3, [r7, #48]	; 0x30
 8005760:	2301      	movs	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	f383 8810 	msr	PRIMASK, r3
}
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2101      	movs	r1, #1
 8005778:	438a      	bics	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	f383 8810 	msr	PRIMASK, r3
}
 8005786:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	2b01      	cmp	r3, #1
 800578e:	d118      	bne.n	80057c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005790:	f3ef 8310 	mrs	r3, PRIMASK
 8005794:	60bb      	str	r3, [r7, #8]
  return(result);
 8005796:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579a:	2301      	movs	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f383 8810 	msr	PRIMASK, r3
}
 80057a4:	46c0      	nop			; (mov r8, r8)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2110      	movs	r1, #16
 80057b2:	438a      	bics	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f383 8810 	msr	PRIMASK, r3
}
 80057c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2280      	movs	r2, #128	; 0x80
 80057c6:	2120      	movs	r1, #32
 80057c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	46bd      	mov	sp, r7
 80057da:	b00e      	add	sp, #56	; 0x38
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	fffffedf 	.word	0xfffffedf

080057e4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e05b      	b.n	80058b4 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2278      	movs	r2, #120	; 0x78
 8005808:	2100      	movs	r1, #0
 800580a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	0018      	movs	r0, r3
 8005810:	f7fd f94c 	bl	8002aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2224      	movs	r2, #36	; 0x24
 8005818:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2101      	movs	r1, #1
 8005826:	438a      	bics	r2, r1
 8005828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff fc6f 	bl	8005110 <UART_SetConfig>
 8005832:	0003      	movs	r3, r0
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e03b      	b.n	80058b4 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	0018      	movs	r0, r3
 8005848:	f7ff fda2 	bl	8005390 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2180      	movs	r1, #128	; 0x80
 8005858:	01c9      	lsls	r1, r1, #7
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a15      	ldr	r2, [pc, #84]	; (80058bc <HAL_RS485Ex_Init+0xd8>)
 8005866:	4013      	ands	r3, r2
 8005868:	0019      	movs	r1, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	055b      	lsls	r3, r3, #21
 8005878:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <HAL_RS485Ex_Init+0xdc>)
 800588c:	4013      	ands	r3, r2
 800588e:	0019      	movs	r1, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	430a      	orrs	r2, r1
 8005898:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2101      	movs	r1, #1
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fe23 	bl	80054f8 <UART_CheckIdleState>
 80058b2:	0003      	movs	r3, r0
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b006      	add	sp, #24
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	ffff7fff 	.word	0xffff7fff
 80058c0:	fc00ffff 	.word	0xfc00ffff

080058c4 <siprintf>:
 80058c4:	b40e      	push	{r1, r2, r3}
 80058c6:	b500      	push	{lr}
 80058c8:	490b      	ldr	r1, [pc, #44]	; (80058f8 <siprintf+0x34>)
 80058ca:	b09c      	sub	sp, #112	; 0x70
 80058cc:	ab1d      	add	r3, sp, #116	; 0x74
 80058ce:	9002      	str	r0, [sp, #8]
 80058d0:	9006      	str	r0, [sp, #24]
 80058d2:	9107      	str	r1, [sp, #28]
 80058d4:	9104      	str	r1, [sp, #16]
 80058d6:	4809      	ldr	r0, [pc, #36]	; (80058fc <siprintf+0x38>)
 80058d8:	4909      	ldr	r1, [pc, #36]	; (8005900 <siprintf+0x3c>)
 80058da:	cb04      	ldmia	r3!, {r2}
 80058dc:	9105      	str	r1, [sp, #20]
 80058de:	6800      	ldr	r0, [r0, #0]
 80058e0:	a902      	add	r1, sp, #8
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	f000 f9a2 	bl	8005c2c <_svfiprintf_r>
 80058e8:	2200      	movs	r2, #0
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	b01c      	add	sp, #112	; 0x70
 80058f0:	bc08      	pop	{r3}
 80058f2:	b003      	add	sp, #12
 80058f4:	4718      	bx	r3
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	7fffffff 	.word	0x7fffffff
 80058fc:	20000064 	.word	0x20000064
 8005900:	ffff0208 	.word	0xffff0208

08005904 <memset>:
 8005904:	0003      	movs	r3, r0
 8005906:	1882      	adds	r2, r0, r2
 8005908:	4293      	cmp	r3, r2
 800590a:	d100      	bne.n	800590e <memset+0xa>
 800590c:	4770      	bx	lr
 800590e:	7019      	strb	r1, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	e7f9      	b.n	8005908 <memset+0x4>

08005914 <__errno>:
 8005914:	4b01      	ldr	r3, [pc, #4]	; (800591c <__errno+0x8>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	4770      	bx	lr
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	20000064 	.word	0x20000064

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	2600      	movs	r6, #0
 8005924:	4c0c      	ldr	r4, [pc, #48]	; (8005958 <__libc_init_array+0x38>)
 8005926:	4d0d      	ldr	r5, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005928:	1b64      	subs	r4, r4, r5
 800592a:	10a4      	asrs	r4, r4, #2
 800592c:	42a6      	cmp	r6, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	2600      	movs	r6, #0
 8005932:	f000 fc6d 	bl	8006210 <_init>
 8005936:	4c0a      	ldr	r4, [pc, #40]	; (8005960 <__libc_init_array+0x40>)
 8005938:	4d0a      	ldr	r5, [pc, #40]	; (8005964 <__libc_init_array+0x44>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	42a6      	cmp	r6, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	00b3      	lsls	r3, r6, #2
 8005946:	58eb      	ldr	r3, [r5, r3]
 8005948:	4798      	blx	r3
 800594a:	3601      	adds	r6, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	00b3      	lsls	r3, r6, #2
 8005950:	58eb      	ldr	r3, [r5, r3]
 8005952:	4798      	blx	r3
 8005954:	3601      	adds	r6, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	080064d0 	.word	0x080064d0
 800595c:	080064d0 	.word	0x080064d0
 8005960:	080064d4 	.word	0x080064d4
 8005964:	080064d0 	.word	0x080064d0

08005968 <__retarget_lock_acquire_recursive>:
 8005968:	4770      	bx	lr

0800596a <__retarget_lock_release_recursive>:
 800596a:	4770      	bx	lr

0800596c <_free_r>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	0005      	movs	r5, r0
 8005970:	2900      	cmp	r1, #0
 8005972:	d010      	beq.n	8005996 <_free_r+0x2a>
 8005974:	1f0c      	subs	r4, r1, #4
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	da00      	bge.n	800597e <_free_r+0x12>
 800597c:	18e4      	adds	r4, r4, r3
 800597e:	0028      	movs	r0, r5
 8005980:	f000 f8e2 	bl	8005b48 <__malloc_lock>
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <_free_r+0x90>)
 8005986:	6813      	ldr	r3, [r2, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <_free_r+0x2c>
 800598c:	6063      	str	r3, [r4, #4]
 800598e:	6014      	str	r4, [r2, #0]
 8005990:	0028      	movs	r0, r5
 8005992:	f000 f8e1 	bl	8005b58 <__malloc_unlock>
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	42a3      	cmp	r3, r4
 800599a:	d908      	bls.n	80059ae <_free_r+0x42>
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	1821      	adds	r1, r4, r0
 80059a0:	428b      	cmp	r3, r1
 80059a2:	d1f3      	bne.n	800598c <_free_r+0x20>
 80059a4:	6819      	ldr	r1, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	1809      	adds	r1, r1, r0
 80059aa:	6021      	str	r1, [r4, #0]
 80059ac:	e7ee      	b.n	800598c <_free_r+0x20>
 80059ae:	001a      	movs	r2, r3
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <_free_r+0x4e>
 80059b6:	42a3      	cmp	r3, r4
 80059b8:	d9f9      	bls.n	80059ae <_free_r+0x42>
 80059ba:	6811      	ldr	r1, [r2, #0]
 80059bc:	1850      	adds	r0, r2, r1
 80059be:	42a0      	cmp	r0, r4
 80059c0:	d10b      	bne.n	80059da <_free_r+0x6e>
 80059c2:	6820      	ldr	r0, [r4, #0]
 80059c4:	1809      	adds	r1, r1, r0
 80059c6:	1850      	adds	r0, r2, r1
 80059c8:	6011      	str	r1, [r2, #0]
 80059ca:	4283      	cmp	r3, r0
 80059cc:	d1e0      	bne.n	8005990 <_free_r+0x24>
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	1841      	adds	r1, r0, r1
 80059d4:	6011      	str	r1, [r2, #0]
 80059d6:	6053      	str	r3, [r2, #4]
 80059d8:	e7da      	b.n	8005990 <_free_r+0x24>
 80059da:	42a0      	cmp	r0, r4
 80059dc:	d902      	bls.n	80059e4 <_free_r+0x78>
 80059de:	230c      	movs	r3, #12
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	e7d5      	b.n	8005990 <_free_r+0x24>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	1821      	adds	r1, r4, r0
 80059e8:	428b      	cmp	r3, r1
 80059ea:	d103      	bne.n	80059f4 <_free_r+0x88>
 80059ec:	6819      	ldr	r1, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	1809      	adds	r1, r1, r0
 80059f2:	6021      	str	r1, [r4, #0]
 80059f4:	6063      	str	r3, [r4, #4]
 80059f6:	6054      	str	r4, [r2, #4]
 80059f8:	e7ca      	b.n	8005990 <_free_r+0x24>
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	20000370 	.word	0x20000370

08005a00 <sbrk_aligned>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	4e0f      	ldr	r6, [pc, #60]	; (8005a40 <sbrk_aligned+0x40>)
 8005a04:	000d      	movs	r5, r1
 8005a06:	6831      	ldr	r1, [r6, #0]
 8005a08:	0004      	movs	r4, r0
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d102      	bne.n	8005a14 <sbrk_aligned+0x14>
 8005a0e:	f000 fba1 	bl	8006154 <_sbrk_r>
 8005a12:	6030      	str	r0, [r6, #0]
 8005a14:	0029      	movs	r1, r5
 8005a16:	0020      	movs	r0, r4
 8005a18:	f000 fb9c 	bl	8006154 <_sbrk_r>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d00a      	beq.n	8005a36 <sbrk_aligned+0x36>
 8005a20:	2303      	movs	r3, #3
 8005a22:	1cc5      	adds	r5, r0, #3
 8005a24:	439d      	bics	r5, r3
 8005a26:	42a8      	cmp	r0, r5
 8005a28:	d007      	beq.n	8005a3a <sbrk_aligned+0x3a>
 8005a2a:	1a29      	subs	r1, r5, r0
 8005a2c:	0020      	movs	r0, r4
 8005a2e:	f000 fb91 	bl	8006154 <_sbrk_r>
 8005a32:	3001      	adds	r0, #1
 8005a34:	d101      	bne.n	8005a3a <sbrk_aligned+0x3a>
 8005a36:	2501      	movs	r5, #1
 8005a38:	426d      	negs	r5, r5
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	20000374 	.word	0x20000374

08005a44 <_malloc_r>:
 8005a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a46:	2203      	movs	r2, #3
 8005a48:	1ccb      	adds	r3, r1, #3
 8005a4a:	4393      	bics	r3, r2
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	0006      	movs	r6, r0
 8005a50:	001f      	movs	r7, r3
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d238      	bcs.n	8005ac8 <_malloc_r+0x84>
 8005a56:	270c      	movs	r7, #12
 8005a58:	42b9      	cmp	r1, r7
 8005a5a:	d837      	bhi.n	8005acc <_malloc_r+0x88>
 8005a5c:	0030      	movs	r0, r6
 8005a5e:	f000 f873 	bl	8005b48 <__malloc_lock>
 8005a62:	4b38      	ldr	r3, [pc, #224]	; (8005b44 <_malloc_r+0x100>)
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	001c      	movs	r4, r3
 8005a6a:	2c00      	cmp	r4, #0
 8005a6c:	d133      	bne.n	8005ad6 <_malloc_r+0x92>
 8005a6e:	0039      	movs	r1, r7
 8005a70:	0030      	movs	r0, r6
 8005a72:	f7ff ffc5 	bl	8005a00 <sbrk_aligned>
 8005a76:	0004      	movs	r4, r0
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d15e      	bne.n	8005b3a <_malloc_r+0xf6>
 8005a7c:	9b00      	ldr	r3, [sp, #0]
 8005a7e:	681c      	ldr	r4, [r3, #0]
 8005a80:	0025      	movs	r5, r4
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	d14e      	bne.n	8005b24 <_malloc_r+0xe0>
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	d051      	beq.n	8005b2e <_malloc_r+0xea>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	0029      	movs	r1, r5
 8005a8e:	18e3      	adds	r3, r4, r3
 8005a90:	0030      	movs	r0, r6
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	f000 fb5e 	bl	8006154 <_sbrk_r>
 8005a98:	9b01      	ldr	r3, [sp, #4]
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	d147      	bne.n	8005b2e <_malloc_r+0xea>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	0030      	movs	r0, r6
 8005aa2:	1aff      	subs	r7, r7, r3
 8005aa4:	0039      	movs	r1, r7
 8005aa6:	f7ff ffab 	bl	8005a00 <sbrk_aligned>
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d03f      	beq.n	8005b2e <_malloc_r+0xea>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	19db      	adds	r3, r3, r7
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d040      	beq.n	8005b3e <_malloc_r+0xfa>
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	42a2      	cmp	r2, r4
 8005ac0:	d133      	bne.n	8005b2a <_malloc_r+0xe6>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	e014      	b.n	8005af2 <_malloc_r+0xae>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	dac5      	bge.n	8005a58 <_malloc_r+0x14>
 8005acc:	230c      	movs	r3, #12
 8005ace:	2500      	movs	r5, #0
 8005ad0:	6033      	str	r3, [r6, #0]
 8005ad2:	0028      	movs	r0, r5
 8005ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ad6:	6821      	ldr	r1, [r4, #0]
 8005ad8:	1bc9      	subs	r1, r1, r7
 8005ada:	d420      	bmi.n	8005b1e <_malloc_r+0xda>
 8005adc:	290b      	cmp	r1, #11
 8005ade:	d918      	bls.n	8005b12 <_malloc_r+0xce>
 8005ae0:	19e2      	adds	r2, r4, r7
 8005ae2:	6027      	str	r7, [r4, #0]
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	d112      	bne.n	8005b0e <_malloc_r+0xca>
 8005ae8:	9b00      	ldr	r3, [sp, #0]
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	6863      	ldr	r3, [r4, #4]
 8005aee:	6011      	str	r1, [r2, #0]
 8005af0:	6053      	str	r3, [r2, #4]
 8005af2:	0030      	movs	r0, r6
 8005af4:	0025      	movs	r5, r4
 8005af6:	f000 f82f 	bl	8005b58 <__malloc_unlock>
 8005afa:	2207      	movs	r2, #7
 8005afc:	350b      	adds	r5, #11
 8005afe:	1d23      	adds	r3, r4, #4
 8005b00:	4395      	bics	r5, r2
 8005b02:	1aea      	subs	r2, r5, r3
 8005b04:	429d      	cmp	r5, r3
 8005b06:	d0e4      	beq.n	8005ad2 <_malloc_r+0x8e>
 8005b08:	1b5b      	subs	r3, r3, r5
 8005b0a:	50a3      	str	r3, [r4, r2]
 8005b0c:	e7e1      	b.n	8005ad2 <_malloc_r+0x8e>
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	e7ec      	b.n	8005aec <_malloc_r+0xa8>
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d1d5      	bne.n	8005ac4 <_malloc_r+0x80>
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e7e9      	b.n	8005af2 <_malloc_r+0xae>
 8005b1e:	0023      	movs	r3, r4
 8005b20:	6864      	ldr	r4, [r4, #4]
 8005b22:	e7a2      	b.n	8005a6a <_malloc_r+0x26>
 8005b24:	002c      	movs	r4, r5
 8005b26:	686d      	ldr	r5, [r5, #4]
 8005b28:	e7ab      	b.n	8005a82 <_malloc_r+0x3e>
 8005b2a:	0013      	movs	r3, r2
 8005b2c:	e7c4      	b.n	8005ab8 <_malloc_r+0x74>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	0030      	movs	r0, r6
 8005b32:	6033      	str	r3, [r6, #0]
 8005b34:	f000 f810 	bl	8005b58 <__malloc_unlock>
 8005b38:	e7cb      	b.n	8005ad2 <_malloc_r+0x8e>
 8005b3a:	6027      	str	r7, [r4, #0]
 8005b3c:	e7d9      	b.n	8005af2 <_malloc_r+0xae>
 8005b3e:	605b      	str	r3, [r3, #4]
 8005b40:	deff      	udf	#255	; 0xff
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	20000370 	.word	0x20000370

08005b48 <__malloc_lock>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	4802      	ldr	r0, [pc, #8]	; (8005b54 <__malloc_lock+0xc>)
 8005b4c:	f7ff ff0c 	bl	8005968 <__retarget_lock_acquire_recursive>
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	2000036c 	.word	0x2000036c

08005b58 <__malloc_unlock>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4802      	ldr	r0, [pc, #8]	; (8005b64 <__malloc_unlock+0xc>)
 8005b5c:	f7ff ff05 	bl	800596a <__retarget_lock_release_recursive>
 8005b60:	bd10      	pop	{r4, pc}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	2000036c 	.word	0x2000036c

08005b68 <__ssputs_r>:
 8005b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	9203      	str	r2, [sp, #12]
 8005b70:	688e      	ldr	r6, [r1, #8]
 8005b72:	9a01      	ldr	r2, [sp, #4]
 8005b74:	0007      	movs	r7, r0
 8005b76:	000c      	movs	r4, r1
 8005b78:	680b      	ldr	r3, [r1, #0]
 8005b7a:	4296      	cmp	r6, r2
 8005b7c:	d831      	bhi.n	8005be2 <__ssputs_r+0x7a>
 8005b7e:	898a      	ldrh	r2, [r1, #12]
 8005b80:	2190      	movs	r1, #144	; 0x90
 8005b82:	00c9      	lsls	r1, r1, #3
 8005b84:	420a      	tst	r2, r1
 8005b86:	d029      	beq.n	8005bdc <__ssputs_r+0x74>
 8005b88:	2003      	movs	r0, #3
 8005b8a:	6921      	ldr	r1, [r4, #16]
 8005b8c:	1a5b      	subs	r3, r3, r1
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	6963      	ldr	r3, [r4, #20]
 8005b92:	4343      	muls	r3, r0
 8005b94:	0fdd      	lsrs	r5, r3, #31
 8005b96:	18ed      	adds	r5, r5, r3
 8005b98:	9b01      	ldr	r3, [sp, #4]
 8005b9a:	9802      	ldr	r0, [sp, #8]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	181b      	adds	r3, r3, r0
 8005ba0:	106d      	asrs	r5, r5, #1
 8005ba2:	42ab      	cmp	r3, r5
 8005ba4:	d900      	bls.n	8005ba8 <__ssputs_r+0x40>
 8005ba6:	001d      	movs	r5, r3
 8005ba8:	0552      	lsls	r2, r2, #21
 8005baa:	d529      	bpl.n	8005c00 <__ssputs_r+0x98>
 8005bac:	0029      	movs	r1, r5
 8005bae:	0038      	movs	r0, r7
 8005bb0:	f7ff ff48 	bl	8005a44 <_malloc_r>
 8005bb4:	1e06      	subs	r6, r0, #0
 8005bb6:	d02d      	beq.n	8005c14 <__ssputs_r+0xac>
 8005bb8:	9a02      	ldr	r2, [sp, #8]
 8005bba:	6921      	ldr	r1, [r4, #16]
 8005bbc:	f000 fae7 	bl	800618e <memcpy>
 8005bc0:	89a2      	ldrh	r2, [r4, #12]
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <__ssputs_r+0xc0>)
 8005bc4:	401a      	ands	r2, r3
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	9b02      	ldr	r3, [sp, #8]
 8005bce:	6126      	str	r6, [r4, #16]
 8005bd0:	18f6      	adds	r6, r6, r3
 8005bd2:	6026      	str	r6, [r4, #0]
 8005bd4:	6165      	str	r5, [r4, #20]
 8005bd6:	9e01      	ldr	r6, [sp, #4]
 8005bd8:	1aed      	subs	r5, r5, r3
 8005bda:	60a5      	str	r5, [r4, #8]
 8005bdc:	9b01      	ldr	r3, [sp, #4]
 8005bde:	429e      	cmp	r6, r3
 8005be0:	d900      	bls.n	8005be4 <__ssputs_r+0x7c>
 8005be2:	9e01      	ldr	r6, [sp, #4]
 8005be4:	0032      	movs	r2, r6
 8005be6:	9903      	ldr	r1, [sp, #12]
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	f000 fa9f 	bl	800612c <memmove>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	68a3      	ldr	r3, [r4, #8]
 8005bf2:	1b9b      	subs	r3, r3, r6
 8005bf4:	60a3      	str	r3, [r4, #8]
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	199b      	adds	r3, r3, r6
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	b005      	add	sp, #20
 8005bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c00:	002a      	movs	r2, r5
 8005c02:	0038      	movs	r0, r7
 8005c04:	f000 facc 	bl	80061a0 <_realloc_r>
 8005c08:	1e06      	subs	r6, r0, #0
 8005c0a:	d1df      	bne.n	8005bcc <__ssputs_r+0x64>
 8005c0c:	0038      	movs	r0, r7
 8005c0e:	6921      	ldr	r1, [r4, #16]
 8005c10:	f7ff feac 	bl	800596c <_free_r>
 8005c14:	230c      	movs	r3, #12
 8005c16:	2001      	movs	r0, #1
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	89a2      	ldrh	r2, [r4, #12]
 8005c1c:	3334      	adds	r3, #52	; 0x34
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	4240      	negs	r0, r0
 8005c24:	e7ea      	b.n	8005bfc <__ssputs_r+0x94>
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	fffffb7f 	.word	0xfffffb7f

08005c2c <_svfiprintf_r>:
 8005c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2e:	b0a1      	sub	sp, #132	; 0x84
 8005c30:	9003      	str	r0, [sp, #12]
 8005c32:	001d      	movs	r5, r3
 8005c34:	898b      	ldrh	r3, [r1, #12]
 8005c36:	000f      	movs	r7, r1
 8005c38:	0016      	movs	r6, r2
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	d511      	bpl.n	8005c62 <_svfiprintf_r+0x36>
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10e      	bne.n	8005c62 <_svfiprintf_r+0x36>
 8005c44:	2140      	movs	r1, #64	; 0x40
 8005c46:	f7ff fefd 	bl	8005a44 <_malloc_r>
 8005c4a:	6038      	str	r0, [r7, #0]
 8005c4c:	6138      	str	r0, [r7, #16]
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d105      	bne.n	8005c5e <_svfiprintf_r+0x32>
 8005c52:	230c      	movs	r3, #12
 8005c54:	9a03      	ldr	r2, [sp, #12]
 8005c56:	3801      	subs	r0, #1
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	b021      	add	sp, #132	; 0x84
 8005c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c5e:	2340      	movs	r3, #64	; 0x40
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	2300      	movs	r3, #0
 8005c64:	ac08      	add	r4, sp, #32
 8005c66:	6163      	str	r3, [r4, #20]
 8005c68:	3320      	adds	r3, #32
 8005c6a:	7663      	strb	r3, [r4, #25]
 8005c6c:	3310      	adds	r3, #16
 8005c6e:	76a3      	strb	r3, [r4, #26]
 8005c70:	9507      	str	r5, [sp, #28]
 8005c72:	0035      	movs	r5, r6
 8005c74:	782b      	ldrb	r3, [r5, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <_svfiprintf_r+0x52>
 8005c7a:	2b25      	cmp	r3, #37	; 0x25
 8005c7c:	d148      	bne.n	8005d10 <_svfiprintf_r+0xe4>
 8005c7e:	1bab      	subs	r3, r5, r6
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	42b5      	cmp	r5, r6
 8005c84:	d00b      	beq.n	8005c9e <_svfiprintf_r+0x72>
 8005c86:	0032      	movs	r2, r6
 8005c88:	0039      	movs	r1, r7
 8005c8a:	9803      	ldr	r0, [sp, #12]
 8005c8c:	f7ff ff6c 	bl	8005b68 <__ssputs_r>
 8005c90:	3001      	adds	r0, #1
 8005c92:	d100      	bne.n	8005c96 <_svfiprintf_r+0x6a>
 8005c94:	e0af      	b.n	8005df6 <_svfiprintf_r+0x1ca>
 8005c96:	6963      	ldr	r3, [r4, #20]
 8005c98:	9a05      	ldr	r2, [sp, #20]
 8005c9a:	189b      	adds	r3, r3, r2
 8005c9c:	6163      	str	r3, [r4, #20]
 8005c9e:	782b      	ldrb	r3, [r5, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d100      	bne.n	8005ca6 <_svfiprintf_r+0x7a>
 8005ca4:	e0a7      	b.n	8005df6 <_svfiprintf_r+0x1ca>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4252      	negs	r2, r2
 8005cac:	6062      	str	r2, [r4, #4]
 8005cae:	a904      	add	r1, sp, #16
 8005cb0:	3254      	adds	r2, #84	; 0x54
 8005cb2:	1852      	adds	r2, r2, r1
 8005cb4:	1c6e      	adds	r6, r5, #1
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	60e3      	str	r3, [r4, #12]
 8005cba:	60a3      	str	r3, [r4, #8]
 8005cbc:	7013      	strb	r3, [r2, #0]
 8005cbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8005cc0:	4b55      	ldr	r3, [pc, #340]	; (8005e18 <_svfiprintf_r+0x1ec>)
 8005cc2:	2205      	movs	r2, #5
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	7831      	ldrb	r1, [r6, #0]
 8005cc8:	9305      	str	r3, [sp, #20]
 8005cca:	f000 fa55 	bl	8006178 <memchr>
 8005cce:	1c75      	adds	r5, r6, #1
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d11f      	bne.n	8005d14 <_svfiprintf_r+0xe8>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	06d3      	lsls	r3, r2, #27
 8005cd8:	d504      	bpl.n	8005ce4 <_svfiprintf_r+0xb8>
 8005cda:	2353      	movs	r3, #83	; 0x53
 8005cdc:	a904      	add	r1, sp, #16
 8005cde:	185b      	adds	r3, r3, r1
 8005ce0:	2120      	movs	r1, #32
 8005ce2:	7019      	strb	r1, [r3, #0]
 8005ce4:	0713      	lsls	r3, r2, #28
 8005ce6:	d504      	bpl.n	8005cf2 <_svfiprintf_r+0xc6>
 8005ce8:	2353      	movs	r3, #83	; 0x53
 8005cea:	a904      	add	r1, sp, #16
 8005cec:	185b      	adds	r3, r3, r1
 8005cee:	212b      	movs	r1, #43	; 0x2b
 8005cf0:	7019      	strb	r1, [r3, #0]
 8005cf2:	7833      	ldrb	r3, [r6, #0]
 8005cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf6:	d016      	beq.n	8005d26 <_svfiprintf_r+0xfa>
 8005cf8:	0035      	movs	r5, r6
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	200a      	movs	r0, #10
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	782a      	ldrb	r2, [r5, #0]
 8005d02:	1c6e      	adds	r6, r5, #1
 8005d04:	3a30      	subs	r2, #48	; 0x30
 8005d06:	2a09      	cmp	r2, #9
 8005d08:	d94e      	bls.n	8005da8 <_svfiprintf_r+0x17c>
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	d111      	bne.n	8005d32 <_svfiprintf_r+0x106>
 8005d0e:	e017      	b.n	8005d40 <_svfiprintf_r+0x114>
 8005d10:	3501      	adds	r5, #1
 8005d12:	e7af      	b.n	8005c74 <_svfiprintf_r+0x48>
 8005d14:	9b05      	ldr	r3, [sp, #20]
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	1ac0      	subs	r0, r0, r3
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4083      	lsls	r3, r0
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	002e      	movs	r6, r5
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	e7cc      	b.n	8005cc0 <_svfiprintf_r+0x94>
 8005d26:	9b07      	ldr	r3, [sp, #28]
 8005d28:	1d19      	adds	r1, r3, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	9107      	str	r1, [sp, #28]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	db01      	blt.n	8005d36 <_svfiprintf_r+0x10a>
 8005d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d34:	e004      	b.n	8005d40 <_svfiprintf_r+0x114>
 8005d36:	425b      	negs	r3, r3
 8005d38:	60e3      	str	r3, [r4, #12]
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	782b      	ldrb	r3, [r5, #0]
 8005d42:	2b2e      	cmp	r3, #46	; 0x2e
 8005d44:	d10a      	bne.n	8005d5c <_svfiprintf_r+0x130>
 8005d46:	786b      	ldrb	r3, [r5, #1]
 8005d48:	2b2a      	cmp	r3, #42	; 0x2a
 8005d4a:	d135      	bne.n	8005db8 <_svfiprintf_r+0x18c>
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	3502      	adds	r5, #2
 8005d50:	1d1a      	adds	r2, r3, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	9207      	str	r2, [sp, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	db2b      	blt.n	8005db2 <_svfiprintf_r+0x186>
 8005d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5c:	4e2f      	ldr	r6, [pc, #188]	; (8005e1c <_svfiprintf_r+0x1f0>)
 8005d5e:	2203      	movs	r2, #3
 8005d60:	0030      	movs	r0, r6
 8005d62:	7829      	ldrb	r1, [r5, #0]
 8005d64:	f000 fa08 	bl	8006178 <memchr>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d006      	beq.n	8005d7a <_svfiprintf_r+0x14e>
 8005d6c:	2340      	movs	r3, #64	; 0x40
 8005d6e:	1b80      	subs	r0, r0, r6
 8005d70:	4083      	lsls	r3, r0
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	3501      	adds	r5, #1
 8005d76:	4313      	orrs	r3, r2
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	7829      	ldrb	r1, [r5, #0]
 8005d7c:	2206      	movs	r2, #6
 8005d7e:	4828      	ldr	r0, [pc, #160]	; (8005e20 <_svfiprintf_r+0x1f4>)
 8005d80:	1c6e      	adds	r6, r5, #1
 8005d82:	7621      	strb	r1, [r4, #24]
 8005d84:	f000 f9f8 	bl	8006178 <memchr>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d03c      	beq.n	8005e06 <_svfiprintf_r+0x1da>
 8005d8c:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <_svfiprintf_r+0x1f8>)
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d125      	bne.n	8005dde <_svfiprintf_r+0x1b2>
 8005d92:	2207      	movs	r2, #7
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	3307      	adds	r3, #7
 8005d98:	4393      	bics	r3, r2
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	9307      	str	r3, [sp, #28]
 8005d9e:	6963      	ldr	r3, [r4, #20]
 8005da0:	9a04      	ldr	r2, [sp, #16]
 8005da2:	189b      	adds	r3, r3, r2
 8005da4:	6163      	str	r3, [r4, #20]
 8005da6:	e764      	b.n	8005c72 <_svfiprintf_r+0x46>
 8005da8:	4343      	muls	r3, r0
 8005daa:	0035      	movs	r5, r6
 8005dac:	2101      	movs	r1, #1
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	e7a6      	b.n	8005d00 <_svfiprintf_r+0xd4>
 8005db2:	2301      	movs	r3, #1
 8005db4:	425b      	negs	r3, r3
 8005db6:	e7d0      	b.n	8005d5a <_svfiprintf_r+0x12e>
 8005db8:	2300      	movs	r3, #0
 8005dba:	200a      	movs	r0, #10
 8005dbc:	001a      	movs	r2, r3
 8005dbe:	3501      	adds	r5, #1
 8005dc0:	6063      	str	r3, [r4, #4]
 8005dc2:	7829      	ldrb	r1, [r5, #0]
 8005dc4:	1c6e      	adds	r6, r5, #1
 8005dc6:	3930      	subs	r1, #48	; 0x30
 8005dc8:	2909      	cmp	r1, #9
 8005dca:	d903      	bls.n	8005dd4 <_svfiprintf_r+0x1a8>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0c5      	beq.n	8005d5c <_svfiprintf_r+0x130>
 8005dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8005dd2:	e7c3      	b.n	8005d5c <_svfiprintf_r+0x130>
 8005dd4:	4342      	muls	r2, r0
 8005dd6:	0035      	movs	r5, r6
 8005dd8:	2301      	movs	r3, #1
 8005dda:	1852      	adds	r2, r2, r1
 8005ddc:	e7f1      	b.n	8005dc2 <_svfiprintf_r+0x196>
 8005dde:	aa07      	add	r2, sp, #28
 8005de0:	9200      	str	r2, [sp, #0]
 8005de2:	0021      	movs	r1, r4
 8005de4:	003a      	movs	r2, r7
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <_svfiprintf_r+0x1fc>)
 8005de8:	9803      	ldr	r0, [sp, #12]
 8005dea:	e000      	b.n	8005dee <_svfiprintf_r+0x1c2>
 8005dec:	bf00      	nop
 8005dee:	9004      	str	r0, [sp, #16]
 8005df0:	9b04      	ldr	r3, [sp, #16]
 8005df2:	3301      	adds	r3, #1
 8005df4:	d1d3      	bne.n	8005d9e <_svfiprintf_r+0x172>
 8005df6:	89bb      	ldrh	r3, [r7, #12]
 8005df8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dfa:	065b      	lsls	r3, r3, #25
 8005dfc:	d400      	bmi.n	8005e00 <_svfiprintf_r+0x1d4>
 8005dfe:	e72c      	b.n	8005c5a <_svfiprintf_r+0x2e>
 8005e00:	2001      	movs	r0, #1
 8005e02:	4240      	negs	r0, r0
 8005e04:	e729      	b.n	8005c5a <_svfiprintf_r+0x2e>
 8005e06:	aa07      	add	r2, sp, #28
 8005e08:	9200      	str	r2, [sp, #0]
 8005e0a:	0021      	movs	r1, r4
 8005e0c:	003a      	movs	r2, r7
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <_svfiprintf_r+0x1fc>)
 8005e10:	9803      	ldr	r0, [sp, #12]
 8005e12:	f000 f87b 	bl	8005f0c <_printf_i>
 8005e16:	e7ea      	b.n	8005dee <_svfiprintf_r+0x1c2>
 8005e18:	0800649c 	.word	0x0800649c
 8005e1c:	080064a2 	.word	0x080064a2
 8005e20:	080064a6 	.word	0x080064a6
 8005e24:	00000000 	.word	0x00000000
 8005e28:	08005b69 	.word	0x08005b69

08005e2c <_printf_common>:
 8005e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2e:	0016      	movs	r6, r2
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	688a      	ldr	r2, [r1, #8]
 8005e34:	690b      	ldr	r3, [r1, #16]
 8005e36:	000c      	movs	r4, r1
 8005e38:	9000      	str	r0, [sp, #0]
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	da00      	bge.n	8005e40 <_printf_common+0x14>
 8005e3e:	0013      	movs	r3, r2
 8005e40:	0022      	movs	r2, r4
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	3243      	adds	r2, #67	; 0x43
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	d001      	beq.n	8005e50 <_printf_common+0x24>
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	6033      	str	r3, [r6, #0]
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	069b      	lsls	r3, r3, #26
 8005e54:	d502      	bpl.n	8005e5c <_printf_common+0x30>
 8005e56:	6833      	ldr	r3, [r6, #0]
 8005e58:	3302      	adds	r3, #2
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	2306      	movs	r3, #6
 8005e60:	0015      	movs	r5, r2
 8005e62:	401d      	ands	r5, r3
 8005e64:	421a      	tst	r2, r3
 8005e66:	d027      	beq.n	8005eb8 <_printf_common+0x8c>
 8005e68:	0023      	movs	r3, r4
 8005e6a:	3343      	adds	r3, #67	; 0x43
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	1e5a      	subs	r2, r3, #1
 8005e70:	4193      	sbcs	r3, r2
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d430      	bmi.n	8005eda <_printf_common+0xae>
 8005e78:	0022      	movs	r2, r4
 8005e7a:	9901      	ldr	r1, [sp, #4]
 8005e7c:	9800      	ldr	r0, [sp, #0]
 8005e7e:	9d08      	ldr	r5, [sp, #32]
 8005e80:	3243      	adds	r2, #67	; 0x43
 8005e82:	47a8      	blx	r5
 8005e84:	3001      	adds	r0, #1
 8005e86:	d025      	beq.n	8005ed4 <_printf_common+0xa8>
 8005e88:	2206      	movs	r2, #6
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	2500      	movs	r5, #0
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d105      	bne.n	8005ea0 <_printf_common+0x74>
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	68e5      	ldr	r5, [r4, #12]
 8005e98:	1aed      	subs	r5, r5, r3
 8005e9a:	43eb      	mvns	r3, r5
 8005e9c:	17db      	asrs	r3, r3, #31
 8005e9e:	401d      	ands	r5, r3
 8005ea0:	68a3      	ldr	r3, [r4, #8]
 8005ea2:	6922      	ldr	r2, [r4, #16]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	dd01      	ble.n	8005eac <_printf_common+0x80>
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	18ed      	adds	r5, r5, r3
 8005eac:	2600      	movs	r6, #0
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d120      	bne.n	8005ef4 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e010      	b.n	8005ed8 <_printf_common+0xac>
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	6832      	ldr	r2, [r6, #0]
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	ddd2      	ble.n	8005e68 <_printf_common+0x3c>
 8005ec2:	0022      	movs	r2, r4
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	9901      	ldr	r1, [sp, #4]
 8005ec8:	9800      	ldr	r0, [sp, #0]
 8005eca:	9f08      	ldr	r7, [sp, #32]
 8005ecc:	3219      	adds	r2, #25
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d1f0      	bne.n	8005eb6 <_printf_common+0x8a>
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	4240      	negs	r0, r0
 8005ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005eda:	2030      	movs	r0, #48	; 0x30
 8005edc:	18e1      	adds	r1, r4, r3
 8005ede:	3143      	adds	r1, #67	; 0x43
 8005ee0:	7008      	strb	r0, [r1, #0]
 8005ee2:	0021      	movs	r1, r4
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	3145      	adds	r1, #69	; 0x45
 8005ee8:	7809      	ldrb	r1, [r1, #0]
 8005eea:	18a2      	adds	r2, r4, r2
 8005eec:	3243      	adds	r2, #67	; 0x43
 8005eee:	3302      	adds	r3, #2
 8005ef0:	7011      	strb	r1, [r2, #0]
 8005ef2:	e7c1      	b.n	8005e78 <_printf_common+0x4c>
 8005ef4:	0022      	movs	r2, r4
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	9901      	ldr	r1, [sp, #4]
 8005efa:	9800      	ldr	r0, [sp, #0]
 8005efc:	9f08      	ldr	r7, [sp, #32]
 8005efe:	321a      	adds	r2, #26
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	d0e6      	beq.n	8005ed4 <_printf_common+0xa8>
 8005f06:	3601      	adds	r6, #1
 8005f08:	e7d1      	b.n	8005eae <_printf_common+0x82>
	...

08005f0c <_printf_i>:
 8005f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0e:	b08b      	sub	sp, #44	; 0x2c
 8005f10:	9206      	str	r2, [sp, #24]
 8005f12:	000a      	movs	r2, r1
 8005f14:	3243      	adds	r2, #67	; 0x43
 8005f16:	9307      	str	r3, [sp, #28]
 8005f18:	9005      	str	r0, [sp, #20]
 8005f1a:	9204      	str	r2, [sp, #16]
 8005f1c:	7e0a      	ldrb	r2, [r1, #24]
 8005f1e:	000c      	movs	r4, r1
 8005f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f22:	2a78      	cmp	r2, #120	; 0x78
 8005f24:	d809      	bhi.n	8005f3a <_printf_i+0x2e>
 8005f26:	2a62      	cmp	r2, #98	; 0x62
 8005f28:	d80b      	bhi.n	8005f42 <_printf_i+0x36>
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	d100      	bne.n	8005f30 <_printf_i+0x24>
 8005f2e:	e0be      	b.n	80060ae <_printf_i+0x1a2>
 8005f30:	497c      	ldr	r1, [pc, #496]	; (8006124 <_printf_i+0x218>)
 8005f32:	9103      	str	r1, [sp, #12]
 8005f34:	2a58      	cmp	r2, #88	; 0x58
 8005f36:	d100      	bne.n	8005f3a <_printf_i+0x2e>
 8005f38:	e093      	b.n	8006062 <_printf_i+0x156>
 8005f3a:	0026      	movs	r6, r4
 8005f3c:	3642      	adds	r6, #66	; 0x42
 8005f3e:	7032      	strb	r2, [r6, #0]
 8005f40:	e022      	b.n	8005f88 <_printf_i+0x7c>
 8005f42:	0010      	movs	r0, r2
 8005f44:	3863      	subs	r0, #99	; 0x63
 8005f46:	2815      	cmp	r0, #21
 8005f48:	d8f7      	bhi.n	8005f3a <_printf_i+0x2e>
 8005f4a:	f7fa f8dd 	bl	8000108 <__gnu_thumb1_case_shi>
 8005f4e:	0016      	.short	0x0016
 8005f50:	fff6001f 	.word	0xfff6001f
 8005f54:	fff6fff6 	.word	0xfff6fff6
 8005f58:	001ffff6 	.word	0x001ffff6
 8005f5c:	fff6fff6 	.word	0xfff6fff6
 8005f60:	fff6fff6 	.word	0xfff6fff6
 8005f64:	003600a3 	.word	0x003600a3
 8005f68:	fff60083 	.word	0xfff60083
 8005f6c:	00b4fff6 	.word	0x00b4fff6
 8005f70:	0036fff6 	.word	0x0036fff6
 8005f74:	fff6fff6 	.word	0xfff6fff6
 8005f78:	0087      	.short	0x0087
 8005f7a:	0026      	movs	r6, r4
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	3642      	adds	r6, #66	; 0x42
 8005f80:	1d11      	adds	r1, r2, #4
 8005f82:	6019      	str	r1, [r3, #0]
 8005f84:	6813      	ldr	r3, [r2, #0]
 8005f86:	7033      	strb	r3, [r6, #0]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0a2      	b.n	80060d2 <_printf_i+0x1c6>
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	6809      	ldr	r1, [r1, #0]
 8005f90:	1d02      	adds	r2, r0, #4
 8005f92:	060d      	lsls	r5, r1, #24
 8005f94:	d50b      	bpl.n	8005fae <_printf_i+0xa2>
 8005f96:	6805      	ldr	r5, [r0, #0]
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	2d00      	cmp	r5, #0
 8005f9c:	da03      	bge.n	8005fa6 <_printf_i+0x9a>
 8005f9e:	232d      	movs	r3, #45	; 0x2d
 8005fa0:	9a04      	ldr	r2, [sp, #16]
 8005fa2:	426d      	negs	r5, r5
 8005fa4:	7013      	strb	r3, [r2, #0]
 8005fa6:	4b5f      	ldr	r3, [pc, #380]	; (8006124 <_printf_i+0x218>)
 8005fa8:	270a      	movs	r7, #10
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	e01b      	b.n	8005fe6 <_printf_i+0xda>
 8005fae:	6805      	ldr	r5, [r0, #0]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	0649      	lsls	r1, r1, #25
 8005fb4:	d5f1      	bpl.n	8005f9a <_printf_i+0x8e>
 8005fb6:	b22d      	sxth	r5, r5
 8005fb8:	e7ef      	b.n	8005f9a <_printf_i+0x8e>
 8005fba:	680d      	ldr	r5, [r1, #0]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	1d08      	adds	r0, r1, #4
 8005fc0:	6018      	str	r0, [r3, #0]
 8005fc2:	062e      	lsls	r6, r5, #24
 8005fc4:	d501      	bpl.n	8005fca <_printf_i+0xbe>
 8005fc6:	680d      	ldr	r5, [r1, #0]
 8005fc8:	e003      	b.n	8005fd2 <_printf_i+0xc6>
 8005fca:	066d      	lsls	r5, r5, #25
 8005fcc:	d5fb      	bpl.n	8005fc6 <_printf_i+0xba>
 8005fce:	680d      	ldr	r5, [r1, #0]
 8005fd0:	b2ad      	uxth	r5, r5
 8005fd2:	4b54      	ldr	r3, [pc, #336]	; (8006124 <_printf_i+0x218>)
 8005fd4:	2708      	movs	r7, #8
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	2a6f      	cmp	r2, #111	; 0x6f
 8005fda:	d000      	beq.n	8005fde <_printf_i+0xd2>
 8005fdc:	3702      	adds	r7, #2
 8005fde:	0023      	movs	r3, r4
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	3343      	adds	r3, #67	; 0x43
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	6863      	ldr	r3, [r4, #4]
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	db03      	blt.n	8005ff6 <_printf_i+0xea>
 8005fee:	2104      	movs	r1, #4
 8005ff0:	6822      	ldr	r2, [r4, #0]
 8005ff2:	438a      	bics	r2, r1
 8005ff4:	6022      	str	r2, [r4, #0]
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	d102      	bne.n	8006000 <_printf_i+0xf4>
 8005ffa:	9e04      	ldr	r6, [sp, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00c      	beq.n	800601a <_printf_i+0x10e>
 8006000:	9e04      	ldr	r6, [sp, #16]
 8006002:	0028      	movs	r0, r5
 8006004:	0039      	movs	r1, r7
 8006006:	f7fa f90f 	bl	8000228 <__aeabi_uidivmod>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	3e01      	subs	r6, #1
 800600e:	5c5b      	ldrb	r3, [r3, r1]
 8006010:	7033      	strb	r3, [r6, #0]
 8006012:	002b      	movs	r3, r5
 8006014:	0005      	movs	r5, r0
 8006016:	429f      	cmp	r7, r3
 8006018:	d9f3      	bls.n	8006002 <_printf_i+0xf6>
 800601a:	2f08      	cmp	r7, #8
 800601c:	d109      	bne.n	8006032 <_printf_i+0x126>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	07db      	lsls	r3, r3, #31
 8006022:	d506      	bpl.n	8006032 <_printf_i+0x126>
 8006024:	6862      	ldr	r2, [r4, #4]
 8006026:	6923      	ldr	r3, [r4, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	dc02      	bgt.n	8006032 <_printf_i+0x126>
 800602c:	2330      	movs	r3, #48	; 0x30
 800602e:	3e01      	subs	r6, #1
 8006030:	7033      	strb	r3, [r6, #0]
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	1b9b      	subs	r3, r3, r6
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	9b07      	ldr	r3, [sp, #28]
 800603a:	0021      	movs	r1, r4
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	9805      	ldr	r0, [sp, #20]
 8006040:	9b06      	ldr	r3, [sp, #24]
 8006042:	aa09      	add	r2, sp, #36	; 0x24
 8006044:	f7ff fef2 	bl	8005e2c <_printf_common>
 8006048:	3001      	adds	r0, #1
 800604a:	d147      	bne.n	80060dc <_printf_i+0x1d0>
 800604c:	2001      	movs	r0, #1
 800604e:	4240      	negs	r0, r0
 8006050:	b00b      	add	sp, #44	; 0x2c
 8006052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006054:	2220      	movs	r2, #32
 8006056:	6809      	ldr	r1, [r1, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	6022      	str	r2, [r4, #0]
 800605c:	2278      	movs	r2, #120	; 0x78
 800605e:	4932      	ldr	r1, [pc, #200]	; (8006128 <_printf_i+0x21c>)
 8006060:	9103      	str	r1, [sp, #12]
 8006062:	0021      	movs	r1, r4
 8006064:	3145      	adds	r1, #69	; 0x45
 8006066:	700a      	strb	r2, [r1, #0]
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	c920      	ldmia	r1!, {r5}
 800606e:	0610      	lsls	r0, r2, #24
 8006070:	d402      	bmi.n	8006078 <_printf_i+0x16c>
 8006072:	0650      	lsls	r0, r2, #25
 8006074:	d500      	bpl.n	8006078 <_printf_i+0x16c>
 8006076:	b2ad      	uxth	r5, r5
 8006078:	6019      	str	r1, [r3, #0]
 800607a:	07d3      	lsls	r3, r2, #31
 800607c:	d502      	bpl.n	8006084 <_printf_i+0x178>
 800607e:	2320      	movs	r3, #32
 8006080:	4313      	orrs	r3, r2
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	2710      	movs	r7, #16
 8006086:	2d00      	cmp	r5, #0
 8006088:	d1a9      	bne.n	8005fde <_printf_i+0xd2>
 800608a:	2220      	movs	r2, #32
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	4393      	bics	r3, r2
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	e7a4      	b.n	8005fde <_printf_i+0xd2>
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	680d      	ldr	r5, [r1, #0]
 8006098:	1d10      	adds	r0, r2, #4
 800609a:	6949      	ldr	r1, [r1, #20]
 800609c:	6018      	str	r0, [r3, #0]
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	062e      	lsls	r6, r5, #24
 80060a2:	d501      	bpl.n	80060a8 <_printf_i+0x19c>
 80060a4:	6019      	str	r1, [r3, #0]
 80060a6:	e002      	b.n	80060ae <_printf_i+0x1a2>
 80060a8:	066d      	lsls	r5, r5, #25
 80060aa:	d5fb      	bpl.n	80060a4 <_printf_i+0x198>
 80060ac:	8019      	strh	r1, [r3, #0]
 80060ae:	2300      	movs	r3, #0
 80060b0:	9e04      	ldr	r6, [sp, #16]
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	e7c0      	b.n	8006038 <_printf_i+0x12c>
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	1d11      	adds	r1, r2, #4
 80060ba:	6019      	str	r1, [r3, #0]
 80060bc:	6816      	ldr	r6, [r2, #0]
 80060be:	2100      	movs	r1, #0
 80060c0:	0030      	movs	r0, r6
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	f000 f858 	bl	8006178 <memchr>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d001      	beq.n	80060d0 <_printf_i+0x1c4>
 80060cc:	1b80      	subs	r0, r0, r6
 80060ce:	6060      	str	r0, [r4, #4]
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	2300      	movs	r3, #0
 80060d6:	9a04      	ldr	r2, [sp, #16]
 80060d8:	7013      	strb	r3, [r2, #0]
 80060da:	e7ad      	b.n	8006038 <_printf_i+0x12c>
 80060dc:	0032      	movs	r2, r6
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	9906      	ldr	r1, [sp, #24]
 80060e2:	9805      	ldr	r0, [sp, #20]
 80060e4:	9d07      	ldr	r5, [sp, #28]
 80060e6:	47a8      	blx	r5
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0af      	beq.n	800604c <_printf_i+0x140>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	d415      	bmi.n	800611e <_printf_i+0x212>
 80060f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f4:	68e0      	ldr	r0, [r4, #12]
 80060f6:	4298      	cmp	r0, r3
 80060f8:	daaa      	bge.n	8006050 <_printf_i+0x144>
 80060fa:	0018      	movs	r0, r3
 80060fc:	e7a8      	b.n	8006050 <_printf_i+0x144>
 80060fe:	0022      	movs	r2, r4
 8006100:	2301      	movs	r3, #1
 8006102:	9906      	ldr	r1, [sp, #24]
 8006104:	9805      	ldr	r0, [sp, #20]
 8006106:	9e07      	ldr	r6, [sp, #28]
 8006108:	3219      	adds	r2, #25
 800610a:	47b0      	blx	r6
 800610c:	3001      	adds	r0, #1
 800610e:	d09d      	beq.n	800604c <_printf_i+0x140>
 8006110:	3501      	adds	r5, #1
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	42ab      	cmp	r3, r5
 800611a:	dcf0      	bgt.n	80060fe <_printf_i+0x1f2>
 800611c:	e7e9      	b.n	80060f2 <_printf_i+0x1e6>
 800611e:	2500      	movs	r5, #0
 8006120:	e7f7      	b.n	8006112 <_printf_i+0x206>
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	080064ad 	.word	0x080064ad
 8006128:	080064be 	.word	0x080064be

0800612c <memmove>:
 800612c:	b510      	push	{r4, lr}
 800612e:	4288      	cmp	r0, r1
 8006130:	d902      	bls.n	8006138 <memmove+0xc>
 8006132:	188b      	adds	r3, r1, r2
 8006134:	4298      	cmp	r0, r3
 8006136:	d303      	bcc.n	8006140 <memmove+0x14>
 8006138:	2300      	movs	r3, #0
 800613a:	e007      	b.n	800614c <memmove+0x20>
 800613c:	5c8b      	ldrb	r3, [r1, r2]
 800613e:	5483      	strb	r3, [r0, r2]
 8006140:	3a01      	subs	r2, #1
 8006142:	d2fb      	bcs.n	800613c <memmove+0x10>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	5ccc      	ldrb	r4, [r1, r3]
 8006148:	54c4      	strb	r4, [r0, r3]
 800614a:	3301      	adds	r3, #1
 800614c:	429a      	cmp	r2, r3
 800614e:	d1fa      	bne.n	8006146 <memmove+0x1a>
 8006150:	e7f8      	b.n	8006144 <memmove+0x18>
	...

08006154 <_sbrk_r>:
 8006154:	2300      	movs	r3, #0
 8006156:	b570      	push	{r4, r5, r6, lr}
 8006158:	4d06      	ldr	r5, [pc, #24]	; (8006174 <_sbrk_r+0x20>)
 800615a:	0004      	movs	r4, r0
 800615c:	0008      	movs	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fc fd68 	bl	8002c34 <_sbrk>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d103      	bne.n	8006170 <_sbrk_r+0x1c>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d000      	beq.n	8006170 <_sbrk_r+0x1c>
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	20000368 	.word	0x20000368

08006178 <memchr>:
 8006178:	b2c9      	uxtb	r1, r1
 800617a:	1882      	adds	r2, r0, r2
 800617c:	4290      	cmp	r0, r2
 800617e:	d101      	bne.n	8006184 <memchr+0xc>
 8006180:	2000      	movs	r0, #0
 8006182:	4770      	bx	lr
 8006184:	7803      	ldrb	r3, [r0, #0]
 8006186:	428b      	cmp	r3, r1
 8006188:	d0fb      	beq.n	8006182 <memchr+0xa>
 800618a:	3001      	adds	r0, #1
 800618c:	e7f6      	b.n	800617c <memchr+0x4>

0800618e <memcpy>:
 800618e:	2300      	movs	r3, #0
 8006190:	b510      	push	{r4, lr}
 8006192:	429a      	cmp	r2, r3
 8006194:	d100      	bne.n	8006198 <memcpy+0xa>
 8006196:	bd10      	pop	{r4, pc}
 8006198:	5ccc      	ldrb	r4, [r1, r3]
 800619a:	54c4      	strb	r4, [r0, r3]
 800619c:	3301      	adds	r3, #1
 800619e:	e7f8      	b.n	8006192 <memcpy+0x4>

080061a0 <_realloc_r>:
 80061a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061a2:	0007      	movs	r7, r0
 80061a4:	000e      	movs	r6, r1
 80061a6:	0014      	movs	r4, r2
 80061a8:	2900      	cmp	r1, #0
 80061aa:	d105      	bne.n	80061b8 <_realloc_r+0x18>
 80061ac:	0011      	movs	r1, r2
 80061ae:	f7ff fc49 	bl	8005a44 <_malloc_r>
 80061b2:	0005      	movs	r5, r0
 80061b4:	0028      	movs	r0, r5
 80061b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	d103      	bne.n	80061c4 <_realloc_r+0x24>
 80061bc:	f7ff fbd6 	bl	800596c <_free_r>
 80061c0:	0025      	movs	r5, r4
 80061c2:	e7f7      	b.n	80061b4 <_realloc_r+0x14>
 80061c4:	f000 f81b 	bl	80061fe <_malloc_usable_size_r>
 80061c8:	9001      	str	r0, [sp, #4]
 80061ca:	4284      	cmp	r4, r0
 80061cc:	d803      	bhi.n	80061d6 <_realloc_r+0x36>
 80061ce:	0035      	movs	r5, r6
 80061d0:	0843      	lsrs	r3, r0, #1
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	d3ee      	bcc.n	80061b4 <_realloc_r+0x14>
 80061d6:	0021      	movs	r1, r4
 80061d8:	0038      	movs	r0, r7
 80061da:	f7ff fc33 	bl	8005a44 <_malloc_r>
 80061de:	1e05      	subs	r5, r0, #0
 80061e0:	d0e8      	beq.n	80061b4 <_realloc_r+0x14>
 80061e2:	9b01      	ldr	r3, [sp, #4]
 80061e4:	0022      	movs	r2, r4
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d900      	bls.n	80061ec <_realloc_r+0x4c>
 80061ea:	001a      	movs	r2, r3
 80061ec:	0031      	movs	r1, r6
 80061ee:	0028      	movs	r0, r5
 80061f0:	f7ff ffcd 	bl	800618e <memcpy>
 80061f4:	0031      	movs	r1, r6
 80061f6:	0038      	movs	r0, r7
 80061f8:	f7ff fbb8 	bl	800596c <_free_r>
 80061fc:	e7da      	b.n	80061b4 <_realloc_r+0x14>

080061fe <_malloc_usable_size_r>:
 80061fe:	1f0b      	subs	r3, r1, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1f18      	subs	r0, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	da01      	bge.n	800620c <_malloc_usable_size_r+0xe>
 8006208:	580b      	ldr	r3, [r1, r0]
 800620a:	18c0      	adds	r0, r0, r3
 800620c:	4770      	bx	lr
	...

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
